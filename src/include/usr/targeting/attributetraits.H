
#ifndef TARG_ATTRIBUTETRAITS_H
#define TARG_ATTRIBUTETRAITS_H

/**
 *  @file attributetraits.H
 *
 *  @brief Templates which map attributes to their type/properties
 *
 *  This header file contains templates which map attributes to their
 *  type/properties
 *
 *  This file -will- be autogenerated in the future
 */

//******************************************************************************
// Includes
//******************************************************************************

// STD
#include <stdint.h>
#include <stdlib.h>

namespace TARGETING
{

//******************************************************************************
// Attribute Property Mappings
//******************************************************************************

/**
 *  @brief Template associating a specific attribute with a type and other
 *      properties, such as whether it is readable/writable
 *
 *      This will eventually be automatically generated
 *
 *      enum {
 *          disabled = Special value for the basic attribute
 *          readable = Attribute is readable
 *          writable = Attribute is writable
 *          hasStringConversion = Attribute has debug string conversion
 *      }
 *
 *      typedef <type> TYPE // <type> is the Attribute's valid type
 */
template<const ATTRIBUTE_ID A>
class AttributeTraits
{
    private:
        enum { disabled };
        typedef void* Type;
};

template<>
class AttributeTraits<ATTR_CLASS>
{
    public:
        enum { readable, hasStringConversion };
        typedef CLASS Type;
};

template<>
class AttributeTraits<ATTR_TYPE>
{
    public:
        enum { readable, hasStringConversion };
        typedef TYPE Type;
};

template<>
class AttributeTraits<ATTR_MODEL>
{
    public:
        enum { readable, hasStringConversion };
        typedef MODEL Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_RW>
{
    public:
        enum { readable, writeable };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_WO>
{
    public:
        enum { writeable };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_DUMMY_RO>
{
    public:
        enum { readable };
        typedef uint8_t Type;
};

template<>
class AttributeTraits<ATTR_PHYS_PATH>
{
    public:
        enum { readable };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_AFFINITY_PATH>
{
    public:
        enum { readable };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_POWER_PATH>
{
    public:
        enum { readable };
        typedef EntityPath Type;
};

template<>
class AttributeTraits<ATTR_PRIMARY_CAPABILITIES>
{
    public:
        enum { readable };
        typedef PrimaryCapabilities Type;
};

template<>
class AttributeTraits<ATTR_SCOM_SWITCHES>
{
    public:
        enum { readable, writable };
        typedef ScomSwitches Type;
};

template<>
class AttributeTraits<ATTR_XSCOM_BASE_ADDRESS>
{
    public:
        enum { readable };
        typedef uint64_t Type;
};

template<>
class AttributeTraits<ATTR_XSCOM_CHIP_INFO>
{
    public:
        enum { readable };
        typedef XscomChipInfo Type;
};

} // End namespace TARGETING

#endif // TARG_ATTRIBUTETRAITS_H
