/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/include/usr/hwpf/hwpf_reasoncodes.H $                     */
/*                                                                        */
/* IBM CONFIDENTIAL                                                       */
/*                                                                        */
/* COPYRIGHT International Business Machines Corp. 2013                   */
/*                                                                        */
/* p1                                                                     */
/*                                                                        */
/* Object Code Only (OCO) source materials                                */
/* Licensed Internal Code Source Materials                                */
/* IBM HostBoot Licensed Internal Code                                    */
/*                                                                        */
/* The source code for this program is not published or otherwise         */
/* divested of its trade secrets, irrespective of what has been           */
/* deposited with the U.S. Copyright Office.                              */
/*                                                                        */
/* Origin: 30                                                             */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#ifndef HWPFREASONCODES_H_
#define HWPFREASONCODES_H_

#include <hbotcompid.H>

namespace fapi
{
    /**
     * @brief Defines the HWPF error log module IDs
     */
    enum hwpfModuleId
    {
        // FAPI generated errors
        MOD_FAPI_RC_TO_ERRL                        = 0x01,

        // HWP generated errors
        MOD_HWP_RC_TO_ERRL                         = 0x02,

        // PLAT generated errors
        MOD_FAPI_GET_CHILD_CHIPLETS                = 0x03,
        MOD_FAPI_GET_PARENT_CHIP                   = 0x04,
        MOD_PLAT_ATTR_SVC_CREATE_ATTR_ACCESS_ERROR = 0x05,
        MOD_HANDLE_ECMD_BUF_RC                     = 0x06,
        MOD_VERIFY_CFAM_ACCESS_TARGET              = 0x07,
        MOD_ATTR_BASE_ADDR_GET                     = 0x08,
        MOD_ATTR_DQ_MAP_GET                        = 0x09,
        MOD_GET_CFAM_CHIP_TARGET                   = 0x0A,
        MOD_ATTR_GET_TARGET_NAME                   = 0x0B,
        MOD_FAPI_GET_ASSOCIATE_DIMMS               = 0x0C,
        MOD_EDI_EI_IO_RUN_TRAINING                 = 0x0D,
        MOD_THREAD_ACTIVATE                        = 0x0E,
        MOD_ATTR_GET_FUNCTIONAL                    = 0x0F,
        MOD_ATTR_GET_HB_TARGET                     = 0x10,
        MOD_ATTR_PROC_MEMBASE_GET                  = 0x11,
        MOD_ATTR_PROC_MIRRORBASE_GET               = 0x12,
        MOD_ATTR_PROC_FOREIGN_NEAR_BASE_GET        = 0x13,
        MOD_ATTR_PROC_FOREIGN_NEAR_SIZE_GET        = 0x14,
        MOD_ATTR_PROC_FOREIGN_FAR_BASE_GET         = 0x15,
        MOD_ATTR_PROC_FOREIGN_FAR_SIZE_GET         = 0x16,
        MOD_ATTR_PROC_HA_BASE_GET                  = 0x17,
        MOD_ATTR_PROC_HA_SIZE_GET                  = 0x18,
        MOD_ATTR_PROC_PSI_BRIDGE_BAR_ENABLE_GET    = 0x19,
        MOD_ATTR_PROC_PSI_BRIDGE_BAR_BASE_ADDR_GET = 0x1A,
        MOD_ATTR_PROC_FSP_BAR_ENABLE_GET           = 0x1B,
        MOD_ATTR_PROC_FSP_BAR_BASE_ADDR_GET        = 0x1C,
        MOD_ATTR_PROC_FSP_BAR_SIZE_GET             = 0x1D,
        MOD_ATTR_PROC_FSP_MMIO_MASK_SIZE_GET       = 0x1E,
        MOD_ATTR_PROC_INTP_BAR_ENABLE_GET          = 0x1F,
        MOD_ATTR_PROC_INTP_BAR_BASE_ADDR_GET       = 0x20,
        MOD_ATTR_PROC_NX_MMIO_BAR_ENABLE_GET       = 0x21,
        MOD_ATTR_PROC_NX_MMIO_BAR_BASE_ADDR_GET    = 0x22,
        MOD_ATTR_PROC_NX_MMIO_BAR_SIZE_GET         = 0x23,
        MOD_ATTR_PROC_PCIE_BAR_ENABLE_GET          = 0x24,
        MOD_ATTR_PROC_PCIE_BAR_BASE_ADDR_GET       = 0x25,
        MOD_ATTR_PROC_PCIE_BAR_SIZE_GET            = 0x26,
        MOD_MVPD_ACCESS                            = 0x27,
        MOD_EXIT_CACHE_CONTAINED                   = 0x28,
        MOD_GET_CACHE_DECONFIG                     = 0x29,
        MOD_FAPI_GET_OTHER_SIDE_OF_MEM_CHANNEL     = 0x2A,
        MOD_MBVPD_ACCESS                           = 0x2B,
    };

    /**
     * @brief Defines the HWPF error log reason codes
     */
    enum hwpfReasonCode
    {
        // FAPI generated errors (must match fapiReturnCodes.H)
        RC_INVALID_ATTR_GET           = HWPF_COMP_ID | 0x01,

        // HWP generated errors
        RC_HWP_GENERATED_ERROR        = HWPF_COMP_ID | 0x0f,

        // PLAT Errors generated by HostBoot code
        RC_INVALID_REQUEST            = HWPF_COMP_ID | 0x10,
        RC_UNSUPPORTED_REQUEST        = HWPF_COMP_ID | 0x11,
        RC_NO_SINGLE_PARENT           = HWPF_COMP_ID | 0x12,
        RC_FAILED_TO_ACCESS_ATTRIBUTE = HWPF_COMP_ID | 0x13,
        RC_ECMD_OPERATION_FAILURE     = HWPF_COMP_ID | 0x14,
        RC_CFAM_ACCESS_ON_PROC_ERR    = HWPF_COMP_ID | 0x15,
        RC_ATTR_BAD_TARGET_PARAM      = HWPF_COMP_ID | 0x16,
        RC_INVALID_NUM_PARENT_CHIP    = HWPF_COMP_ID | 0x17,
        RC_EMBEDDED_NULL_TARGET_PTR   = HWPF_COMP_ID | 0x18,
        RC_MIXED_PBUS_CONNECTION      = HWPF_COMP_ID | 0x19,
        RC_SAME_CHIP_PBUS_CONNECTION  = HWPF_COMP_ID | 0x1A,
        RC_CONFLICT_PBUS_CONNECTION   = HWPF_COMP_ID | 0x1B,
        RC_NO_MASTER_CORE_TARGET      = HWPF_COMP_ID | 0x1C,
        RC_NULL_FAPI_TARGET           = HWPF_COMP_ID | 0x1D,
        RC_UNEXPECTED_TARGET_TYPE     = HWPF_COMP_ID | 0x1E,
        RC_ATTR_UNKNOWN_TARGET_NAME   = HWPF_COMP_ID | 0x1F,
        RC_ATTR_UNSUPPORTED_PROC_NUM  = HWPF_COMP_ID | 0x20,
        RC_INVALID_RECORD             = HWPF_COMP_ID | 0x21,
        RC_INVALID_KEYWORD            = HWPF_COMP_ID | 0x22,
        RC_MM_EXTEND_FAILED           = HWPF_COMP_ID | 0x23,
        RC_INCORRECT_KEWORD_SIZE      = HWPF_COMP_ID | 0x24,
        RC_NO_SINGLE_MCS              = HWPF_COMP_ID | 0x25,
        RC_NO_SINGLE_MEMBUFF          = HWPF_COMP_ID | 0x26,
        RC_STATE_MISMATCH             = HWPF_COMP_ID | 0x27,
    };

    /**
     * @brief Defines the HWPF error log user detail data sections
     */
    enum hwpfUserDetailDataSubSection
    {
        HWPF_UDT_HWP_RCVALUE        = 0x01,
        HWPF_UDT_HWP_FFDC           = 0x02,
        HWPF_UDT_STEP_ERROR_DETAILS = 0x03,
    };
};

// HostBoot ErrorLog tags for FAPI errors (see fapiReturnCodes.H)
/*@
 * @errortype
 * @moduleid     MOD_FAPI_RC_TO_ERRL
 * @reasoncode   RC_INVALID_ATTR_GET
 * @devdesc      InitFile HW Procedure requested an invalid attribute
 */

#endif
