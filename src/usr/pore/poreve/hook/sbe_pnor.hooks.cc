/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/usr/pore/poreve/hook/sbe_pnor.hooks.cc $                  */
/*                                                                        */
/* IBM CONFIDENTIAL                                                       */
/*                                                                        */
/* COPYRIGHT International Business Machines Corp. 2012,2013              */
/*                                                                        */
/* p1                                                                     */
/*                                                                        */
/* Object Code Only (OCO) source materials                                */
/* Licensed Internal Code Source Materials                                */
/* IBM HostBoot Licensed Internal Code                                    */
/*                                                                        */
/* The source code for this program is not published or otherwise         */
/* divested of its trade secrets, irrespective of what has been           */
/* deposited with the U.S. Copyright Office.                              */
/*                                                                        */
/* Origin: 30                                                             */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// $Id$
//
// File generated by hook_indexer
// Arguments : -g -b centaur.sbe_pnor.out -c bin/sbe_pnor.hooks.cc -m pnor
// Generation Date : Fri Jan 18 16:07:09 CST 2013

#include "hookmanager.H"

using namespace vsbe;

static const char* symbols[106] = {
"pnor::tp_pll_func_ring",
"oci::cen_sbe_istep_pnor",
"pnor::return_from_cen_sbe_nest_startclocks",
"oci::return_from_cen_sbe_arrayinit",
"oci::cen_sbe_tp_arrayinit",
"pnor::_cen_sbe_seeprom_halt",
"oci::scan_a0",
"pnor::return_from_cen_sbe_scominits",
"oci::return_from_cen_sbe_tp_arrayinit",
"oci::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init2",
"oci::cen_sbe_scominits_control",
"pnor::scan_a0_override",
"oci::return_from_cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init3",
"pnor::callproc_prologue",
"pnor::_sbe_pnor_start",
"pnor::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_dts_init",
"pnor::cen_sbe_nest_startclocks_control",
"oci::return_from_cen_sbe_tp_chiplet_init2",
"pnor::cen_arrayinit_module",
"oci::callproc_epilogue",
"pnor::tp_pll_bndy_ring",
"oci::return_from_cen_sbe_tp_chiplet_init3",
"pnor::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_pll_setup",
"pnor::cen_scan0_module",
"oci::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_do_manual_inits",
"oci::tp_pll_bndy_ring_alt",
"oci::cen_sbe_tp_chiplet_init1_control",
"oci::cen_sbe_tp_chiplet_init2_control",
"oci::cen_sbe_tp_chiplet_init3_control",
"oci::_cen_sbe_seeprom_halt",
"pnor::cen_sbe_dts_init_control",
"oci::return_from_cen_sbe_scominits",
"pnor::cen_sbe_pll_setup_control",
"pnor::cen_sbe_pll_initf",
"pnor::scan_d0",
"oci::callproc_prologue",
"oci::_sbe_pnor_start",
"oci::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_initf",
"pnor::cen_sbe_istep_pnor",
"oci::cen_sbe_pll_setup",
"pnor::cen_sbe_tp_arrayinit",
"pnor::return_from_cen_sbe_tp_arrayinit",
"pnor::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init2",
"pnor::cen_sbe_pll_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init1",
"pnor::return_from_cen_sbe_pll_setup",
"oci::return_from_cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init3",
"pnor::cen_sbe_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init2",
"oci::tp_pll_gptr_ring",
"pnor::return_from_cen_sbe_tp_chiplet_init3",
"oci::cen_sbe_pll_setup_control",
"oci::cen_sbe_pll_initf",
"oci::scan_d0",
"pnor::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_initf",
"pnor::tp_pll_bndy_ring_alt",
"pnor::cen_sbe_tp_chiplet_init1_control",
"oci::cen_sbe_chiplet_init_control",
"pnor::cen_sbe_tp_chiplet_init2_control",
"pnor::cen_sbe_tp_chiplet_init3_control",
"pnor::return_from_cen_sbe_pll_initf",
"pnor::cen_sbe_arrayinit",
"pnor::return_from_cen_sbe_initf",
"oci::cen_sbe_pll_initf_control",
"oci::return_from_cen_sbe_pll_setup",
"oci::cen_sbe_initf_control",
"oci::cen_sbe_nest_startclocks",
"oci::tp_pll_func_ring",
"pnor::cen_sbe_arrayinit_control",
"oci::return_from_cen_sbe_nest_startclocks",
"pnor::cen_sbe_chiplet_init",
"pnor::return_from_cen_sbe_chiplet_init",
"oci::return_from_cen_sbe_pll_initf",
"oci::cen_sbe_arrayinit",
"pnor::tp_pll_gptr_ring",
"oci::return_from_cen_sbe_initf",
"pnor::return_from_cen_sbe_do_manual_inits",
"pnor::cen_sbe_scominits",
"oci::scan_a0_override",
"oci::cen_sbe_dts_init",
"oci::cen_sbe_nest_startclocks_control",
"oci::cen_arrayinit_module",
"oci::tp_pll_bndy_ring",
"oci::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_chiplet_init_control",
"pnor::return_from_cen_sbe_arrayinit",
"oci::cen_scan0_module",
"pnor::scan_a0",
"oci::cen_sbe_arrayinit_control",
"pnor::cen_sbe_scominits_control",
"oci::cen_sbe_dts_init_control",
"pnor::callproc_epilogue",
"oci::return_from_cen_sbe_do_manual_inits",
"oci::cen_sbe_scominits",
"pnor::cen_sbe_do_manual_inits",
"pnor::cen_sbe_nest_startclocks",
};

static GlobalSymbolInfo info[106] = {
{PoreAddress(0x800b, 0x000013c8), 'R'},
{PoreAddress(0x8000, 0x000002e0), 'T'},
{PoreAddress(0x800b, 0x00000590), 'T'},
{PoreAddress(0x8000, 0x000004a0), 'T'},
{PoreAddress(0x8000, 0x00000a30), 'T'},
{PoreAddress(0x800b, 0x000005ec), 'T'},
{PoreAddress(0x8000, 0x00001378), 'T'},
{PoreAddress(0x800b, 0x000005cc), 'T'},
{PoreAddress(0x8000, 0x000003ec), 'T'},
{PoreAddress(0x8000, 0x00000618), 'T'},
{PoreAddress(0x8000, 0x00000804), 'T'},
{PoreAddress(0x8000, 0x00000260), 'R'},
{PoreAddress(0x800b, 0x00001398), 'T'},
{PoreAddress(0x8000, 0x000002fc), 'T'},
{PoreAddress(0x8000, 0x00000a88), 'T'},
{PoreAddress(0x800b, 0x00001194), 'T'},
{PoreAddress(0x800b, 0x000002e0), 'T'},
{PoreAddress(0x800b, 0x00000250), 'R'},
{PoreAddress(0x800b, 0x000010a0), 'T'},
{PoreAddress(0x800b, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x000003b0), 'T'},
{PoreAddress(0x800b, 0x000008f8), 'T'},
{PoreAddress(0x8000, 0x00001260), 'T'},
{PoreAddress(0x800b, 0x000013d8), 'R'},
{PoreAddress(0x8000, 0x00000428), 'T'},
{PoreAddress(0x800b, 0x000004dc), 'T'},
{PoreAddress(0x800b, 0x00000f9c), 'T'},
{PoreAddress(0x800b, 0x00000748), 'T'},
{PoreAddress(0x8000, 0x00000220), 'R'},
{PoreAddress(0x8000, 0x000010a8), 'T'},
{PoreAddress(0x8000, 0x00000268), 'R'},
{PoreAddress(0x8000, 0x00000200), 'R'},
{PoreAddress(0x8000, 0x00000218), 'R'},
{PoreAddress(0x8000, 0x00000228), 'R'},
{PoreAddress(0x8000, 0x000005ec), 'T'},
{PoreAddress(0x800b, 0x00000240), 'R'},
{PoreAddress(0x8000, 0x000005cc), 'T'},
{PoreAddress(0x800b, 0x00000210), 'R'},
{PoreAddress(0x800b, 0x00000e40), 'T'},
{PoreAddress(0x800b, 0x0000135c), 'T'},
{PoreAddress(0x8000, 0x00001194), 'T'},
{PoreAddress(0x8000, 0x000002e0), 'T'},
{PoreAddress(0x8000, 0x00000250), 'R'},
{PoreAddress(0x800b, 0x000010a4), 'T'},
{PoreAddress(0x800b, 0x000002e0), 'T'},
{PoreAddress(0x8000, 0x00000f9c), 'T'},
{PoreAddress(0x800b, 0x00000a30), 'T'},
{PoreAddress(0x800b, 0x000003ec), 'T'},
{PoreAddress(0x800b, 0x00000618), 'T'},
{PoreAddress(0x8000, 0x00000b64), 'T'},
{PoreAddress(0x800b, 0x00000804), 'T'},
{PoreAddress(0x800b, 0x00000208), 'R'},
{PoreAddress(0x800b, 0x000002fc), 'T'},
{PoreAddress(0x800b, 0x00000374), 'T'},
{PoreAddress(0x8000, 0x00000464), 'T'},
{PoreAddress(0x800b, 0x00000a88), 'T'},
{PoreAddress(0x800b, 0x00000248), 'R'},
{PoreAddress(0x800b, 0x000003b0), 'T'},
{PoreAddress(0x8000, 0x000013b8), 'R'},
{PoreAddress(0x800b, 0x00000428), 'T'},
{PoreAddress(0x8000, 0x00000210), 'R'},
{PoreAddress(0x8000, 0x00000e40), 'T'},
{PoreAddress(0x8000, 0x0000135c), 'T'},
{PoreAddress(0x800b, 0x00000220), 'R'},
{PoreAddress(0x8000, 0x000010a4), 'T'},
{PoreAddress(0x800b, 0x00000268), 'R'},
{PoreAddress(0x800b, 0x00000200), 'R'},
{PoreAddress(0x8000, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x00000218), 'R'},
{PoreAddress(0x800b, 0x00000228), 'R'},
{PoreAddress(0x800b, 0x00000338), 'T'},
{PoreAddress(0x800b, 0x00000e08), 'T'},
{PoreAddress(0x800b, 0x00000518), 'T'},
{PoreAddress(0x8000, 0x00000208), 'R'},
{PoreAddress(0x8000, 0x00000374), 'T'},
{PoreAddress(0x8000, 0x00000248), 'R'},
{PoreAddress(0x8000, 0x000010ac), 'T'},
{PoreAddress(0x8000, 0x000013c8), 'R'},
{PoreAddress(0x800b, 0x00000238), 'R'},
{PoreAddress(0x8000, 0x00000590), 'T'},
{PoreAddress(0x800b, 0x00000b64), 'T'},
{PoreAddress(0x800b, 0x00000464), 'T'},
{PoreAddress(0x8000, 0x00000338), 'T'},
{PoreAddress(0x8000, 0x00000e08), 'T'},
{PoreAddress(0x800b, 0x000013b8), 'R'},
{PoreAddress(0x8000, 0x00000518), 'T'},
{PoreAddress(0x800b, 0x00000554), 'T'},
{PoreAddress(0x800b, 0x00001190), 'T'},
{PoreAddress(0x8000, 0x00001398), 'T'},
{PoreAddress(0x8000, 0x000010a0), 'T'},
{PoreAddress(0x8000, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x000008f8), 'T'},
{PoreAddress(0x8000, 0x000013d8), 'R'},
{PoreAddress(0x8000, 0x000004dc), 'T'},
{PoreAddress(0x800b, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x000004a0), 'T'},
{PoreAddress(0x8000, 0x00000748), 'T'},
{PoreAddress(0x800b, 0x00001378), 'T'},
{PoreAddress(0x8000, 0x00000238), 'R'},
{PoreAddress(0x800b, 0x00000260), 'R'},
{PoreAddress(0x8000, 0x00000240), 'R'},
{PoreAddress(0x800b, 0x00001260), 'T'},
{PoreAddress(0x8000, 0x00000554), 'T'},
{PoreAddress(0x8000, 0x00001190), 'T'},
{PoreAddress(0x800b, 0x000010a8), 'T'},
{PoreAddress(0x800b, 0x000010ac), 'T'},
};

static void
init()
{
int i;
FAPI_INF("HookManager : "
         "Indexing global symbols for centaur.sbe_pnor.out");
for (i = 0; i < 106; i++) {
    HookManager::registerGlobalSymbol(symbols[i], &(info[i]));
}
}

static HookInitializer initializer(init);
