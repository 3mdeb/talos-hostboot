//  IBM_PROLOG_BEGIN_TAG
//  This is an automatically generated prolog.
//
//  $Source: src/usr/pore/poreve/hook/sbe_pnor.hooks.cc $
//
//  IBM CONFIDENTIAL
//
//  COPYRIGHT International Business Machines Corp. 2012
//
//  p1
//
//  Object Code Only (OCO) source materials
//  Licensed Internal Code Source Materials
//  IBM HostBoot Licensed Internal Code
//
//  The source code for this program is not published or other-
//  wise divested of its trade secrets, irrespective of what has
//  been deposited with the U.S. Copyright Office.
//
//  Origin: 30
//
//  IBM_PROLOG_END
// $Id$
//
// File generated by hook_indexer
// Arguments : -g -b bin/sbe_pnor.out -c bin/sbe_pnor.hooks.cc -m pnor
// Generation Date : Thu Feb  9 13:47:52 EST 2012

#include "hookmanager.H"

using namespace vsbe;

static const char* symbols[84] = {
"oci::cen_sbe_istep_pnor",
"oci::return_from_cen_sbe_arrayinit",
"oci::cen_sbe_tp_arrayinit",
"pnor::return_from_cen_sbe_scominits",
"oci::return_from_cen_sbe_tp_arrayinit",
"oci::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init2",
"oci::cen_sbe_scominits_control",
"oci::return_from_cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init3",
"pnor::_sbe_pnor_start",
"pnor::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_dts_init",
"oci::return_from_cen_sbe_tp_chiplet_init2",
"oci::return_from_cen_sbe_tp_chiplet_init3",
"pnor::return_from_cen_sbe_dts_init",
"pnor::cen_scan0_module",
"oci::cen_sbe_do_manual_inits",
"oci::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_tp_chiplet_init1_control",
"oci::cen_sbe_tp_chiplet_init2_control",
"oci::cen_sbe_tp_chiplet_init3_control",
"pnor::cen_sbe_dts_init_control",
"pnor::return_from_cen_sbe_startclocks",
"oci::return_from_cen_sbe_scominits",
"pnor::cen_sbe_pll_initf",
"oci::_sbe_pnor_start",
"oci::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_initf",
"oci::cen_sbe_do_scom_manual_inits",
"pnor::cen_sbe_istep_pnor",
"oci::return_from_cen_sbe_do_scom_manual_inits",
"pnor::cen_sbe_tp_arrayinit",
"pnor::return_from_cen_sbe_tp_arrayinit",
"oci::cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init1",
"pnor::cen_sbe_tp_chiplet_init2",
"pnor::cen_sbe_pll_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init1",
"oci::return_from_cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init3",
"pnor::cen_sbe_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init2",
"oci::return_from_cen_sbe_startclocks",
"oci::cen_sbe_do_scom_manual_inits_control",
"pnor::return_from_cen_sbe_tp_chiplet_init3",
"oci::cen_sbe_pll_initf",
"pnor::cen_sbe_startclocks",
"oci::cen_sbe_initf",
"pnor::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_chiplet_init_control",
"pnor::cen_sbe_tp_chiplet_init1_control",
"pnor::cen_sbe_tp_chiplet_init2_control",
"pnor::cen_sbe_tp_chiplet_init3_control",
"pnor::return_from_cen_sbe_pll_initf",
"pnor::cen_sbe_arrayinit",
"pnor::return_from_cen_sbe_initf",
"oci::cen_sbe_pll_initf_control",
"pnor::cen_sbe_startclocks_control",
"oci::cen_sbe_initf_control",
"pnor::cen_sbe_do_scom_manual_inits",
"pnor::return_from_cen_sbe_do_scom_manual_inits",
"oci::cen_sbe_startclocks",
"pnor::cen_sbe_arrayinit_control",
"pnor::cen_sbe_chiplet_init",
"pnor::return_from_cen_sbe_chiplet_init",
"oci::return_from_cen_sbe_pll_initf",
"oci::cen_sbe_arrayinit",
"pnor::cen_sbe_do_scom_manual_inits_control",
"oci::return_from_cen_sbe_initf",
"pnor::return_from_cen_sbe_do_manual_inits",
"pnor::cen_sbe_scominits",
"oci::cen_sbe_startclocks_control",
"oci::cen_sbe_dts_init",
"oci::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_chiplet_init_control",
"pnor::return_from_cen_sbe_arrayinit",
"oci::cen_scan0_module",
"oci::cen_sbe_arrayinit_control",
"pnor::cen_sbe_scominits_control",
"oci::cen_sbe_dts_init_control",
"oci::return_from_cen_sbe_do_manual_inits",
"oci::cen_sbe_scominits",
"pnor::cen_sbe_do_manual_inits",
};

static GlobalSymbolInfo info[84] = {
{PoreAddress(0x8000, 0x00000c00), 'T'},
{PoreAddress(0x8000, 0x00000fb0), 'T'},
{PoreAddress(0x8000, 0x00001784), 'T'},
{PoreAddress(0x800b, 0x000013a0), 'T'},
{PoreAddress(0x8000, 0x00000d10), 'T'},
{PoreAddress(0x8000, 0x00001554), 'T'},
{PoreAddress(0x8000, 0x000016c8), 'T'},
{PoreAddress(0x8000, 0x000001d8), 'R'},
{PoreAddress(0x8000, 0x00000c68), 'T'},
{PoreAddress(0x8000, 0x00001884), 'T'},
{PoreAddress(0x800b, 0x00000c00), 'T'},
{PoreAddress(0x800b, 0x000001c8), 'R'},
{PoreAddress(0x800b, 0x00001cb0), 'T'},
{PoreAddress(0x8000, 0x00000db8), 'T'},
{PoreAddress(0x8000, 0x00000e60), 'T'},
{PoreAddress(0x800b, 0x00001100), 'T'},
{PoreAddress(0x800b, 0x0000148c), 'T'},
{PoreAddress(0x8000, 0x00001cc8), 'T'},
{PoreAddress(0x8000, 0x00000190), 'R'},
{PoreAddress(0x8000, 0x00000180), 'R'},
{PoreAddress(0x8000, 0x00000188), 'R'},
{PoreAddress(0x8000, 0x00000198), 'R'},
{PoreAddress(0x800b, 0x000001b8), 'R'},
{PoreAddress(0x800b, 0x000012f8), 'T'},
{PoreAddress(0x8000, 0x000013a0), 'T'},
{PoreAddress(0x800b, 0x00001c9c), 'T'},
{PoreAddress(0x8000, 0x00000c00), 'T'},
{PoreAddress(0x8000, 0x000001c8), 'R'},
{PoreAddress(0x800b, 0x00001cbc), 'T'},
{PoreAddress(0x8000, 0x00001dd4), 'T'},
{PoreAddress(0x800b, 0x00000c00), 'T'},
{PoreAddress(0x8000, 0x00001448), 'T'},
{PoreAddress(0x800b, 0x00001784), 'T'},
{PoreAddress(0x800b, 0x00000d10), 'T'},
{PoreAddress(0x8000, 0x00001938), 'T'},
{PoreAddress(0x800b, 0x00001554), 'T'},
{PoreAddress(0x800b, 0x000016c8), 'T'},
{PoreAddress(0x800b, 0x000001b0), 'R'},
{PoreAddress(0x800b, 0x00000c68), 'T'},
{PoreAddress(0x8000, 0x00000f08), 'T'},
{PoreAddress(0x800b, 0x00001884), 'T'},
{PoreAddress(0x800b, 0x000001c0), 'R'},
{PoreAddress(0x800b, 0x00000db8), 'T'},
{PoreAddress(0x8000, 0x000012f8), 'T'},
{PoreAddress(0x8000, 0x000001e0), 'R'},
{PoreAddress(0x800b, 0x00000e60), 'T'},
{PoreAddress(0x8000, 0x00001c9c), 'T'},
{PoreAddress(0x800b, 0x00001cd4), 'T'},
{PoreAddress(0x8000, 0x00001cbc), 'T'},
{PoreAddress(0x800b, 0x00000190), 'R'},
{PoreAddress(0x8000, 0x000001a0), 'R'},
{PoreAddress(0x800b, 0x00000180), 'R'},
{PoreAddress(0x800b, 0x00000188), 'R'},
{PoreAddress(0x800b, 0x00000198), 'R'},
{PoreAddress(0x800b, 0x00001058), 'T'},
{PoreAddress(0x800b, 0x00001b94), 'T'},
{PoreAddress(0x800b, 0x000011a8), 'T'},
{PoreAddress(0x8000, 0x000001b0), 'R'},
{PoreAddress(0x800b, 0x000001d0), 'R'},
{PoreAddress(0x8000, 0x000001c0), 'R'},
{PoreAddress(0x800b, 0x00001dd4), 'T'},
{PoreAddress(0x800b, 0x00001448), 'T'},
{PoreAddress(0x8000, 0x00001cd4), 'T'},
{PoreAddress(0x800b, 0x000001a8), 'R'},
{PoreAddress(0x800b, 0x00001938), 'T'},
{PoreAddress(0x800b, 0x00000f08), 'T'},
{PoreAddress(0x8000, 0x00001058), 'T'},
{PoreAddress(0x8000, 0x00001b94), 'T'},
{PoreAddress(0x800b, 0x000001e0), 'R'},
{PoreAddress(0x8000, 0x000011a8), 'T'},
{PoreAddress(0x800b, 0x00001250), 'T'},
{PoreAddress(0x800b, 0x00001dc8), 'T'},
{PoreAddress(0x8000, 0x000001d0), 'R'},
{PoreAddress(0x8000, 0x00001cb0), 'T'},
{PoreAddress(0x8000, 0x00001100), 'T'},
{PoreAddress(0x800b, 0x000001a0), 'R'},
{PoreAddress(0x800b, 0x00000fb0), 'T'},
{PoreAddress(0x8000, 0x0000148c), 'T'},
{PoreAddress(0x8000, 0x000001a8), 'R'},
{PoreAddress(0x800b, 0x000001d8), 'R'},
{PoreAddress(0x8000, 0x000001b8), 'R'},
{PoreAddress(0x8000, 0x00001250), 'T'},
{PoreAddress(0x8000, 0x00001dc8), 'T'},
{PoreAddress(0x800b, 0x00001cc8), 'T'},
};

static void
init()
{
int i;
FAPI_INF("HookManager : "
         "Indexing global symbols for bin/sbe_pnor.out");
for (i = 0; i < 84; i++) {
    HookManager::registerGlobalSymbol(symbols[i], &(info[i]));
}
}

static HookInitializer initializer(init);
