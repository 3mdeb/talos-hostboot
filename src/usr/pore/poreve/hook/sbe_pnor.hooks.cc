/*  IBM_PROLOG_BEGIN_TAG
 *  This is an automatically generated prolog.
 *
 *  $Source: src/usr/pore/poreve/hook/sbe_pnor.hooks.cc $
 *
 *  IBM CONFIDENTIAL
 *
 *  COPYRIGHT International Business Machines Corp. 2012
 *
 *  p1
 *
 *  Object Code Only (OCO) source materials
 *  Licensed Internal Code Source Materials
 *  IBM HostBoot Licensed Internal Code
 *
 *  The source code for this program is not published or other-
 *  wise divested of its trade secrets, irrespective of what has
 *  been deposited with the U.S. Copyright Office.
 *
 *  Origin: 30
 *
 *  IBM_PROLOG_END_TAG
 */
// $Id$
//
// File generated by hook_indexer
// Arguments : -g -b centaur.sbe_pnor.out -c bin/sbe_pnor.hooks.cc -m pnor
// Generation Date : Wed Jun 13 08:16:03 CDT 2012

#include "hookmanager.H"

using namespace vsbe;

static const char* symbols[92] = {
"oci::cen_sbe_istep_pnor",
"oci::return_from_cen_sbe_arrayinit",
"oci::cen_sbe_tp_arrayinit",
"pnor::_cen_sbe_seeprom_halt",
"oci::cen_sbe_dd10_tp_bndy_pll_ring",
"pnor::return_from_cen_sbe_scominits",
"oci::return_from_cen_sbe_tp_arrayinit",
"oci::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init2",
"oci::cen_sbe_scominits_control",
"oci::return_from_cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init3",
"pnor::cen_array_init_module",
"pnor::callproc_prologue",
"pnor::_sbe_pnor_start",
"pnor::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_dts_init",
"oci::return_from_cen_sbe_tp_chiplet_init2",
"oci::callproc_epilogue",
"oci::return_from_cen_sbe_tp_chiplet_init3",
"pnor::return_from_cen_sbe_dts_init",
"pnor::cen_scan0_module",
"oci::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_do_manual_inits",
"oci::cen_sbe_tp_chiplet_init1_control",
"oci::cen_sbe_tp_chiplet_init2_control",
"oci::cen_sbe_tp_chiplet_init3_control",
"oci::_cen_sbe_seeprom_halt",
"pnor::cen_sbe_dts_init_control",
"pnor::return_from_cen_sbe_startclocks",
"oci::return_from_cen_sbe_scominits",
"pnor::cen_sbe_pll_initf",
"oci::cen_array_init_module",
"oci::callproc_prologue",
"oci::_sbe_pnor_start",
"oci::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_initf",
"pnor::cen_sbe_istep_pnor",
"pnor::cen_sbe_tp_arrayinit",
"pnor::return_from_cen_sbe_tp_arrayinit",
"pnor::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init2",
"pnor::cen_sbe_pll_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init1",
"oci::return_from_cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init3",
"pnor::cen_sbe_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init2",
"oci::return_from_cen_sbe_startclocks",
"pnor::return_from_cen_sbe_tp_chiplet_init3",
"oci::cen_sbe_pll_initf",
"pnor::cen_sbe_startclocks",
"pnor::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_initf",
"oci::cen_sbe_tp_bndy_pll_ring_loc",
"pnor::cen_sbe_tp_chiplet_init1_control",
"oci::cen_sbe_chiplet_init_control",
"pnor::cen_sbe_tp_chiplet_init2_control",
"pnor::cen_sbe_tp_chiplet_init3_control",
"pnor::return_from_cen_sbe_pll_initf",
"pnor::cen_sbe_arrayinit",
"oci::cen_sbe_ring_table",
"pnor::return_from_cen_sbe_initf",
"oci::cen_sbe_pll_initf_control",
"pnor::cen_sbe_startclocks_control",
"oci::cen_sbe_initf_control",
"oci::cen_sbe_startclocks",
"pnor::cen_sbe_arrayinit_control",
"pnor::cen_sbe_chiplet_init",
"pnor::return_from_cen_sbe_chiplet_init",
"oci::return_from_cen_sbe_pll_initf",
"oci::cen_sbe_arrayinit",
"oci::return_from_cen_sbe_initf",
"pnor::return_from_cen_sbe_do_manual_inits",
"pnor::cen_sbe_scominits",
"oci::cen_sbe_startclocks_control",
"oci::cen_sbe_dts_init",
"pnor::cen_sbe_tp_bndy_pll_ring_loc",
"oci::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_chiplet_init_control",
"pnor::return_from_cen_sbe_arrayinit",
"oci::cen_scan0_module",
"pnor::cen_sbe_dd10_tp_bndy_pll_ring",
"oci::cen_sbe_arrayinit_control",
"pnor::cen_sbe_ring_table",
"pnor::cen_sbe_scominits_control",
"oci::cen_sbe_dts_init_control",
"pnor::callproc_epilogue",
"oci::return_from_cen_sbe_do_manual_inits",
"oci::cen_sbe_scominits",
"pnor::cen_sbe_do_manual_inits",
};

static GlobalSymbolInfo info[92] = {
{PoreAddress(0x8000, 0x000002c0), 'T'},
{PoreAddress(0x8000, 0x00000444), 'T'},
{PoreAddress(0x8000, 0x00000a7c), 'T'},
{PoreAddress(0x800b, 0x00000590), 'T'},
{PoreAddress(0x8000, 0x000011b8), 'R'},
{PoreAddress(0x800b, 0x00000570), 'T'},
{PoreAddress(0x8000, 0x00000390), 'T'},
{PoreAddress(0x8000, 0x000005b8), 'T'},
{PoreAddress(0x8000, 0x00000824), 'T'},
{PoreAddress(0x8000, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x000002dc), 'T'},
{PoreAddress(0x8000, 0x00000ad8), 'T'},
{PoreAddress(0x800b, 0x00000918), 'T'},
{PoreAddress(0x800b, 0x00001010), 'T'},
{PoreAddress(0x800b, 0x000002c0), 'T'},
{PoreAddress(0x800b, 0x00000248), 'R'},
{PoreAddress(0x800b, 0x00000ee8), 'T'},
{PoreAddress(0x8000, 0x00000354), 'T'},
{PoreAddress(0x8000, 0x000010dc), 'T'},
{PoreAddress(0x8000, 0x000003cc), 'T'},
{PoreAddress(0x800b, 0x00000480), 'T'},
{PoreAddress(0x800b, 0x00000764), 'T'},
{PoreAddress(0x8000, 0x00000218), 'R'},
{PoreAddress(0x8000, 0x00000ef0), 'T'},
{PoreAddress(0x8000, 0x00000200), 'R'},
{PoreAddress(0x8000, 0x00000210), 'R'},
{PoreAddress(0x8000, 0x00000220), 'R'},
{PoreAddress(0x8000, 0x00000590), 'T'},
{PoreAddress(0x800b, 0x00000238), 'R'},
{PoreAddress(0x800b, 0x00000534), 'T'},
{PoreAddress(0x8000, 0x00000570), 'T'},
{PoreAddress(0x800b, 0x00000ee4), 'T'},
{PoreAddress(0x8000, 0x00000918), 'T'},
{PoreAddress(0x8000, 0x00001010), 'T'},
{PoreAddress(0x8000, 0x000002c0), 'T'},
{PoreAddress(0x8000, 0x00000248), 'R'},
{PoreAddress(0x800b, 0x00000eec), 'T'},
{PoreAddress(0x800b, 0x000002c0), 'T'},
{PoreAddress(0x800b, 0x00000a7c), 'T'},
{PoreAddress(0x800b, 0x00000390), 'T'},
{PoreAddress(0x800b, 0x000005b8), 'T'},
{PoreAddress(0x8000, 0x00000bb8), 'T'},
{PoreAddress(0x800b, 0x00000824), 'T'},
{PoreAddress(0x800b, 0x00000208), 'R'},
{PoreAddress(0x800b, 0x000002dc), 'T'},
{PoreAddress(0x8000, 0x00000408), 'T'},
{PoreAddress(0x800b, 0x00000ad8), 'T'},
{PoreAddress(0x800b, 0x00000240), 'R'},
{PoreAddress(0x800b, 0x00000354), 'T'},
{PoreAddress(0x8000, 0x00000534), 'T'},
{PoreAddress(0x800b, 0x000003cc), 'T'},
{PoreAddress(0x8000, 0x00000ee4), 'T'},
{PoreAddress(0x800b, 0x00000ef4), 'T'},
{PoreAddress(0x800b, 0x00000218), 'R'},
{PoreAddress(0x8000, 0x00000eec), 'T'},
{PoreAddress(0x8000, 0x000011a8), 'R'},
{PoreAddress(0x800b, 0x00000200), 'R'},
{PoreAddress(0x8000, 0x00000228), 'R'},
{PoreAddress(0x800b, 0x00000210), 'R'},
{PoreAddress(0x800b, 0x00000220), 'R'},
{PoreAddress(0x800b, 0x00000318), 'T'},
{PoreAddress(0x800b, 0x00000eac), 'T'},
{PoreAddress(0x8000, 0x000011a8), 'R'},
{PoreAddress(0x800b, 0x000004bc), 'T'},
{PoreAddress(0x8000, 0x00000208), 'R'},
{PoreAddress(0x800b, 0x00000250), 'R'},
{PoreAddress(0x8000, 0x00000240), 'R'},
{PoreAddress(0x8000, 0x00000ef4), 'T'},
{PoreAddress(0x800b, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x00000bb8), 'T'},
{PoreAddress(0x800b, 0x00000408), 'T'},
{PoreAddress(0x8000, 0x00000318), 'T'},
{PoreAddress(0x8000, 0x00000eac), 'T'},
{PoreAddress(0x8000, 0x000004bc), 'T'},
{PoreAddress(0x800b, 0x000004f8), 'T'},
{PoreAddress(0x800b, 0x0000100c), 'T'},
{PoreAddress(0x8000, 0x00000250), 'R'},
{PoreAddress(0x8000, 0x00000ee8), 'T'},
{PoreAddress(0x800b, 0x000011a8), 'R'},
{PoreAddress(0x8000, 0x00000480), 'T'},
{PoreAddress(0x800b, 0x00000228), 'R'},
{PoreAddress(0x800b, 0x00000444), 'T'},
{PoreAddress(0x8000, 0x00000764), 'T'},
{PoreAddress(0x800b, 0x000011b8), 'R'},
{PoreAddress(0x8000, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x000011a8), 'R'},
{PoreAddress(0x800b, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x00000238), 'R'},
{PoreAddress(0x800b, 0x000010dc), 'T'},
{PoreAddress(0x8000, 0x000004f8), 'T'},
{PoreAddress(0x8000, 0x0000100c), 'T'},
{PoreAddress(0x800b, 0x00000ef0), 'T'},
};

static void
init()
{
int i;
FAPI_INF("HookManager : "
         "Indexing global symbols for centaur.sbe_pnor.out");
for (i = 0; i < 92; i++) {
    HookManager::registerGlobalSymbol(symbols[i], &(info[i]));
}
}

static HookInitializer initializer(init);
