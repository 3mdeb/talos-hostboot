/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/usr/pore/poreve/hook/sbe_pnor.hooks.cc $                  */
/*                                                                        */
/* OpenPOWER HostBoot Project                                             */
/*                                                                        */
/* COPYRIGHT International Business Machines Corp. 2012,2014              */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
// $Id$
//
// File generated by hook_indexer
// Arguments : -b centaur.sbe_pnor.out -c bin/sbe_pnor.hooks.cc -m pnor
// Generation Date : Thu May 29 16:22:07 CDT 2014

#include "hookmanager.H"

using namespace vsbe;

static const char* symbols[146] = {
"pnor::tp_pll_func_ring",
"pnor::tcn_refr_func_ring",
"oci::cen_sbe_istep_pnor",
"pnor::return_from_cen_sbe_nest_startclocks",
"pnor::tcn_mbi_gptr_ring",
"oci::return_from_cen_sbe_arrayinit",
"pnor::tcn_refr_time_ring",
"pnor::tcn_mbi_cmsk_ring",
"oci::tcm_memn_cmsk_ring",
"pnor::refclock_term",
"oci::cen_sbe_tp_arrayinit",
"pnor::_cen_sbe_seeprom_halt",
"oci::scan_a0",
"pnor::return_from_cen_sbe_scominits",
"oci::return_from_cen_sbe_tp_arrayinit",
"oci::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init2",
"oci::cen_sbe_scominits_control",
"oci::tcn_mbs_func_ring",
"oci::tcn_dmi_func_ring",
"pnor::scan_a0_override",
"oci::return_from_cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_tp_chiplet_init3",
"pnor::callproc_prologue",
"pnor::_sbe_pnor_start",
"pnor::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_dts_init",
"pnor::cen_sbe_nest_startclocks_control",
"oci::return_from_cen_sbe_tp_chiplet_init2",
"pnor::cen_arrayinit_module",
"oci::callproc_epilogue",
"pnor::tp_pll_bndy_ring",
"oci::return_from_cen_sbe_tp_chiplet_init3",
"pnor::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_pll_setup",
"oci::tcn_perv_func_ring",
"pnor::cen_scan0_module",
"oci::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_do_manual_inits",
"oci::tp_pll_bndy_ring_alt",
"oci::cen_sbe_tp_chiplet_init1_control",
"oci::tcn_mbi_gptr_ring",
"oci::cen_sbe_tp_chiplet_init2_control",
"oci::tcn_mbi_cmsk_ring",
"oci::refclock_term",
"oci::cen_sbe_tp_chiplet_init3_control",
"oci::_cen_sbe_seeprom_halt",
"pnor::cen_sbe_dts_init_control",
"oci::return_from_cen_sbe_scominits",
"pnor::tcn_mbi_func_ring",
"oci::tcm_perv_func_ring",
"oci::tcm_memn_func_ring",
"oci::repair_loader_loop_sim",
"pnor::cen_sbe_pll_setup_control",
"pnor::cen_sbe_pll_initf",
"pnor::scan_d0",
"oci::callproc_prologue",
"oci::_sbe_pnor_start",
"oci::cen_sbe_do_manual_inits_control",
"pnor::cen_sbe_initf",
"pnor::set_scan_ratio_d0",
"pnor::cen_sbe_istep_pnor",
"oci::cen_sbe_pll_setup",
"pnor::tcm_memn_cmsk_ring",
"pnor::cen_sbe_tp_arrayinit",
"oci::tcm_mems_cmsk_ring",
"pnor::return_from_cen_sbe_tp_arrayinit",
"pnor::cen_sbe_tp_chiplet_init1",
"oci::cen_sbe_chiplet_init",
"oci::tcn_refr_abst_ring",
"pnor::cen_sbe_tp_chiplet_init2",
"pnor::cen_sbe_pll_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init1",
"pnor::return_from_cen_sbe_pll_setup",
"oci::return_from_cen_sbe_chiplet_init",
"pnor::cen_sbe_tp_chiplet_init3",
"pnor::cen_sbe_initf_control",
"pnor::return_from_cen_sbe_tp_chiplet_init2",
"oci::tp_pll_gptr_ring",
"oci::tcn_mbi_func_ring",
"pnor::return_from_cen_sbe_tp_chiplet_init3",
"oci::cen_sbe_pll_setup_control",
"pnor::tcn_perv_func_ring",
"oci::cen_sbe_pll_initf",
"oci::scan_d0",
"pnor::cen_sbe_tp_arrayinit_control",
"oci::cen_sbe_initf",
"oci::set_scan_ratio_d0",
"pnor::tp_pll_bndy_ring_alt",
"pnor::cen_sbe_tp_chiplet_init1_control",
"pnor::cen_repair_loader",
"oci::cen_sbe_chiplet_init_control",
"pnor::cen_sbe_tp_chiplet_init2_control",
"pnor::cen_sbe_tp_chiplet_init3_control",
"pnor::return_from_cen_sbe_pll_initf",
"pnor::cen_sbe_arrayinit",
"pnor::tcm_perv_func_ring",
"pnor::tcm_memn_func_ring",
"oci::set_scan_ratio",
"pnor::return_from_cen_sbe_initf",
"pnor::repair_loader_loop_sim",
"oci::tcm_mems_func_ring",
"oci::cen_sbe_pll_initf_control",
"oci::return_from_cen_sbe_pll_setup",
"oci::cen_sbe_initf_control",
"oci::cen_sbe_nest_startclocks",
"oci::tp_pll_func_ring",
"oci::tcn_refr_func_ring",
"pnor::tcm_mems_cmsk_ring",
"pnor::cen_sbe_arrayinit_control",
"pnor::tcn_mbs_cmsk_ring",
"oci::return_from_cen_sbe_nest_startclocks",
"oci::cen_repair_loader",
"pnor::cen_sbe_chiplet_init",
"pnor::tcn_refr_abst_ring",
"oci::tcn_refr_time_ring",
"pnor::return_from_cen_sbe_chiplet_init",
"oci::return_from_cen_sbe_pll_initf",
"oci::cen_sbe_arrayinit",
"pnor::tp_pll_gptr_ring",
"oci::return_from_cen_sbe_initf",
"pnor::return_from_cen_sbe_do_manual_inits",
"pnor::cen_sbe_scominits",
"oci::scan_a0_override",
"oci::cen_sbe_dts_init",
"oci::cen_sbe_nest_startclocks_control",
"oci::cen_arrayinit_module",
"oci::tp_pll_bndy_ring",
"oci::return_from_cen_sbe_dts_init",
"pnor::cen_sbe_chiplet_init_control",
"pnor::return_from_cen_sbe_arrayinit",
"oci::cen_scan0_module",
"pnor::scan_a0",
"oci::cen_sbe_arrayinit_control",
"oci::tcn_mbs_cmsk_ring",
"pnor::set_scan_ratio",
"pnor::tcm_mems_func_ring",
"pnor::cen_sbe_scominits_control",
"pnor::tcn_mbs_func_ring",
"pnor::tcn_dmi_func_ring",
"oci::cen_sbe_dts_init_control",
"pnor::callproc_epilogue",
"oci::return_from_cen_sbe_do_manual_inits",
"oci::cen_sbe_scominits",
"pnor::cen_sbe_do_manual_inits",
"pnor::cen_sbe_nest_startclocks",
};

static GlobalSymbolInfo info[146] = {
{PoreAddress(0x800b, 0x00001cd8), 'R'},
{PoreAddress(0x800b, 0x00001db8), 'R'},
{PoreAddress(0x8000, 0x000002f0), 'T'},
{PoreAddress(0x800b, 0x000005a0), 'T'},
{PoreAddress(0x800b, 0x00001d48), 'R'},
{PoreAddress(0x8000, 0x000004b0), 'T'},
{PoreAddress(0x800b, 0x00001dd8), 'R'},
{PoreAddress(0x800b, 0x00001d38), 'R'},
{PoreAddress(0x8000, 0x00001d58), 'R'},
{PoreAddress(0x800b, 0x00000270), 'R'},
{PoreAddress(0x8000, 0x00000c80), 'T'},
{PoreAddress(0x800b, 0x000005fc), 'T'},
{PoreAddress(0x8000, 0x00001c4c), 'T'},
{PoreAddress(0x800b, 0x000005dc), 'T'},
{PoreAddress(0x8000, 0x000003fc), 'T'},
{PoreAddress(0x8000, 0x00000624), 'T'},
{PoreAddress(0x8000, 0x00000a00), 'T'},
{PoreAddress(0x8000, 0x00000260), 'R'},
{PoreAddress(0x8000, 0x00001d08), 'R'},
{PoreAddress(0x8000, 0x00001cf8), 'R'},
{PoreAddress(0x800b, 0x00001c6c), 'T'},
{PoreAddress(0x8000, 0x0000030c), 'T'},
{PoreAddress(0x8000, 0x00000cd8), 'T'},
{PoreAddress(0x800b, 0x00001a40), 'T'},
{PoreAddress(0x800b, 0x000002f0), 'T'},
{PoreAddress(0x800b, 0x00000250), 'R'},
{PoreAddress(0x800b, 0x000013e8), 'T'},
{PoreAddress(0x800b, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x000003c0), 'T'},
{PoreAddress(0x800b, 0x00000b48), 'T'},
{PoreAddress(0x8000, 0x00001b20), 'T'},
{PoreAddress(0x800b, 0x00001ce8), 'R'},
{PoreAddress(0x8000, 0x00000438), 'T'},
{PoreAddress(0x800b, 0x000004ec), 'T'},
{PoreAddress(0x800b, 0x00001214), 'T'},
{PoreAddress(0x8000, 0x00001da8), 'R'},
{PoreAddress(0x800b, 0x000007f0), 'T'},
{PoreAddress(0x8000, 0x00000220), 'R'},
{PoreAddress(0x8000, 0x0000193c), 'T'},
{PoreAddress(0x8000, 0x00000268), 'R'},
{PoreAddress(0x8000, 0x00000200), 'R'},
{PoreAddress(0x8000, 0x00001d48), 'R'},
{PoreAddress(0x8000, 0x00000218), 'R'},
{PoreAddress(0x8000, 0x00001d38), 'R'},
{PoreAddress(0x8000, 0x00000270), 'R'},
{PoreAddress(0x8000, 0x00000228), 'R'},
{PoreAddress(0x8000, 0x000005fc), 'T'},
{PoreAddress(0x800b, 0x00000240), 'R'},
{PoreAddress(0x8000, 0x000005dc), 'T'},
{PoreAddress(0x800b, 0x00001d28), 'R'},
{PoreAddress(0x8000, 0x00001d98), 'R'},
{PoreAddress(0x8000, 0x00001d78), 'R'},
{PoreAddress(0x8000, 0x0000095c), 'T'},
{PoreAddress(0x800b, 0x00000210), 'R'},
{PoreAddress(0x800b, 0x000010b8), 'T'},
{PoreAddress(0x800b, 0x00001c30), 'T'},
{PoreAddress(0x8000, 0x00001a40), 'T'},
{PoreAddress(0x8000, 0x000002f0), 'T'},
{PoreAddress(0x8000, 0x00000250), 'R'},
{PoreAddress(0x800b, 0x000013ec), 'T'},
{PoreAddress(0x800b, 0x00001c90), 'T'},
{PoreAddress(0x800b, 0x000002f0), 'T'},
{PoreAddress(0x8000, 0x00001214), 'T'},
{PoreAddress(0x800b, 0x00001d58), 'R'},
{PoreAddress(0x800b, 0x00000c80), 'T'},
{PoreAddress(0x8000, 0x00001d68), 'R'},
{PoreAddress(0x800b, 0x000003fc), 'T'},
{PoreAddress(0x800b, 0x00000624), 'T'},
{PoreAddress(0x8000, 0x00000dd4), 'T'},
{PoreAddress(0x8000, 0x00001dc8), 'R'},
{PoreAddress(0x800b, 0x00000a00), 'T'},
{PoreAddress(0x800b, 0x00000208), 'R'},
{PoreAddress(0x800b, 0x0000030c), 'T'},
{PoreAddress(0x800b, 0x00000384), 'T'},
{PoreAddress(0x8000, 0x00000474), 'T'},
{PoreAddress(0x800b, 0x00000cd8), 'T'},
{PoreAddress(0x800b, 0x00000248), 'R'},
{PoreAddress(0x800b, 0x000003c0), 'T'},
{PoreAddress(0x8000, 0x00001cc8), 'R'},
{PoreAddress(0x8000, 0x00001d28), 'R'},
{PoreAddress(0x800b, 0x00000438), 'T'},
{PoreAddress(0x8000, 0x00000210), 'R'},
{PoreAddress(0x800b, 0x00001da8), 'R'},
{PoreAddress(0x8000, 0x000010b8), 'T'},
{PoreAddress(0x8000, 0x00001c30), 'T'},
{PoreAddress(0x800b, 0x00000220), 'R'},
{PoreAddress(0x8000, 0x000013ec), 'T'},
{PoreAddress(0x8000, 0x00001c90), 'T'},
{PoreAddress(0x800b, 0x00000268), 'R'},
{PoreAddress(0x800b, 0x00000200), 'R'},
{PoreAddress(0x800b, 0x000008c0), 'T'},
{PoreAddress(0x8000, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x00000218), 'R'},
{PoreAddress(0x800b, 0x00000228), 'R'},
{PoreAddress(0x800b, 0x00000348), 'T'},
{PoreAddress(0x800b, 0x00001080), 'T'},
{PoreAddress(0x800b, 0x00001d98), 'R'},
{PoreAddress(0x800b, 0x00001d78), 'R'},
{PoreAddress(0x8000, 0x00001c8c), 'T'},
{PoreAddress(0x800b, 0x00000528), 'T'},
{PoreAddress(0x800b, 0x0000095c), 'T'},
{PoreAddress(0x8000, 0x00001d88), 'R'},
{PoreAddress(0x8000, 0x00000208), 'R'},
{PoreAddress(0x8000, 0x00000384), 'T'},
{PoreAddress(0x8000, 0x00000248), 'R'},
{PoreAddress(0x8000, 0x00001940), 'T'},
{PoreAddress(0x8000, 0x00001cd8), 'R'},
{PoreAddress(0x8000, 0x00001db8), 'R'},
{PoreAddress(0x800b, 0x00001d68), 'R'},
{PoreAddress(0x800b, 0x00000238), 'R'},
{PoreAddress(0x800b, 0x00001d18), 'R'},
{PoreAddress(0x8000, 0x000005a0), 'T'},
{PoreAddress(0x8000, 0x000008c0), 'T'},
{PoreAddress(0x800b, 0x00000dd4), 'T'},
{PoreAddress(0x800b, 0x00001dc8), 'R'},
{PoreAddress(0x8000, 0x00001dd8), 'R'},
{PoreAddress(0x800b, 0x00000474), 'T'},
{PoreAddress(0x8000, 0x00000348), 'T'},
{PoreAddress(0x8000, 0x00001080), 'T'},
{PoreAddress(0x800b, 0x00001cc8), 'R'},
{PoreAddress(0x8000, 0x00000528), 'T'},
{PoreAddress(0x800b, 0x00000564), 'T'},
{PoreAddress(0x800b, 0x00001a3c), 'T'},
{PoreAddress(0x8000, 0x00001c6c), 'T'},
{PoreAddress(0x8000, 0x000013e8), 'T'},
{PoreAddress(0x8000, 0x00000258), 'R'},
{PoreAddress(0x8000, 0x00000b48), 'T'},
{PoreAddress(0x8000, 0x00001ce8), 'R'},
{PoreAddress(0x8000, 0x000004ec), 'T'},
{PoreAddress(0x800b, 0x00000230), 'R'},
{PoreAddress(0x800b, 0x000004b0), 'T'},
{PoreAddress(0x8000, 0x000007f0), 'T'},
{PoreAddress(0x800b, 0x00001c4c), 'T'},
{PoreAddress(0x8000, 0x00000238), 'R'},
{PoreAddress(0x8000, 0x00001d18), 'R'},
{PoreAddress(0x800b, 0x00001c8c), 'T'},
{PoreAddress(0x800b, 0x00001d88), 'R'},
{PoreAddress(0x800b, 0x00000260), 'R'},
{PoreAddress(0x800b, 0x00001d08), 'R'},
{PoreAddress(0x800b, 0x00001cf8), 'R'},
{PoreAddress(0x8000, 0x00000240), 'R'},
{PoreAddress(0x800b, 0x00001b20), 'T'},
{PoreAddress(0x8000, 0x00000564), 'T'},
{PoreAddress(0x8000, 0x00001a3c), 'T'},
{PoreAddress(0x800b, 0x0000193c), 'T'},
{PoreAddress(0x800b, 0x00001940), 'T'},
};

static void
init()
{
int i;
FAPI_INF("HookManager : "
         "Indexing global symbols for centaur.sbe_pnor.out");
for (i = 0; i < 146; i++) {
    HookManager::registerGlobalSymbol(symbols[i], &(info[i]));
}
}

static HookInitializer initializer(init);
