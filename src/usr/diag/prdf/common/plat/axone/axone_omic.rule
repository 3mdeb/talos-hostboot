# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/axone/axone_omic.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2018
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip axone_omic
{
    name        "AXONE OMIC target";
    targettype  TYPE_OMIC;
    sigoff      0x0000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P9 OMIC target IOOMIFIR
    ############################################################################

    register IOOMIFIR
    {
        name        "P9 OMIC target IOOMIFIR";
        scomaddr    0x07011000;
        reset       (&, 0x07011001);
        mask        (|, 0x07011005);
        capture     group default;
    };

    register IOOMIFIR_MASK
    {
        name        "P9 OMIC target IOOMIFIR MASK";
        scomaddr    0x07011003;
        capture     group default;
    };

    register IOOMIFIR_ACT0
    {
        name        "P9 OMIC target IOOMIFIR ACT0";
        scomaddr    0x07011006;
        capture     group default;
        capture     req nonzero("IOOMIFIR");
    };

    register IOOMIFIR_ACT1
    {
        name        "P9 OMIC target IOOMIFIR ACT1";
        scomaddr    0x07011007;
        capture     group default;
        capture     req nonzero("IOOMIFIR");
    };

    ############################################################################
    # P9 OMIC target MCPPEFIR
    ############################################################################

    register MCPPEFIR
    {
        name        "P9 OMIC target MCPPEFIR";
        scomaddr    0x07012440;
        reset       (&, 0x07012441);
        mask        (|, 0x07012445);
        capture     group default;
    };

    register MCPPEFIR_MASK
    {
        name        "P9 OMIC target MCPPEFIR MASK";
        scomaddr    0x07012443;
        capture     group default;
    };

    register MCPPEFIR_ACT0
    {
        name        "P9 OMIC target MCPPEFIR ACT0";
        scomaddr    0x07012446;
        capture     group default;
        capture     req nonzero("MCPPEFIR");
    };

    register MCPPEFIR_ACT1
    {
        name        "P9 OMIC target MCPPEFIR ACT1";
        scomaddr    0x07012447;
        capture     group default;
        capture     req nonzero("MCPPEFIR");
    };

    ############################################################################
    # P9 OMIC target OMIDLFIR
    ############################################################################

    register OMIDLFIR
    {
        name        "P9 OMIC target OMIDLFIR";
        scomaddr    0x07013340;
        reset       (&, 0x07013341);
        mask        (|, 0x07013345);
        capture     group default;
    };

    register OMIDLFIR_MASK
    {
        name        "P9 OMIC target OMIDLFIR MASK";
        scomaddr    0x07013343;
        capture     group default;
    };

    register OMIDLFIR_ACT0
    {
        name        "P9 OMIC target OMIDLFIR ACT0";
        scomaddr    0x07013346;
        capture     group default;
        capture     req nonzero("OMIDLFIR");
    };

    register OMIDLFIR_ACT1
    {
        name        "P9 OMIC target OMIDLFIR ACT1";
        scomaddr    0x07013347;
        capture     group default;
        capture     req nonzero("OMIDLFIR");
    };

# Include registers not defined by the xml
.include "axone_omic_regs.rule";

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for OMIC
################################################################################

rule rOMIC
{
  CHECK_STOP:
    summary( 0, rIOOMIFIR ) |
    summary( 1, rMCPPEFIR ) |
    summary( 2, rOMIDLFIR );

  RECOVERABLE:
    summary( 0, rIOOMIFIR ) |
    summary( 1, rMCPPEFIR ) |
    summary( 2, rOMIDLFIR );

  UNIT_CS:
    summary( 0, rIOOMIFIR ) |
    summary( 1, rMCPPEFIR ) |
    summary( 2, rOMIDLFIR );

  HOST_ATTN:
    summary( 0, rIOOMIFIR ) |
    summary( 1, rMCPPEFIR ) |
    summary( 2, rOMIDLFIR );

};

group gOMIC attntype CHECK_STOP, RECOVERABLE, UNIT_CS, HOST_ATTN
    filter singlebit
{
    (rOMIC, bit(0)) ? analyzeIOOMIFIR;
    (rOMIC, bit(1)) ? analyzeMCPPEFIR;
    (rOMIC, bit(2)) ? analyzeOMIDLFIR;
};

################################################################################
# P9 OMIC target IOOMIFIR
################################################################################

rule rIOOMIFIR
{
  CHECK_STOP:
    IOOMIFIR & ~IOOMIFIR_MASK & ~IOOMIFIR_ACT0 & ~IOOMIFIR_ACT1;
  RECOVERABLE:
    IOOMIFIR & ~IOOMIFIR_MASK & ~IOOMIFIR_ACT0 &  IOOMIFIR_ACT1;
  HOST_ATTN:
    IOOMIFIR & ~IOOMIFIR_MASK &  IOOMIFIR_ACT0 & ~IOOMIFIR_ACT1;
  UNIT_CS:
    IOOMIFIR & ~IOOMIFIR_MASK &  IOOMIFIR_ACT0 &  IOOMIFIR_ACT1;
};

group gIOOMIFIR
    filter singlebit,
           cs_root_cause
{
    /** IOOMIFIR[0]
     *  RX invalid state or parity error
     */
    (rIOOMIFIR, bit(0)) ? defaultMaskedError;

    /** IOOMIFIR[1]
     *  TX invalid state or parity error
     */
    (rIOOMIFIR, bit(1)) ? defaultMaskedError;

    /** IOOMIFIR[2]
     *  GCR hang error
     */
    (rIOOMIFIR, bit(2)) ? defaultMaskedError;

    /** IOOMIFIR[3:47]
     *  Unused
     */
    (rIOOMIFIR, bit(3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47)) ? defaultMaskedError;

    /** IOOMIFIR[48]
     *  SCOM FSM or FIR register parity error
     */
    (rIOOMIFIR, bit(48)) ? defaultMaskedError;

    /** IOOMIFIR[49]
     *  SCOM FSM or FIR register parity error clone
     */
    (rIOOMIFIR, bit(49)) ? defaultMaskedError;

};

################################################################################
# P9 OMIC target MCPPEFIR
################################################################################

rule rMCPPEFIR
{
  CHECK_STOP:
    MCPPEFIR & ~MCPPEFIR_MASK & ~MCPPEFIR_ACT0 & ~MCPPEFIR_ACT1;
  RECOVERABLE:
    MCPPEFIR & ~MCPPEFIR_MASK & ~MCPPEFIR_ACT0 &  MCPPEFIR_ACT1;
  HOST_ATTN:
    MCPPEFIR & ~MCPPEFIR_MASK &  MCPPEFIR_ACT0 & ~MCPPEFIR_ACT1;
  UNIT_CS:
    MCPPEFIR & ~MCPPEFIR_MASK &  MCPPEFIR_ACT0 &  MCPPEFIR_ACT1;
};

group gMCPPEFIR
    filter singlebit,
           cs_root_cause
{
    /** MCPPEFIR[0]
     *  PPE general error.
     */
    (rMCPPEFIR, bit(0)) ? defaultMaskedError;

    /** MCPPEFIR[1]
     *  PPE general error.
     */
    (rMCPPEFIR, bit(1)) ? defaultMaskedError;

    /** MCPPEFIR[2]
     *  PPE general error.
     */
    (rMCPPEFIR, bit(2)) ? defaultMaskedError;

    /** MCPPEFIR[3]
     *  PPE general error.
     */
    (rMCPPEFIR, bit(3)) ? defaultMaskedError;

    /** MCPPEFIR[4]
     *  PPE halted.
     */
    (rMCPPEFIR, bit(4)) ? defaultMaskedError;

    /** MCPPEFIR[5]
     *  PPE watchdog timer timed out
     */
    (rMCPPEFIR, bit(5)) ? defaultMaskedError;

    /** MCPPEFIR[6]
     *  MMIO data in error.
     */
    (rMCPPEFIR, bit(6)) ? defaultMaskedError;

    /** MCPPEFIR[7]
     *  Arb missed scrub tick.
     */
    (rMCPPEFIR, bit(7)) ? defaultMaskedError;

    /** MCPPEFIR[8]
     *  Arb ary ue error.
     */
    (rMCPPEFIR, bit(8)) ? defaultMaskedError;

    /** MCPPEFIR[9]
     *  Arb ary ce error.
     */
    (rMCPPEFIR, bit(9)) ? defaultMaskedError;

    /** MCPPEFIR[10]
     *  spare
     */
    (rMCPPEFIR, bit(10)) ? defaultMaskedError;

    /** MCPPEFIR[11]
     *  FIR_SCOMFIR_ERROR
     */
    (rMCPPEFIR, bit(11)) ? defaultMaskedError;

    /** MCPPEFIR[12]
     *  FIR_SCOMFIR_ERROR
     */
    (rMCPPEFIR, bit(12)) ? defaultMaskedError;

};

################################################################################
# P9 OMIC target OMIDLFIR
################################################################################

rule rOMIDLFIR
{
  CHECK_STOP:
    OMIDLFIR & ~OMIDLFIR_MASK & ~OMIDLFIR_ACT0 & ~OMIDLFIR_ACT1;
  RECOVERABLE:
    OMIDLFIR & ~OMIDLFIR_MASK & ~OMIDLFIR_ACT0 &  OMIDLFIR_ACT1;
  HOST_ATTN:
    OMIDLFIR & ~OMIDLFIR_MASK &  OMIDLFIR_ACT0 & ~OMIDLFIR_ACT1;
  UNIT_CS:
    OMIDLFIR & ~OMIDLFIR_MASK &  OMIDLFIR_ACT0 &  OMIDLFIR_ACT1;
};

group gOMIDLFIR
    filter singlebit,
           cs_root_cause
{
    /** OMIDLFIR[0]
     *  DL0 fatal error
     */
    (rOMIDLFIR, bit(0)) ? defaultMaskedError;

    /** OMIDLFIR[1]
     *  DL0 data UE
     */
    (rOMIDLFIR, bit(1)) ? defaultMaskedError;

    /** OMIDLFIR[2]
     *  DL0 flit CE
     */
    (rOMIDLFIR, bit(2)) ? defaultMaskedError;

    /** OMIDLFIR[3]
     *  DL0 CRC error
     */
    (rOMIDLFIR, bit(3)) ? defaultMaskedError;

    /** OMIDLFIR[4]
     *  DL0 nack
     */
    (rOMIDLFIR, bit(4)) ? defaultMaskedError;

    /** OMIDLFIR[5]
     *  DL0 X4 mode
     */
    (rOMIDLFIR, bit(5)) ? defaultMaskedError;

    /** OMIDLFIR[6]
     *  DL0 EDPL
     */
    (rOMIDLFIR, bit(6)) ? defaultMaskedError;

    /** OMIDLFIR[7]
     *  DL0 timeout
     */
    (rOMIDLFIR, bit(7)) ? defaultMaskedError;

    /** OMIDLFIR[8]
     *  DL0 remote retrain
     */
    (rOMIDLFIR, bit(8)) ? defaultMaskedError;

    /** OMIDLFIR[9]
     *  DL0 error retrain
     */
    (rOMIDLFIR, bit(9)) ? defaultMaskedError;

    /** OMIDLFIR[10]
     *  DL0 EDPL retrain
     */
    (rOMIDLFIR, bit(10)) ? defaultMaskedError;

    /** OMIDLFIR[11]
     *  DL0 trained
     */
    (rOMIDLFIR, bit(11)) ? defaultMaskedError;

    /** OMIDLFIR[12]
     *  DL0 endpoint bit 0
     */
    (rOMIDLFIR, bit(12)) ? defaultMaskedError;

    /** OMIDLFIR[13]
     *  DL0 endpoint bit 1
     */
    (rOMIDLFIR, bit(13)) ? defaultMaskedError;

    /** OMIDLFIR[14]
     *  DL0 endpoint bit 2
     */
    (rOMIDLFIR, bit(14)) ? defaultMaskedError;

    /** OMIDLFIR[15]
     *  DL0 endpoint bit 3
     */
    (rOMIDLFIR, bit(15)) ? defaultMaskedError;

    /** OMIDLFIR[16]
     *  DL0 endpoint bit 4
     */
    (rOMIDLFIR, bit(16)) ? defaultMaskedError;

    /** OMIDLFIR[17]
     *  DL0 endpoint bit 5
     */
    (rOMIDLFIR, bit(17)) ? defaultMaskedError;

    /** OMIDLFIR[18]
     *  DL0 endpoint bit 6
     */
    (rOMIDLFIR, bit(18)) ? defaultMaskedError;

    /** OMIDLFIR[19]
     *  DL0 endpoint bit 7
     */
    (rOMIDLFIR, bit(19)) ? defaultMaskedError;

    /** OMIDLFIR[20]
     *  DL1 fatal error
     */
    (rOMIDLFIR, bit(20)) ? defaultMaskedError;

    /** OMIDLFIR[21]
     *  DL1 data UE
     */
    (rOMIDLFIR, bit(21)) ? defaultMaskedError;

    /** OMIDLFIR[22]
     *  DL1 flit CE
     */
    (rOMIDLFIR, bit(22)) ? defaultMaskedError;

    /** OMIDLFIR[23]
     *  DL1 CRC error
     */
    (rOMIDLFIR, bit(23)) ? defaultMaskedError;

    /** OMIDLFIR[24]
     *  DL1 nack
     */
    (rOMIDLFIR, bit(24)) ? defaultMaskedError;

    /** OMIDLFIR[25]
     *  DL1 X4 mode
     */
    (rOMIDLFIR, bit(25)) ? defaultMaskedError;

    /** OMIDLFIR[26]
     *  DL1 EDPL
     */
    (rOMIDLFIR, bit(26)) ? defaultMaskedError;

    /** OMIDLFIR[27]
     *  DL1 timeout
     */
    (rOMIDLFIR, bit(27)) ? defaultMaskedError;

    /** OMIDLFIR[28]
     *  DL1 remote retrain
     */
    (rOMIDLFIR, bit(28)) ? defaultMaskedError;

    /** OMIDLFIR[29]
     *  DL1 error retrain
     */
    (rOMIDLFIR, bit(29)) ? defaultMaskedError;

    /** OMIDLFIR[30]
     *  DL1 EDPL retrain
     */
    (rOMIDLFIR, bit(30)) ? defaultMaskedError;

    /** OMIDLFIR[31]
     *  DL1 trained
     */
    (rOMIDLFIR, bit(31)) ? defaultMaskedError;

    /** OMIDLFIR[32]
     *  DL1 endpoint bit 0
     */
    (rOMIDLFIR, bit(32)) ? defaultMaskedError;

    /** OMIDLFIR[33]
     *  DL1 endpoint bit 1
     */
    (rOMIDLFIR, bit(33)) ? defaultMaskedError;

    /** OMIDLFIR[34]
     *  DL1 endpoint bit 2
     */
    (rOMIDLFIR, bit(34)) ? defaultMaskedError;

    /** OMIDLFIR[35]
     *  DL1 endpoint bit 3
     */
    (rOMIDLFIR, bit(35)) ? defaultMaskedError;

    /** OMIDLFIR[36]
     *  DL1 endpoint bit 4
     */
    (rOMIDLFIR, bit(36)) ? defaultMaskedError;

    /** OMIDLFIR[37]
     *  DL1 endpoint bit 5
     */
    (rOMIDLFIR, bit(37)) ? defaultMaskedError;

    /** OMIDLFIR[38]
     *  DL1 endpoint bit 6
     */
    (rOMIDLFIR, bit(38)) ? defaultMaskedError;

    /** OMIDLFIR[39]
     *  DL1 endpoint bit 7
     */
    (rOMIDLFIR, bit(39)) ? defaultMaskedError;

    /** OMIDLFIR[40]
     *  DL2 fatal error
     */
    (rOMIDLFIR, bit(40)) ? defaultMaskedError;

    /** OMIDLFIR[41]
     *  DL2 data UE
     */
    (rOMIDLFIR, bit(41)) ? defaultMaskedError;

    /** OMIDLFIR[42]
     *  DL2 flit CE
     */
    (rOMIDLFIR, bit(42)) ? defaultMaskedError;

    /** OMIDLFIR[43]
     *  DL2 CRC error
     */
    (rOMIDLFIR, bit(43)) ? defaultMaskedError;

    /** OMIDLFIR[44]
     *  DL2 nack
     */
    (rOMIDLFIR, bit(44)) ? defaultMaskedError;

    /** OMIDLFIR[45]
     *  DL2 X4 mode
     */
    (rOMIDLFIR, bit(45)) ? defaultMaskedError;

    /** OMIDLFIR[46]
     *  DL2 EDPL
     */
    (rOMIDLFIR, bit(46)) ? defaultMaskedError;

    /** OMIDLFIR[47]
     *  DL2 timeout
     */
    (rOMIDLFIR, bit(47)) ? defaultMaskedError;

    /** OMIDLFIR[48]
     *  DL2 remote retrain
     */
    (rOMIDLFIR, bit(48)) ? defaultMaskedError;

    /** OMIDLFIR[49]
     *  DL2 error retrain
     */
    (rOMIDLFIR, bit(49)) ? defaultMaskedError;

    /** OMIDLFIR[50]
     *  DL2 EDPL retrain
     */
    (rOMIDLFIR, bit(50)) ? defaultMaskedError;

    /** OMIDLFIR[51]
     *  DL2 trained
     */
    (rOMIDLFIR, bit(51)) ? defaultMaskedError;

    /** OMIDLFIR[52]
     *  DL2 endpoint bit 0
     */
    (rOMIDLFIR, bit(52)) ? defaultMaskedError;

    /** OMIDLFIR[53]
     *  DL2 endpoint bit 1
     */
    (rOMIDLFIR, bit(53)) ? defaultMaskedError;

    /** OMIDLFIR[54]
     *  DL2 endpoint bit 2
     */
    (rOMIDLFIR, bit(54)) ? defaultMaskedError;

    /** OMIDLFIR[55]
     *  DL2 endpoint bit 3
     */
    (rOMIDLFIR, bit(55)) ? defaultMaskedError;

    /** OMIDLFIR[56]
     *  DL2 endpoint bit 4
     */
    (rOMIDLFIR, bit(56)) ? defaultMaskedError;

    /** OMIDLFIR[57]
     *  DL2 endpoint bit 5
     */
    (rOMIDLFIR, bit(57)) ? defaultMaskedError;

    /** OMIDLFIR[58]
     *  DL2 endpoint bit 6
     */
    (rOMIDLFIR, bit(58)) ? defaultMaskedError;

    /** OMIDLFIR[59]
     *  DL2 endpoint bit 7
     */
    (rOMIDLFIR, bit(59)) ? defaultMaskedError;

    /** OMIDLFIR[60]
     *  Performance monitor wrapped
     */
    (rOMIDLFIR, bit(60)) ? defaultMaskedError;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the actions defined for this target
.include "p9_common_actions.rule";
.include "axone_omic_actions.rule";

