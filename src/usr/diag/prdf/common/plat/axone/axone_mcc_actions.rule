# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/axone/axone_mcc_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2018,2019
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

################################################################################
# Callouts
################################################################################

actionclass chnl0_omi
{
    callout(connected(TYPE_OMI,0), MRU_MED);
};

actionclass chnl1_omi
{
    callout(connected(TYPE_OMI,1), MRU_MED);
};

actionclass chnl0_omi_L
{
    callout(connected(TYPE_OMI,0), MRU_LOW);
};

actionclass chnl1_omi_L
{
    callout(connected(TYPE_OMI,1), MRU_LOW);
};

actionclass chnl0_ocmb
{
    callout(connected(TYPE_OCMB_CHIP,0), MRU_MED);
};

actionclass chnl1_ocmb
{
    callout(connected(TYPE_OCMB_CHIP,1), MRU_MED);
};

actionclass chnl0_omi_bus
{
    funccall("omiParentCalloutBusInterfacePlugin_0");
};

actionclass chnl1_omi_bus
{
    funccall("omiParentCalloutBusInterfacePlugin_1");
};

actionclass chnl0_omi_bus_th_1
{
    chnl0_omi_bus;
    threshold1;
};

actionclass chnl1_omi_bus_th_1
{
    chnl1_omi_bus;
    threshold1;
};

actionclass chnl0_omi_bus_th_32_perDay
{
    chnl0_omi_bus;
    threshold32pday;
};

actionclass chnl1_omi_bus_th_32_perDay
{
    chnl1_omi_bus;
    threshold32pday;
};

actionclass chnl0_omi_th_1
{
    chnl0_omi;
    threshold1;
};

actionclass chnl1_omi_th_1
{
    chnl1_omi;
    threshold1;
};

actionclass chnl0_ocmb_th_1
{
    chnl0_ocmb;
    threshold1;
};

actionclass chnl1_ocmb_th_1
{
    chnl1_ocmb;
    threshold1;
};

actionclass all_ocmb_and_mcc_th_1
{
    chnl0_ocmb;
    chnl1_ocmb;
    calloutSelfMed;
    threshold1;
};

actionclass chnl0_ocmb_H_omi_L_th_1
{
    chnl0_ocmb;
    chnl0_omi_L;
    threshold1;
};

actionclass chnl1_ocmb_H_omi_L_th_1
{
    chnl1_ocmb;
    chnl1_omi_L;
    threshold1;
};

actionclass threshold_and_mask_chnl0_ocmb_th_1
{
    threshold_and_mask;
    chnl0_ocmb;
    threshold1;
};

actionclass threshold_and_mask_chnl1_ocmb_th_1
{
    threshold_and_mask;
    chnl1_ocmb;
    threshold1;
};

################################################################################
# Analyze groups
################################################################################

actionclass analyzeDSTLFIR { analyze(gDSTLFIR); };
actionclass analyzeUSTLFIR { analyze(gUSTLFIR); };

################################################################################
# Analyze connected
################################################################################

actionclass analyze_ocmb_chnl0
{
    analyze(connected(TYPE_OCMB_CHIP, 0));
};

actionclass analyze_ocmb_chnl1
{
    analyze(connected(TYPE_OCMB_CHIP, 1));
};

actionclass analyze_ocmb_chnl0_UERE
{
    SueSource;
    analyze_ocmb_chnl0;
};

actionclass analyze_ocmb_chnl1_UERE
{
    SueSource;
    analyze_ocmb_chnl1;
};

