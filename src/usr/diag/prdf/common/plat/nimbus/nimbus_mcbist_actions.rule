# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/nimbus/nimbus_mcbist_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016,2019
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

/** MCBIST program complete */
actionclass mcbist_program_complete
{
    funccall("McbistCmdComplete");
};

/** MCBIST Command Address Timeout */
actionclass command_addr_timeout
{
    threshold1;
    funccall("commandAddrTimeout");
};

################################################################################
#                               NVDIMM callouts                                #
################################################################################

# Simple callouts that will avoid gard for NVDIMMs
actionclass nvdimm_self_th_1
{
    try( funccall("CheckForNvdimms"), calloutSelfMed );
    threshold1;
};

###############################################################################
# Analyze groups
###############################################################################

actionclass analyzeMC_LFIR { analyze(gMC_LFIR); };

actionclass analyzeMCBISTFIR
{
    funccall("CaptureMcaRegisters");
    analyze(gMCBISTFIR);
};

###############################################################################
# Analyze connected
###############################################################################

actionclass analyzeConnectedMCA0 { analyze(connected(TYPE_MCA, 0)); };
actionclass analyzeConnectedMCA1 { analyze(connected(TYPE_MCA, 1)); };
actionclass analyzeConnectedMCA2 { analyze(connected(TYPE_MCA, 2)); };
actionclass analyzeConnectedMCA3 { analyze(connected(TYPE_MCA, 3)); };

