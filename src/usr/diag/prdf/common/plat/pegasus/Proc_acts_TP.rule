# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/pegasus/Proc_acts_TP.rule $
#
# IBM CONFIDENTIAL
#
# COPYRIGHT International Business Machines Corp. 2012,2013
#
# p1
#
# Object Code Only (OCO) source materials
# Licensed Internal Code Source Materials
# IBM HostBoot Licensed Internal Code
#
# The source code for this program is not published or otherwise
# divested of its trade secrets, irrespective of what has been
# deposited with the U.S. Copyright Office.
#
# Origin: 30
#
# IBM_PROLOG_END_TAG

################################################################################
# TP Chiplet Registers
################################################################################

rule TpChipletFir
{
  CHECK_STOP:
     (TP_CHIPLET_CS_FIR       & `1FFFF80000000000`)  & ~TP_CHIPLET_FIR_MASK;
  RECOVERABLE:
    ((TP_CHIPLET_RE_FIR >> 2) & `1FFFF80000000000`)  & ~TP_CHIPLET_FIR_MASK;
};

group gTpChipletFir filter singlebit
{
    /** TP_CHIPLET_FIR[3]
     *  Attention from TP_LFIR
     */
    (TpChipletFir, bit(3)) ? analyze(gTpLFir);

    /** TP_CHIPLET_FIR[4]
     *  Attention from OCCFIR
     */
    (TpChipletFir, bit(4)) ? analyze(gOccFir);

    /** TP_CHIPLET_FIR[5]
     *  Attention from MCIFIR (MCS 00 Venice only)
     */
    (TpChipletFir, bit(5)) ? analyzeMcs00;

    /** TP_CHIPLET_FIR[6]
     *  Attention from MCIFIR (MCS 01 Venice only)
     */
    (TpChipletFir, bit(6)) ? analyzeMcs01;

    /** TP_CHIPLET_FIR[7]
     *  Attention from MCIFIR (MCS 10 Venice only)
     */
    (TpChipletFir, bit(7)) ? analyzeMcs10;

    /** TP_CHIPLET_FIR[8]
     *  Attention from MCIFIR (MCS 11 Venice only)
     */
    (TpChipletFir, bit(8)) ? analyzeMcs11;

    /** TP_CHIPLET_FIR[9]
     *  Attention from MCIFIR (MCS 20)
     */
    (TpChipletFir, bit(9)) ? analyzeMcs20;

    /** TP_CHIPLET_FIR[10]
     *  Attention from MCIFIR (MCS 21)
     */
    (TpChipletFir, bit(10)) ? analyzeMcs21;

    /** TP_CHIPLET_FIR[11]
     *  Attention from MCIFIR (MCS 30)
     */
    (TpChipletFir, bit(11)) ? analyzeMcs30;

    /** TP_CHIPLET_FIR[12]
     *  Attention from MCIFIR (MCS 31)
     */
    (TpChipletFir, bit(12)) ? analyzeMcs31;

    /** TP_CHIPLET_FIR[13]
     *  Attention from IOMCFIR_0 (Venice only)
     */
    (TpChipletFir, bit(13)) ? defaultMaskedError;

    /** TP_CHIPLET_FIR[14]
     *  Attention from IOMCFIR_1
     */
    (TpChipletFir, bit(14)) ? analyze(gIomcFir_1);

    /** TP_CHIPLET_FIR[15]
     *  Attention from PBAMFIR
     */
    (TpChipletFir, bit(15)) ? analyze(gPbamFir);

    /** TP_CHIPLET_FIR[16|17|18|19]
     *  CS attention from MC 0-3
     */
    (TpChipletFir, bit(16|17|18|19)) ? defaultMaskedError;

    /** TP_CHIPLET_FIR[20]
     *  Attention from PMCFIR
     */
    (TpChipletFir, bit(20)) ? analyze(gPmcFir);
};

rule TpChipletSpa
{
    SPECIAL: TP_CHIPLET_SPA & ~TP_CHIPLET_SPA_MASK;
};

group gTpChipletSpa filter singlebit
{
    /** TP_CHIPLET_SPA[0]
     *  Attention from OCCFIR
     */
    (TpChipletSpa, bit(0)) ? analyze(gOccFir);

    /** TP_CHIPLET_SPA[1]
     *  Attention from MCIFIR_00 (Venice only)
     */
    (TpChipletSpa, bit(1)) ? analyzeMcs00;

    /** TP_CHIPLET_SPA[2]
     *  Attention from MCIFIR_01 (Venice only)
     */
    (TpChipletSpa, bit(2)) ? analyzeMcs01;

    /** TP_CHIPLET_SPA[3]
     *  Attention from MCIFIR_10 (Venice only)
     */
    (TpChipletSpa, bit(3)) ? analyzeMcs10;

    /** TP_CHIPLET_SPA[4]
     *  Attention from MCIFIR_11 (Venice only)
     */
    (TpChipletSpa, bit(4)) ? analyzeMcs11;

    /** TP_CHIPLET_SPA[5]
     *  Attention from MCIFIR_20
     */
    (TpChipletSpa, bit(5)) ? analyzeMcs20;

    /** TP_CHIPLET_SPA[6]
     *  Attention from MCIFIR_21
     */
    (TpChipletSpa, bit(6)) ? analyzeMcs21;

    /** TP_CHIPLET_SPA[7]
     *  Attention from MCIFIR_30
     */
    (TpChipletSpa, bit(7)) ? analyzeMcs30;

    /** TP_CHIPLET_SPA[8]
     *  Attention from MCIFIR_31
     */
    (TpChipletSpa, bit(8)) ? analyzeMcs31;
};

################################################################################
# TP Chiplet LFIR
################################################################################

rule TpLFir
{
  CHECK_STOP:  TP_LFIR & ~TP_LFIR_MASK & ~TP_LFIR_ACT0 & ~TP_LFIR_ACT1;
  RECOVERABLE: TP_LFIR & ~TP_LFIR_MASK & ~TP_LFIR_ACT0 &  TP_LFIR_ACT1;
};

group gTpLFir filter singlebit
{
    /** TP_LFIR[0]
     *  CFIR internal parity error
     */
    (TpLFir, bit(0)) ? TBDDefaultCallout;

    /** TP_LFIR[1]
     *  Local errors from GPIO (PCB error)
     */
    (TpLFir, bit(1)) ? TBDDefaultCallout;

    /** TP_LFIR[2]
     *  Local errors from CC (PCB error)
     */
    (TpLFir, bit(2)) ? TBDDefaultCallout;

    /** TP_LFIR[3]
     *  Local errors from CC (OPCG, parity, scan collision, ...)
     */
    (TpLFir, bit(3)) ? TBDDefaultCallout;

    /** TP_LFIR[4]
     *  Local errors from PSC (PCB error)
     */
    (TpLFir, bit(4)) ? TBDDefaultCallout;

    /** TP_LFIR[5]
     *  Local errors from PSC (parity error)
     */
    (TpLFir, bit(5)) ? TBDDefaultCallout;

    /** TP_LFIR[6]
     *  Local errors from Thermal (parity error)
     */
    (TpLFir, bit(6)) ? TBDDefaultCallout;

    /** TP_LFIR[7]
     *  Local errors from Thermal (PCB error)
     */
    (TpLFir, bit(7)) ? TBDDefaultCallout;

    /** TP_LFIR[8|9]
     *  Local errors from Thermal (Trip error)
     */
    (TpLFir, bit(8|9)) ? TBDDefaultCallout;

    /** TP_LFIR[10|11]
     *  Local errors from Trace Array ( error)
     */
    (TpLFir, bit(10|11)) ? TBDDefaultCallout;

    /** TP_LFIR[19]
     *  Processor PLL error
     *
     *  These should never trigger directly themselves.
     *  Should be handled by global PRD PLL code.
     */
    (TpLFir, bit(19)) ? threshold32pday;

};

################################################################################
# TP Chiplet OCCFIR
################################################################################

rule OccFir
{
    CHECK_STOP:  OCCFIR & ~OCCFIR_MASK & ~OCCFIR_ACT0 & ~OCCFIR_ACT1;
    RECOVERABLE: OCCFIR & ~OCCFIR_MASK & ~OCCFIR_ACT0 &  OCCFIR_ACT1;
    SPECIAL:     OCCFIR & ~OCCFIR_MASK &  OCCFIR_ACT0 & ~OCCFIR_ACT1;
};

group gOccFir filter singlebit
{
    /** OCCFIR[0]
     *  OCC_SCOM_OCCFIR_OCC_FW0
     */
    (OccFir, bit(0)) ? TBDDefaultCallout;

    /** OCCFIR[1]
     *  OCC_SCOM_OCCFIR_OCC_FW1
     */
    (OccFir, bit(1)) ? TBDDefaultCallout;

    /** OCCFIR[2]
     *  OCC_SCOM_OCCFIR_OCC_FW2
     */
    (OccFir, bit(2)) ? TBDDefaultCallout;

    /** OCCFIR[3]
     *  OCC_SCOM_OCCFIR_OCC_FW3
     */
    (OccFir, bit(3)) ? TBDDefaultCallout;

    /** OCCFIR[4]
     *  OCC_SCOM_OCCFIR_PMC_PORE_SW_MALF
     */
    (OccFir, bit(4)) ? TBDDefaultCallout;

    /** OCCFIR[5]
     *  OCC_SCOM_OCCFIR_PMC_OCC_HB_MALF
     */
    (OccFir, bit(5)) ? TBDDefaultCallout;

    /** OCCFIR[6]
     *  OCC_SCOM_OCCFIR_PORE_GPE0_FATAL_ERR
     */
    (OccFir, bit(6)) ? TBDDefaultCallout;

    /** OCCFIR[7]
     *  OCC_SCOM_OCCFIR_PORE_GPE1_FATAL_ERR
     */
    (OccFir, bit(7)) ? TBDDefaultCallout;

    /** OCCFIR[8]
     *  OCC_SCOM_OCCFIR_OCB_ERROR
     */
    (OccFir, bit(8)) ? TBDDefaultCallout;

    /** OCCFIR[9]
     *  OCC_SCOM_OCCFIR_SRT_UE
     */
    (OccFir, bit(9)) ? TBDDefaultCallout;

    /** OCCFIR[10]
     *  OCC_SCOM_OCCFIR_SRT_CE
     */
    (OccFir, bit(10)) ? TBDDefaultCallout;

    /** OCCFIR[11]
     *  OCC_SCOM_OCCFIR_SRT_READ_ERROR
     */
    (OccFir, bit(11)) ? TBDDefaultCallout;

    /** OCCFIR[12]
     *  OCC_SCOM_OCCFIR_SRT_WRITE_ERROR
     */
    (OccFir, bit(12)) ? TBDDefaultCallout;

    /** OCCFIR[13]
     *  OCC_SCOM_OCCFIR_SRT_DATAOUT_PERR
     */
    (OccFir, bit(13)) ? TBDDefaultCallout;

    /** OCCFIR[14]
     *  OCC_SCOM_OCCFIR_SRT_OCI_WRITE_DATA_PARITY
     */
    (OccFir, bit(14)) ? TBDDefaultCallout;

    /** OCCFIR[15]
     *  OCC_SCOM_OCCFIR_SRT_OCI_BE_PARITY_ER
     */
    (OccFir, bit(15)) ? TBDDefaultCallout;

    /** OCCFIR[16]
     *  OCC_SCOM_OCCFIR_SRT_OCI_ADDR_PARITY_ERR
     */
    (OccFir, bit(16)) ? TBDDefaultCallout;

    /** OCCFIR[17]
     *  OCC_SCOM_OCCFIR_PORE_SW_ERROR_ERR
     */
    (OccFir, bit(17)) ? TBDDefaultCallout;

    /** OCCFIR[18]
     *OCC_SCOM_OCCFIR_PORE_GPE0_ERROR_ERR
     */
    (OccFir, bit(18)) ? TBDDefaultCallout;

    /** OCCFIR[19]
     *  OCC_SCOM_OCCFIR_PORE_GPE1_ERROR_ERR
     */
    (OccFir, bit(19)) ? TBDDefaultCallout;

    /** OCCFIR[20]
     *  OCC_SCOM_OCCFIR_EXTERNAL_TRAP
     */
    (OccFir, bit(20)) ? TBDDefaultCallout;

    /** OCCFIR[21]
     *  OCC_SCOM_OCCFIR_PPC405_CORE_RESET
     */
    (OccFir, bit(21)) ? TBDDefaultCallout;

    /** OCCFIR[22]
     *  OCC_SCOM_OCCFIR_PPC405_CHIP_RESET
     */
    (OccFir, bit(22)) ? TBDDefaultCallout;

    /** OCCFIR[23]
     *  OCC_SCOM_OCCFIR_PPC405_SYSTEM_RESET
     */
    (OccFir, bit(23)) ? TBDDefaultCallout;

    /** OCCFIR[24]
     *OCC_SCOM_OCCFIR_PPC405_DBGMSRWE
     */
    (OccFir, bit(24)) ? TBDDefaultCallout;

    /** OCCFIR[25]
     *  OCC_SCOM_OCCFIR_PPC405_DBGSTOPACK
     */
    (OccFir, bit(25)) ? TBDDefaultCallout;

    /** OCCFIR[26]
     *  OCC_SCOM_OCCFIR_OCB_DB_OCI_TIMEOUT
     */
    (OccFir, bit(26)) ? TBDDefaultCallout;

    /** OCCFIR[27]
     *  OCC_SCOM_OCCFIR_OCB_DB_OCI_READ_DATA_PARITY
     */
    (OccFir, bit(27)) ? TBDDefaultCallout;

    /** OCCFIR[28]
     *  OCC_SCOM_OCCFIR_OCB_DB_OCI_SLAVE_ERROR
     */
    (OccFir, bit(28)) ? TBDDefaultCallout;

    /** OCCFIR[29]
     *  OCC_SCOM_OCCFIR_OCB_PIB_ADDR_PARITY_ERR
     */
    (OccFir, bit(29)) ? TBDDefaultCallout;

    /** OCCFIR[30]
     *  OCC_SCOM_OCCFIR_OCB_DB_PIB_DATA_PARITY_ERR
     */
    (OccFir, bit(30)) ? TBDDefaultCallout;

    /** OCCFIR[31]
     *  OCC_SCOM_OCCFIR_OCB_IDC0_ERROR
     */
    (OccFir, bit(31)) ? TBDDefaultCallout;

    /** OCCFIR[32]
     *  OCC_SCOM_OCCFIR_OCB_IDC1_ERROR
     */
    (OccFir, bit(32)) ? TBDDefaultCallout;

    /** OCCFIR[33]
     *  OCC_SCOM_OCCFIR_OCB_IDC2_ERROR
     */
    (OccFir, bit(33)) ? TBDDefaultCallout;

    /** OCCFIR[34]
     *  OCC_SCOM_OCCFIR_OCB_IDC3_ERROR
     */
    (OccFir, bit(34)) ? TBDDefaultCallout;

    /** OCCFIR[35]
     *  OCC_SCOM_OCCFIR_SRT_FSM_ERR
     */
    (OccFir, bit(35)) ? TBDDefaultCallout;

    /** OCCFIR[36]
     *  OCC_SCOM_OCCFIR_JTAGACC_ERR
     */
    (OccFir, bit(36)) ? TBDDefaultCallout;

    /** OCCFIR[37]
     *  OCC_SCOM_OCCFIR_OCB_DW_ERR
     */
    (OccFir, bit(37)) ? TBDDefaultCallout;

    /** OCCFIR[38]
     *  OCC_SCOM_OCCFIR_C405_ECC_UE
     */
    (OccFir, bit(38)) ? TBDDefaultCallout;

    /** OCCFIR[39]
     *  OCC_SCOM_OCCFIR_C405_ECC_CE
     */
    (OccFir, bit(39)) ? TBDDefaultCallout;

    /** OCCFIR[40]
     *  OCC_SCOM_OCCFIR_C405_OCI_MACHINECHECK
     */
    (OccFir, bit(40)) ? TBDDefaultCallout;

    /** OCCFIR[41]
     *  OCC_SCOM_OCCFIR_SRAM_SPARE_DIRECT_ERROR0
     */
    (OccFir, bit(41)) ? TBDDefaultCallout;

    /** OCCFIR[42]
     *  OCC_SCOM_OCCFIR_SRAM_SPARE_DIRECT_ERROR1
     */
    (OccFir, bit(42)) ? TBDDefaultCallout;

    /** OCCFIR[43]
     *  OCC_SCOM_OCCFIR_SRAM_SPARE_DIRECT_ERROR2
     */
    (OccFir, bit(43)) ? TBDDefaultCallout;

    /** OCCFIR[44]
     *  OCC_SCOM_OCCFIR_SRAM_SPARE_DIRECT_ERROR3
     */
    (OccFir, bit(44)) ? TBDDefaultCallout;

    /** OCCFIR[45]
     *  OCC_SCOM_OCCFIR_SLW_OCISLV_ERR
     */
    (OccFir, bit(45)) ? TBDDefaultCallout;

    /** OCCFIR[46]
     *  OCC_SCOM_OCCFIR_GPE_OCISLV_ERR
     */
    (OccFir, bit(46)) ? TBDDefaultCallout;

    /** OCCFIR[47]
     *  OCC_SCOM_OCCFIR_OCB_OCISLV_ERR
     */
    (OccFir, bit(47)) ? TBDDefaultCallout;

    /** OCCFIR[48]
     *  OCC_SCOM_OCCFIR_C405ICU_M_TIMEOUT
     */
    (OccFir, bit(48)) ? TBDDefaultCallout;

    /** OCCFIR[49]
     *  OCC_SCOM_OCCFIR_C405DCU_M_TIMEOUT
     */
    (OccFir, bit(49)) ? TBDDefaultCallout;

    /** OCCFIR[62|63]
     *  OCC_SCOM_OCCFIR_FIR_PARITY_ERR_DUP
     */
    (OccFir, bit(62|63)) ? TBDDefaultCallout;
};

################################################################################
# TP Chiplet PBAMFIR
################################################################################

rule PbamFir
{
    CHECK_STOP:  PBAMFIR & ~PBAMFIR_MASK & ~PBAMFIR_ACT0 & ~PBAMFIR_ACT1;
    RECOVERABLE: PBAMFIR & ~PBAMFIR_MASK & ~PBAMFIR_ACT0 &  PBAMFIR_ACT1;
};

group gPbamFir filter singlebit
{
    /** PBAMFIR[0]
     *  INVALID_TRANSFER_SIZE
     */
    (PbamFir, bit(0)) ? TBDDefaultCallout;

    /** PBAMFIR[1]
     *  INVALID_COMMAND
     */
    (PbamFir, bit(1)) ? TBDDefaultCallout;

    /** PBAMFIR[2]
     *  INVALID_ADDRESS_ALIGNMENT
     */
    (PbamFir, bit(2)) ? TBDDefaultCallout;

    /** PBAMFIR[3]
     *  OPB_ERROR
     */
    (PbamFir, bit(3)) ? TBDDefaultCallout;

    /** PBAMFIR[4]
     *  OPB_TIMEOUT
     */
    (PbamFir, bit(4)) ? TBDDefaultCallout;

    /** PBAMFIR[5]
     *  OPB_MASTER_HANG_TIMEOUT
     */
    (PbamFir, bit(5)) ? TBDDefaultCallout;

    /** PBAMFIR[6]
     *  CMD_BUFFER_PAR_ERR
     */
    (PbamFir, bit(6)) ? TBDDefaultCallout;

    /** PBAMFIR[7]
     *  DAT_BUFFER_PAR_ERR
     */
    (PbamFir, bit(7)) ? TBDDefaultCallout;

    /** PBAMFIR[10]
     *  FIR_PARITY_ERR2
     */
    (PbamFir, bit(10)) ? TBDDefaultCallout;

    /** PBAMFIR[11]
     *  FIR_PARITY_ERR
     */
    (PbamFir, bit(11)) ? TBDDefaultCallout;
};

################################################################################
# TP Chiplet PMCFIR
################################################################################

rule PmcFir
{
    CHECK_STOP:  PMCFIR & ~PMCFIR_MASK & ~PMCFIR_ACT0 & ~PMCFIR_ACT1;
    RECOVERABLE: PMCFIR & ~PMCFIR_MASK & ~PMCFIR_ACT0 &  PMCFIR_ACT1;
};

group gPmcFir filter singlebit
{
    /** PMCFIR[0]
     *  LFIR_PSTATE_OCI_MASTER_RDERR
     */
    (PmcFir, bit(0)) ? TBDDefaultCallout;

    /** PMCFIR[1]
     *  LFIR_PSTATE_OCI_MASTER_RDDATA_PARITY_ERR
     */
    (PmcFir, bit(1)) ? TBDDefaultCallout;

    /** PMCFIR[2]
     *  LFIR_PSTATE_GPST_CHECKBYTE_ERR
     */
    (PmcFir, bit(2)) ? TBDDefaultCallout;

    /** PMCFIR[3]
     *  LFIR_PSTATE_GACK_TO_ERR
     */
    (PmcFir, bit(3)) ? TBDDefaultCallout;

    /** PMCFIR[4]
     *  LFIR_PSTATE_PIB_MASTER_NONOFFLINE_ERR
     */
    (PmcFir, bit(4)) ? TBDDefaultCallout;

    /** PMCFIR[5]
     *  LFIR_PSTATE_PIB_MASTER_OFFLINE_ERR
     */
    (PmcFir, bit(5)) ? TBDDefaultCallout;

    /** PMCFIR[6]
     *  LFIR_PSTATE_OCI_MASTER_TO_ERR
     */
    (PmcFir, bit(6)) ? TBDDefaultCallout;

    /** PMCFIR[7]
     *  LFIR_PSTATE_INTERCHIP_UE_ERR
     */
    (PmcFir, bit(7)) ? TBDDefaultCallout;

    /** PMCFIR[8]
     *  LFIR_PSTATE_INTERCHIP_ERRORFRAME_ERR
     */
    (PmcFir, bit(8)) ? TBDDefaultCallout;

    /** PMCFIR[9]
     *  LFIR_PSTATE_MS_FSM_ERR
     */
    (PmcFir, bit(9)) ? TBDDefaultCallout;

    /** PMCFIR[10]
     *  LFIR_MS_COMP_PARITY_ERR
     */
    (PmcFir, bit(10)) ? TBDDefaultCallout;

    /** PMCFIR[11]
     *  LFIR_IDLE_PORESW_FATAL_ERR
     */
    (PmcFir, bit(11)) ? TBDDefaultCallout;

    /** PMCFIR[12]
     *  LFIR_IDLE_PORESW_STATUS_RC_ERR
     */
    (PmcFir, bit(12)) ? TBDDefaultCallout;

    /** PMCFIR[13]
     *  LFIR_IDLE_PORESW_STATUS_VALUE_ERR
     */
    (PmcFir, bit(13)) ? TBDDefaultCallout;

    /** PMCFIR[14]
     *  LFIR_IDLE_PORESW_WRITE_WHILE_INACTIVE_ERR
     */
    (PmcFir, bit(14)) ? TBDDefaultCallout;

    /** PMCFIR[15]
     *  LFIR_IDLE_PORESW_TIMEOUT_ERR
     */
    (PmcFir, bit(15)) ? TBDDefaultCallout;

    /** PMCFIR[16]
     *  LFIR_IDLE_OCI_MASTER_WRITE_TIMEOUT_ERR
     */
    (PmcFir, bit(16)) ? TBDDefaultCallout;

    /** PMCFIR[17]
     *  LFIR_IDLE_INTERNAL_ERR
     */
    (PmcFir, bit(17)) ? TBDDefaultCallout;

    /** PMCFIR[18]
     *  LFIR_INT_COMP_PARITY_ERR
     */
    (PmcFir, bit(18)) ? TBDDefaultCallout;

    /** PMCFIR[19]
     *  LFIR_PMC_OCC_HEARTBEAT_TIMEOUT
     */
    (PmcFir, bit(19)) ? TBDDefaultCallout;

    /** PMCFIR[20]
     *  LFIR_SPIVID_CRC_ERROR0
     */
    (PmcFir, bit(20)) ? TBDDefaultCallout;

    /** PMCFIR[21]
     *  LFIR_SPIVID_CRC_ERROR1
     */
    (PmcFir, bit(21)) ? TBDDefaultCallout;

    /** PMCFIR[22]
     *  LFIR_SPIVID_CRC_ERROR2
     */
    (PmcFir, bit(22)) ? TBDDefaultCallout;

    /** PMCFIR[23]
     *  LFIR_SPIVID_RETRY_TIMEOUT
     */
    (PmcFir, bit(23)) ? TBDDefaultCallout;

    /** PMCFIR[24]
     *  LFIR_SPIVID_FSM_ERR
     */
    (PmcFir, bit(24)) ? TBDDefaultCallout;

    /** PMCFIR[25]
     *  LFIR_SPIVID_MAJORITY_DETECTED_A_MINORITY
     */
    (PmcFir, bit(25)) ? TBDDefaultCallout;

    /** PMCFIR[26]
     *  LFIR_O2S_CRC_ERROR0
     */
    (PmcFir, bit(26)) ? TBDDefaultCallout;

    /** PMCFIR[27]
     *  LFIR_O2S_CRC_ERROR1
     */
    (PmcFir, bit(27)) ? TBDDefaultCallout;

    /** PMCFIR[28]
     *LFIR_O2S_CRC_ERROR1
     */
    (PmcFir, bit(28)) ? TBDDefaultCallout;

    /** PMCFIR[29]
     *  LFIR_O2S_RETRY_TIMEOUT
     */
    (PmcFir, bit(29)) ? TBDDefaultCallout;

    /** PMCFIR[30]
     *  LFIR_O2S_WRITE_WHILE_BRIDGE_BUSY_ERR
     */
    (PmcFir, bit(30)) ? TBDDefaultCallout;

    /** PMCFIR[31]
     *  LFIR_O2S_FSM_ERR
     */
    (PmcFir, bit(31)) ? TBDDefaultCallout;

    /** PMCFIR[32]
     *  LFIR_O2S_MAJORITY_DETECTED_A_MINORITY
     */
    (PmcFir, bit(32)) ? TBDDefaultCallout;

    /** PMCFIR[33]
     *  LFIR_O2P_WRITE_WHILE_BRIDGE_BUSY_ERR
     */
    (PmcFir, bit(33)) ? TBDDefaultCallout;

    /** PMCFIR[34]
     *  LFIR_O2P_FSM_ERR
     */
    (PmcFir, bit(34)) ? TBDDefaultCallout;

    /** PMCFIR[35]
     *  LFIR_OCI_SLAVE_ERR
     */
    (PmcFir, bit(35)) ? TBDDefaultCallout;

    /** PMCFIR[36]
     *  LFIR_IF_COMP_PARITY_ERROR
     */
    (PmcFir, bit(36)) ? TBDDefaultCallout;

    /** PMCFIR[47|48]
     *  FIR_PARITY_ERR
     */
    (PmcFir, bit(47|48)) ? TBDDefaultCallout;
};

################################################################################
# Actions specific to TP chiplet
################################################################################

/** Analyze connected MCS 00 */
actionclass analyzeMcs00
{
    analyze(connected(TYPE_MCS, 0));
    funccall("MaskMCS00IfCentaurCheckstop");
};

/** Analyze connected MCS 01 */
actionclass analyzeMcs01
{
    analyze(connected(TYPE_MCS, 1));
    funccall("MaskMCS01IfCentaurCheckstop");
};

/** Analyze connected MCS 10 */
actionclass analyzeMcs10
{
    analyze(connected(TYPE_MCS, 2));
    funccall("MaskMCS10IfCentaurCheckstop");
};

/** Analyze connected MCS 11 */
actionclass analyzeMcs11
{
    analyze(connected(TYPE_MCS, 3));
    funccall("MaskMCS11IfCentaurCheckstop");
};

/** Analyze connected MCS 20 */
actionclass analyzeMcs20
{
    analyze(connected(TYPE_MCS, 4));
    funccall("MaskMCS20IfCentaurCheckstop");
};

/** Analyze connected MCS 21 */
actionclass analyzeMcs21
{
    analyze(connected(TYPE_MCS, 5));
    funccall("MaskMCS21IfCentaurCheckstop");
};

/** Analyze connected MCS 30 */
actionclass analyzeMcs30
{
    analyze(connected(TYPE_MCS, 6));
    funccall("MaskMCS30IfCentaurCheckstop");
};

/** Analyze connected MCS 31 */
actionclass analyzeMcs31
{
    analyze(connected(TYPE_MCS, 7));
    funccall("MaskMCS31IfCentaurCheckstop");
};
