# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/pegasus/Membuf_acts_NEST.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2012,2018
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

################################################################################
# Actions specific to NEST chiplet
################################################################################

/** Callout the DMI bus */
actionclass calloutDmiBus
{
    calloutSelfMedA;
    callout(connected(TYPE_MCS), MRU_MEDA);
    funccall("calloutInterface_dmi");
};

/** Handles MCS Chnl XSTOP if present otherwise handles MBIFIR Replay Timeout */
actionclass replayTimeOutError
{
    try( funccall("handleMcsChnlCs"), clearSecMbsBitsCalloutDmiBusTh1UE );
};

/** Handles MBACAL parity err if present, else handles MBS Internal Timeout */
actionclass internalTimeout
{
    threshold1;
    funccall("internalTimeout"); # must be called last so rc is passed on
};

/** Handles MBACAL parity err if present, else handles MBA0 MBSECC Memory UE */
actionclass mba0MemoryUe
{
    try ( funccall("handleSingleMbaCalParityErr0"), analyzeFetchUe0 );
};

/** Handles MBACAL parity err if present, else handles MBA1 MBSECC Memory UE */
actionclass mba1MemoryUe
{
    try ( funccall("handleSingleMbaCalParityErr1"), analyzeFetchUe1 );
};

/** Clear MBS SecondaryBits and calloutDmiBusTh1UE */
actionclass clearSecMbsBitsCalloutDmiBusTh1UE
{
    funccall("ClearMbsSecondaryBits");
    calloutDmiBusTh1UE;
};

/** Callout the DMI bus, threshold 1 */
actionclass calloutDmiBusTh1UE
{
    calloutDmiBusTh1;
    SUEGenerationPoint;
};

/** Callout the DMI bus, threshold 1 */
actionclass calloutDmiBusTh1 { calloutDmiBus; threshold1; };

/** Callout the DMI bus, threshold 2 per day */
actionclass calloutDmiBusTh2pday { calloutDmiBus; threshold2pday; };

/** If no sparebit is set, execute calloutDmiBusTh2pday*/
actionclass analyzeSpareBitAndThr
{
    try( funccall("checkSpareBit"), calloutDmiBusTh2pday );
};

/** Lane Repair: spare deployed */
actionclass spareDeployed
{ calloutDmiBus; funccall("spareDeployed"); };

/** Lane Repair: max spares exceeded */
actionclass maxSparesExceeded
{ calloutDmiBusTh1; funccall("maxSparesExceeded"); };

/** Analyze a fetch MPE on MBA0 rank 0 */
actionclass analyzeFetchMpe0_0 { funccall("AnalyzeFetchMpe0_0"); };

/** Analyze a fetch MPE on MBA1 rank 0 */
actionclass analyzeFetchMpe1_0 { funccall("AnalyzeFetchMpe1_0"); };

/** Analyze a fetch MPE on MBA0 rank 1 */
actionclass analyzeFetchMpe0_1 { funccall("AnalyzeFetchMpe0_1"); };

/** Analyze a fetch MPE on MBA1 rank 1 */
actionclass analyzeFetchMpe1_1 { funccall("AnalyzeFetchMpe1_1"); };

/** Analyze a fetch MPE on MBA0 rank 2 */
actionclass analyzeFetchMpe0_2 { funccall("AnalyzeFetchMpe0_2"); };

/** Analyze a fetch MPE on MBA1 rank 2 */
actionclass analyzeFetchMpe1_2 { funccall("AnalyzeFetchMpe1_2"); };

/** Analyze a fetch MPE on MBA0 rank 3 */
actionclass analyzeFetchMpe0_3 { funccall("AnalyzeFetchMpe0_3"); };

/** Analyze a fetch MPE on MBA1 rank 3 */
actionclass analyzeFetchMpe1_3 { funccall("AnalyzeFetchMpe1_3"); };

/** Analyze a fetch MPE on MBA0 rank 4 */
actionclass analyzeFetchMpe0_4 { funccall("AnalyzeFetchMpe0_4"); };

/** Analyze a fetch MPE on MBA1 rank 4 */
actionclass analyzeFetchMpe1_4 { funccall("AnalyzeFetchMpe1_4"); };

/** Analyze a fetch MPE on MBA0 rank 5 */
actionclass analyzeFetchMpe0_5 { funccall("AnalyzeFetchMpe0_5"); };

/** Analyze a fetch MPE on MBA1 rank 5 */
actionclass analyzeFetchMpe1_5 { funccall("AnalyzeFetchMpe1_5"); };

/** Analyze a fetch MPE on MBA0 rank 6 */
actionclass analyzeFetchMpe0_6 { funccall("AnalyzeFetchMpe0_6"); };

/** Analyze a fetch MPE on MBA1 rank 6 */
actionclass analyzeFetchMpe1_6 { funccall("AnalyzeFetchMpe1_6"); };

/** Analyze a fetch MPE on MBA0 rank 7 */
actionclass analyzeFetchMpe0_7 { funccall("AnalyzeFetchMpe0_7"); };

/** Analyze a fetch MPE on MBA1 rank 7 */
actionclass analyzeFetchMpe1_7 { funccall("AnalyzeFetchMpe1_7"); };

/** Analyze a fetch NCE on MBA0 */
actionclass analyzeFetchNce0 { funccall("AnalyzeFetchNce0"); };

/** Analyze a fetch NCE on MBA1 */
actionclass analyzeFetchNce1 { funccall("AnalyzeFetchNce1"); };

/** Analyze a fetch RCE on MBA0 */
actionclass analyzeFetchRce0 { funccall("AnalyzeFetchRce0"); };

/** Analyze a fetch RCE on MBA1 */
actionclass analyzeFetchRce1 { funccall("AnalyzeFetchRce1"); };

/** Analyze a PreFetch Ue on MBA0 */
actionclass analyzeFetchPreUe0 { funccall("AnalyzeFetchPreUe0"); };

/** Analyze a PreFetch Ue on MBA1 */
actionclass analyzeFetchPreUe1 { funccall("AnalyzeFetchPreUe1"); };

/** Analyze a fetch UE on MBA0 */
actionclass analyzeFetchUe0
{
    funccall("AnalyzeFetchUe0");
    threshold( field(33 / 30 min ) );
    SUEGenerationPoint;
};

/** Analyze a fetch UE on MBA1 */
actionclass analyzeFetchUe1
{
    funccall("AnalyzeFetchUe1");
    threshold( field(33 / 30 min ) );
    SUEGenerationPoint;
};

