# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/pegasus/Membuf_acts_NEST.rule $
#
# IBM CONFIDENTIAL
#
# COPYRIGHT International Business Machines Corp. 2012,2013
#
# p1
#
# Object Code Only (OCO) source materials
# Licensed Internal Code Source Materials
# IBM HostBoot Licensed Internal Code
#
# The source code for this program is not published or otherwise
# divested of its trade secrets, irrespective of what has been
# deposited with the U.S. Copyright Office.
#
# Origin: 30
#
# IBM_PROLOG_END_TAG

################################################################################
# NEST Chiplet Registers
################################################################################

rule NestChipletFir
{
  CHECK_STOP:
     (NEST_CHIPLET_CS_FIR       & `17fe000000000000`) & ~NEST_CHIPLET_FIR_MASK;
  UNIT_CS:
     (NEST_CHIPLET_CS_FIR       & `17fe000000000000`) & ~NEST_CHIPLET_FIR_MASK;
  RECOVERABLE:
    ((NEST_CHIPLET_RE_FIR >> 2) & `17fc000000000000`) & ~NEST_CHIPLET_FIR_MASK;
};

group gNestChipletFir filter singlebit
{
    /** NEST_CHIPLET_FIR[3]
     *  Attention from LFIR
     */
    (NestChipletFir, bit(3)) ? analyze(gNestLFir);

    /** NEST_CHIPLET_FIR[5]
     *  Attention from DMIFIR
     */
    (NestChipletFir, bit(5)) ? analyze(gDmiFir);

    /** NEST_CHIPLET_FIR[6]
     *  Attention from MBIFIR
     */
    (NestChipletFir, bit(6)) ? analyze(gMbiFir);

    /** NEST_CHIPLET_FIR[7]
     *  Attention from MBSFIR
     */
    (NestChipletFir, bit(7)) ? analyze(gMbsFir);

    /** NEST_CHIPLET_FIR[8|9]
     *  Attention from MCBISTFIRs
     */
    (NestChipletFir, bit(8|9)) ? analyze(gMcbistFir);

    /** NEST_CHIPLET_FIR[10|11]
     *  Attention from MBSECCFIRs
     */
    (NestChipletFir, bit(10|11)) ? analyze(gMbsEccFir);

    /** NEST_CHIPLET_FIR[12]
     *  Attention from NESTFBISTFIR
     */
    (NestChipletFir, bit(12))? defaultMaskedError;

    /** NEST_CHIPLET_FIR[13]
     *  Attention from SCACFIR
     */
    (NestChipletFir, bit(13)) ? analyze(gScacFir);

    /** NEST_CHIPLET_FIR[14]
     *  Attention from MBS secure FIR
     */
    (NestChipletFir, bit(14))? analyze(gMbsSecureFir); # Checkstop only
};

################################################################################
# NEST Chiplet LFIR
################################################################################
# RAS spreadsheet: p8dd1_mss_FFDC_37_ reviewd.xls

rule NestLFir
{
  CHECK_STOP:  NEST_LFIR & ~NEST_LFIR_MASK & ~NEST_LFIR_ACT0 & ~NEST_LFIR_ACT1;
  UNIT_CS:     NEST_LFIR & ~NEST_LFIR_MASK & ~NEST_LFIR_ACT0 & ~NEST_LFIR_ACT1;
  RECOVERABLE: NEST_LFIR & ~NEST_LFIR_MASK & ~NEST_LFIR_ACT0 &  NEST_LFIR_ACT1;
};

group gNestLFir filter singlebit
{
    /** NEST_LFIR[0]
     *  CFIR internal parity error
     */
    #TODO via RTC 23125
    # bit is not defined in RAS spreadsheet
    (NestLFir, bit(0)) ? TBDDefaultCallout;

    /** NEST_LFIR[1]
     *  Local errors from GPIO (PCB error)
     */
    (NestLFir, bit(1)) ? defaultMaskedError;

    /** NEST_LFIR[2]
     *  Local errors from CC (PCB error)
     */
    (NestLFir, bit(2)) ? defaultMaskedError;

    /** NEST_LFIR[3]
     *  Local errors from CC (OPCG, parity, scan collision, ...)
     */
    (NestLFir, bit(3)) ? SelfMedThr1;

    /** NEST_LFIR[4]
     *  Local errors from PSC (PCB error)
     */
    (NestLFir, bit(4)) ? defaultMaskedError;

    /** NEST_LFIR[5]
     *  Local errors from PSC (parity error)
     */
    (NestLFir, bit(5)) ? defaultMaskedError;

    #TODO via RTC 23125
    # bit is defined in RAS spreadsheet but some question are present there.
    /** NEST_LFIR[6]
     *  Local errors from Thermal (parity error)
     */
    (NestLFir, bit(6)) ? SelfMedThr1;

    #TODO via RTC 23125
    # bit is defined in RAS spreadsheet but some question are present there.
    /** NEST_LFIR[7]
     *  Local errors from Thermal (PCB error)
     */
    (NestLFir, bit(7)) ? SelfMedThr1;

    /** NEST_LFIR[8:10]
     *  Local errors from Thermal (Trip error)
     */
    (NestLFir, bit(8|9|10)) ? defaultMaskedError;

    /** NEST_LFIR[11:12]
     *  Local errors from Trace Array ( error)
     */
    (NestLFir, bit(11|12)) ? defaultMaskedError;

    /** NEST_LFIR[40]
     *  Malfunction alert
     */
    (NestLFir, bit(40)) ? defaultMaskedError;
};

################################################################################
#  NEST Chiplet DMIFIR
################################################################################

rule DmiFir
{
    CHECK_STOP:  DMIFIR & ~DMIFIR_MASK & ~DMIFIR_ACT0 & ~DMIFIR_ACT1;
    UNIT_CS:     DMIFIR & ~DMIFIR_MASK & ~DMIFIR_ACT0 & ~DMIFIR_ACT1;
    RECOVERABLE: DMIFIR & ~DMIFIR_MASK & ~DMIFIR_ACT0 &  DMIFIR_ACT1;
};

group gDmiFir filter singlebit
{
    /** DMIFIR[0]
     *  FIR_RX_INVALID_STATE_OR_PARITY_ERROR
     */
    (DmiFir, bit(0)) ? TBDDefaultCallout;

    /** DMIFIR[1]
     *  FIR_TX_INVALID_STATE_OR_PARITY_ERROR
     */
    (DmiFir, bit(1)) ? TBDDefaultCallout;

    /** DMIFIR[2]
     *  FIR_GCR_HANG_ERROR
     */
    (DmiFir, bit(2)) ? TBDDefaultCallout;

    /** DMIFIR[8]
     *  FIR_RX_BUS0_TRAINING_ERROR
     */
    (DmiFir, bit(8)) ? TBDDefaultCallout;

    /** DMIFIR[9]
     *  FIR_RX_BUS0_SPARE_DEPLOYED
     */
    (DmiFir, bit(9)) ? bus0SpareDeployed;

    /** DMIFIR[10]
     *  FIR_RX_BUS0_MAX_SPARES_EXCEEDED
     */
    (DmiFir, bit(10)) ? bus0MaxSparesExceeded;

    /** DMIFIR[11]
     *  FIR_RX_BUS0_RECAL_OR_DYN_REPAIR_ERROR
     */
    (DmiFir, bit(11)) ? TBDDefaultCallout;

    /** DMIFIR[12]
     *  FIR_RX_BUS0_TOO_MANY_BUS_ERRORS
     */
    (DmiFir, bit(12)) ? bus0TooManyBusErrors;

    /** DMIFIR[16]
     *  FIR_RX_BUS1_TRAINING_ERROR
     */
    (DmiFir, bit(16)) ? TBDDefaultCallout;

    /** DMIFIR[17]
     *  FIR_RX_BUS1_SPARE_DEPLOYED
     */
    (DmiFir, bit(17)) ? TBDDefaultCallout;

    /** DMIFIR[18]
     *  FIR_RX_BUS1_MAX_SPARES_EXCEEDED
     */
    (DmiFir, bit(18)) ? TBDDefaultCallout;

    /** DMIFIR[19]
     *  FIR_RX_BUS1_RECAL_OR_DYN_REPAIR_ERROR
     */
    (DmiFir, bit(19)) ? TBDDefaultCallout;

    /** DMIFIR[20]
     *  FIR_RX_BUS1_TOO_MANY_BUS_ERRORS
     */
    (DmiFir, bit(20)) ? TBDDefaultCallout;

    /** DMIFIR[24]
     *  FIR_RX_BUS2_TRAINING_ERROR
     */
    (DmiFir, bit(24)) ? TBDDefaultCallout;

    /** DMIFIR[25]
     *  FIR_RX_BUS2_SPARE_DEPLOYED
     */
    (DmiFir, bit(25)) ? TBDDefaultCallout;

    /** DMIFIR[26]
     *  FIR_RX_BUS2_MAX_SPARES_EXCEEDED
     */
    (DmiFir, bit(26)) ? TBDDefaultCallout;

    /** DMIFIR[27]
     *  FIR_RX_BUS2_RECAL_OR_DYN_REPAIR_ERROR
     */
    (DmiFir, bit(27)) ? TBDDefaultCallout;

    /** DMIFIR[28]
     *  FIR_RX_BUS2_TOO_MANY_BUS_ERRORS
     */
    (DmiFir, bit(28)) ? TBDDefaultCallout;

    /** DMIFIR[32]
     *  FIR_RX_BUS3_TRAINING_ERROR
     */
    (DmiFir, bit(32)) ? TBDDefaultCallout;

    /** DMIFIR[33]
     *  FIR_RX_BUS3_SPARE_DEPLOYED
     */
    (DmiFir, bit(33)) ? TBDDefaultCallout;

    /** DMIFIR[34]
     *  FIR_RX_BUS3_MAX_SPARES_EXCEEDED
     */
    (DmiFir, bit(34)) ? TBDDefaultCallout;

    /** DMIFIR[35]
     *  FIR_RX_BUS3_RECAL_OR_DYN_REPAIR_ERROR
     */
    (DmiFir, bit(35)) ? TBDDefaultCallout;

    /** DMIFIR[36]
     *  FIR_RX_BUS3_TOO_MANY_BUS_ERRORS
     */
    (DmiFir, bit(36)) ? TBDDefaultCallout;

    /** DMIFIR[40]
     *  FIR_RX_BUS4_TRAINING_ERROR
     */
    (DmiFir, bit(40)) ? TBDDefaultCallout;

    /** DMIFIR[41]
     *  FIR_RX_BUS4_SPARE_DEPLOYED
     */
    (DmiFir, bit(41)) ? TBDDefaultCallout;

    /** DMIFIR[42]
     *  FIR_RX_BUS4_MAX_SPARES_EXCEEDED
     */
    (DmiFir, bit(42)) ? TBDDefaultCallout;

    /** DMIFIR[43]
     *  FIR_RX_BUS4_RECAL_OR_DYN_REPAIR_ERROR
     */
    (DmiFir, bit(43)) ? TBDDefaultCallout;

    /** DMIFIR[44]
     *  FIR_RX_BUS4_TOO_MANY_BUS_ERRORS
     */
    (DmiFir, bit(44)) ? TBDDefaultCallout;

    /** DMIFIR[48]
     *  FIR_SCOMFIR_ERROR
     */
    (DmiFir, bit(48)) ? TBDDefaultCallout;

    /** DMIFIR[49]
     *  FIR_SCOMFIR_ERROR_CLONE
     */
    (DmiFir, bit(49)) ? TBDDefaultCallout;
};

################################################################################
#  NEST Chiplet ScacFir
################################################################################

rule ScacFir
{
    CHECK_STOP:  SCACFIR & ~SCACFIR_MASK & ~SCACFIR_ACT0 & ~SCACFIR_ACT1;
    UNIT_CS:     SCACFIR & ~SCACFIR_MASK & ~SCACFIR_ACT0 & ~SCACFIR_ACT1;
    RECOVERABLE: SCACFIR & ~SCACFIR_MASK & ~SCACFIR_ACT0 &  SCACFIR_ACT1;
};

group gScacFir filter singlebit
{
    /** SCACFIR[0]
     *  SCAC_LFIR_I2CMINVADDR
     */
    (ScacFir, bit(0)) ? TBDDefaultCallout;

    /** SCACFIR[1]
     *  SCAC_LFIR_I2CMINVWRITE
     */
    (ScacFir, bit(1)) ? TBDDefaultCallout;

    /** SCACFIR[2]
     *  SCAC_LFIR_I2CMINVREAD
     */
    (ScacFir, bit(2)) ? TBDDefaultCallout;

    /** SCACFIR[3]
     *  SCAC_LFIR_I2CMAPAR
     */
    (ScacFir, bit(3)) ? TBDDefaultCallout;

    /** SCACFIR[4]
     *  SCAC_LFIR_I2CMPAR
     */
    (ScacFir, bit(4)) ? TBDDefaultCallout;

    /** SCACFIR[5]
     *  SCAC_LFIR_I2CMLBPAR
     */
    (ScacFir, bit(5)) ? TBDDefaultCallout;

    /** SCACFIR[10]
     *  SCAC_LFIR_I2CMINVCMD
     */
    (ScacFir, bit(10)) ? TBDDefaultCallout;

    /** SCACFIR[11]
     *  SCAC_LFIR_I2CMPERR
     */
    (ScacFir, bit(11)) ? TBDDefaultCallout;

    /** SCACFIR[12]
     *  SCAC_LFIR_I2CMOVERRUN
     */
    (ScacFir, bit(12)) ? TBDDefaultCallout;

    /** SCACFIR[13]
     *  SCAC_LFIR_I2CMACCESS
     */
    (ScacFir, bit(13)) ? TBDDefaultCallout;

    /** SCACFIR[14]
     *  SCAC_LFIR_I2CMARB
     */
    (ScacFir, bit(14)) ? TBDDefaultCallout;

    /** SCACFIR[15]
     *  SCAC_LFIR_I2CMNACK
     */
    (ScacFir, bit(15)) ? TBDDefaultCallout;

    /** SCACFIR[16]
     *  SCAC_LFIR_I2CMSTOP
     */
    (ScacFir, bit(16)) ? TBDDefaultCallout;

    /** SCACFIR[17]
     *  SCAC_LFIR_LOCALPIB1
     */
    (ScacFir, bit(17)) ? TBDDefaultCallout;

    /** SCACFIR[18]
     *  SCAC_LFIR_LOCALPIB2
     */
    (ScacFir, bit(18)) ? TBDDefaultCallout;

    /** SCACFIR[19]
     *  SCAC_LFIR_LOCALPIB3
     */
    (ScacFir, bit(19)) ? TBDDefaultCallout;

    /** SCACFIR[20]
     *  SCAC_LFIR_LOCALPIB4
     */
    (ScacFir, bit(20)) ? TBDDefaultCallout;

    /** SCACFIR[21]
     *  SCAC_LFIR_LOCALPIB5
     */
    (ScacFir, bit(21)) ? TBDDefaultCallout;

    /** SCACFIR[22]
     *  SCAC_LFIR_LOCALPIB6
     */
    (ScacFir, bit(22)) ? TBDDefaultCallout;

    /** SCACFIR[23]
     *  SCAC_LFIR_LOCALPIB7
     */
    (ScacFir, bit(23)) ? TBDDefaultCallout;

    /** SCACFIR[24]
     *  SCAC_LFIR_STALLERROR
     */
    (ScacFir, bit(24)) ? TBDDefaultCallout;

    /** SCACFIR[25]
     *  SCAC_LFIR_REGPARERR
     */
    (ScacFir, bit(25)) ? TBDDefaultCallout;

    /** SCACFIR[26]
     *  SCAC_LFIR_REGPARERRX
     */
    (ScacFir, bit(26)) ? TBDDefaultCallout;

    /** SCACFIR[32]
     *  SCAC_LFIR_SMERR
     */
    (ScacFir, bit(32)) ? TBDDefaultCallout;

    /** SCACFIR[33]
     *  SCAC_LFIR_REGACCERR
     */
    (ScacFir, bit(33)) ? TBDDefaultCallout;

    /** SCACFIR[34]
     *  SCAC_LFIR_RESETERR
     */
    (ScacFir, bit(34)) ? TBDDefaultCallout;

    /** SCACFIR[35]
     *  SCAC_LFIR_INTERNAL_SCOM_ERROR
     */
    (ScacFir, bit(35)) ? TBDDefaultCallout;

    /** SCACFIR[36]
     *  SCAC_LFIR_INTERNAL_SCOM_ERROR_CLONE
     */
    (ScacFir, bit(36)) ? TBDDefaultCallout;
};

################################################################################
#  NEST Chiplet MBIFIR
################################################################################
# RAS spreadsheet: p8dd1_mss_FFDC_37_ reviewd.xls

rule MbiFir
{
    CHECK_STOP:  MBIFIR & ~MBIFIR_MASK & ~MBIFIR_ACT0 & ~MBIFIR_ACT1;
    UNIT_CS:     MBIFIR & ~MBIFIR_MASK & ~MBIFIR_ACT0 & ~MBIFIR_ACT1;
    RECOVERABLE: MBIFIR & ~MBIFIR_MASK & ~MBIFIR_ACT0 &  MBIFIR_ACT1;
};

group gMbiFir filter singlebit
{
    /** MBIFIR[0]
     *  MBIFIRQ_REPLAY_TIMEOUT
     */
    (MbiFir, bit(0)) ? calloutDmiBusTh1;

    /** MBIFIR[1]
     *  MBIFIRQ_CHANNEL_FAIL
     */
    (MbiFir, bit(1)) ? defaultMaskedError;

    /** MBIFIR[2]
     *  MBIFIRQ_CRC_ERROR
     */
    (MbiFir, bit(2)) ? defaultMaskedError;

    /** MBIFIR[3]
     *  MBIFIRQ_FRAME_NOACK
     */
    (MbiFir, bit(3)) ? defaultMaskedError;

    /** MBIFIR[4]
     *  MBIFIRQ_SEQID_OUT_OF_ORDER
     */
    (MbiFir, bit(4)) ? calloutDmiBusLvl2Th1;

    /** MBIFIR[5]
     *  MBIFIRQ_REPLAY_BUFFER_ECC_CE
     */
    (MbiFir, bit(5)) ? SelfMedThr5PerHour;

    /** MBIFIR[6]
     *  MBIFIRQ_REPLAY_BUFFER_ECC_UE
     */
    (MbiFir, bit(6)) ? SelfMedThr1;

    /** MBIFIR[7]
     *  MBIFIRQ_MBI_STATE_MACHINE_TIMEOUT
     */
    (MbiFir, bit(7)) ? defaultMaskedError;

    /** MBIFIR[8]
     *  MBIFIRQ_MBI_INTERNAL_CONTROL_PARITY_ERROR
     */
    (MbiFir, bit(8)) ? SelfMedThr1;

    /** MBIFIR[9]
     *  MBIFIRQ_MBI_DATA_FLOW_PARITY_ERROR
     */
    (MbiFir, bit(9)) ? SelfMedThr1;

    /** MBIFIR[10]
     *  MBIFIRQ_CRC_PERFORMANCE_DEGRADATION
     */
    # TODO RTC 23125. In RAS spreadsheet, threshold value is not clear
    (MbiFir, bit(10)) ? calloutDmiBus;

    /** MBIFIR[11]
     *  MBIFIRQ_HOST_MC_GLOBAL_CHECKSTOP
     */
    (MbiFir, bit(11)) ? defaultMaskedError;

    /** MBIFIR[12]
     *  MBIFIRQ_HOST_MC_TRACESTOP
     */
    (MbiFir, bit(12)) ? defaultMaskedError;

    /** MBIFIR[13]
     *  MBIFIRQ_CHANNEL_INTERLOCK_FAIL
     */
    (MbiFir, bit(13)) ? defaultMaskedError;

    /** MBIFIR[14]
     *  MBIFIRQ_HOST_MC_LOCAL_CHECKSTOP
     */
    (MbiFir, bit(14)) ? defaultMaskedError;

    /** MBIFIR[15]
     *  MBIFIRQ_FRTL_CONTER_OVERFLOW
     */
    (MbiFir, bit(15)) ? defaultMaskedError;

    /** MBIFIR[16]
     *  MBIFIRQ_SCOM_REGISTER_PARITY_ERROR
     */
    (MbiFir, bit(16)) ? SelfMedThr1;

    /** MBIFIR[17]
     *  MBIFIRQ_IO_FAULT: IO to MBI
     */
    (MbiFir, bit(17)) ? defaultMaskedError;

    /** MBIFIR[18]
     *  MBIFIRQ_MULTIPLE_REPLAY
     */
    (MbiFir, bit(18)) ? defaultMaskedError;

    /** MBIFIR[19]
     *  MBIFIRQ_MBICFG_PARITY_SCOM_ERROR
     */
    (MbiFir, bit(19)) ? SelfMedThr1;

    /** MBIFIR[20]
     *  MBIFIRQ_BUFFER_OVERRUN_ERROR
     */
    (MbiFir, bit(20)) ? calloutDmiBusTh1;

    /** MBIFIR[21:24]
     *  Reserved
     */
    (MbiFir, bit(21|22|23|24)) ? defaultMaskedError;

    /** MBIFIR[25]
     *  MBIFIRQ_INTERNAL_SCOM_ERROR_CLONE
     */
    (MbiFir, bit(25)) ? defaultMaskedError;

    /** MBIFIR[26]
     *  MBIFIRQ_INTERNAL_SCOM_ERROR_CLONE_COPY
     */
    (MbiFir, bit(26)) ? defaultMaskedError;
};

################################################################################
#  NEST Chiplet MBSFIR
################################################################################
# RAS spreadsheet: p8dd1_mss_FFDC_37_ reviewd.xls
rule MbsFir
{
    CHECK_STOP:  MBSFIR & ~MBSFIR_MASK & ~MBSFIR_ACT0 & ~MBSFIR_ACT1;
    UNIT_CS:     MBSFIR & ~MBSFIR_MASK & ~MBSFIR_ACT0 & ~MBSFIR_ACT1;
    RECOVERABLE: MBSFIR & ~MBSFIR_MASK & ~MBSFIR_ACT0 &  MBSFIR_ACT1;
};

group gMbsFir filter singlebit
{
    /** MBSFIR[0]
     *  MBS_FIR_REG_HOST_PROTOCOL_ERROR
     */
    (MbsFir, bit(0)) ? calloutDmiBusTh1;

    /** MBSFIR[1]
     *  MBS_FIR_REG_INT_PROTOCOL_ERROR
     */
    (MbsFir, bit(1)) ? SelfMedThr1;

    /** MBSFIR[2]
     *  MBS_FIR_REG_INVALID_ADDRESS_ERROR
     */
    (MbsFir, bit(2)) ? callout2ndLvlMed;

    /** MBSFIR[3]
     *  MBS_FIR_REG_EXTERNAL_TIMEOUT
     */
    (MbsFir, bit(3)) ? CalloutMcsHighAndThr1;

    /** MBSFIR[4]
     *  MBS_FIR_REG_INTERNAL_TIMEOUT
     */
    (MbsFir, bit(4)) ? SelfMedThr1;

    /** MBSFIR[5]
     *  MBS_FIR_REG_INT_BUFFER_CE
     */
    (MbsFir, bit(5)) ? SelfMedThr32PerDay;

    /** MBSFIR[6]
     *  MBS_FIR_REG_INT_BUFFER_UE
     */
    (MbsFir, bit(6)) ? SelfMedThr1;

    /** MBSFIR[7]
     *  MBS_FIR_REG_INT_BUFFER_SUE
     */
    (MbsFir, bit(7)) ? defaultMaskedError;

    /** MBSFIR[8]
     *  MBS_FIR_REG_INT_PARITY_ERROR
     */
    (MbsFir, bit(8)) ? SelfMedThr1;

    /** MBSFIR[9]
     *  MBS_FIR_REG_CACHE_SRW_CE
     */
    #TODO via RTC 22872 ( L4 Line Delete )
    (MbsFir, bit(9)) ? TBDDefaultCallout;

    /** MBSFIR[10]
     *  MBS_FIR_REG_CACHE_SRW_UE
     */
    (MbsFir, bit(10)) ? SelfMedThr1;

    /** MBSFIR[11]
     *  MBS_FIR_REG_CACHE_SRW_SUE
     */
    (MbsFir, bit(11)) ? defaultMaskedError;

    /** MBSFIR[12]
     *  MBS_FIR_REG_CACHE_CO_CE
     */
    #TODO via RTC 22872 ( L4 Line Delete )
    (MbsFir, bit(12)) ? TBDDefaultCallout;

    /** MBSFIR[13]
     *  MBS_FIR_REG_CACHE_CO_UE
     */
    (MbsFir, bit(13)) ? SelfMedThr1;

    /** MBSFIR[14]
     *  MBS_FIR_REG_CACHE_CO_SUE
     */
    (MbsFir, bit(14)) ? defaultMaskedError;

    /** MBSFIR[15]
     *  MBS_FIR_REG_DIR_CE
     */
    (MbsFir, bit(15)) ? SelfMedThr32PerDay;

    /** MBSFIR[16]
     *  MBS_FIR_REG_DIR_UE
     */
    (MbsFir, bit(16)) ? SelfMedThr1;

    /** MBSFIR[17]
     *  MBS_FIR_REG_DIR_MEMBER_DELETED
     */
    (MbsFir, bit(17)) ? defaultMaskedError;

    /** MBSFIR[18]
     *  MBS_FIR_REG_DIR_ALL_MEMBERS_DELETED
     */
    (MbsFir, bit(18)) ? SelfMedThr1;

    /** MBSFIR[19]
     *  MBS_FIR_REG_LRU_ERROR
     */
    (MbsFir, bit(19)) ? SelfMedThr32PerDay;

    /** MBSFIR[20]
     *  MBS_FIR_REG_EDRAM_ERROR
     */
    (MbsFir, bit(20)) ? SelfMedThr1;

    /** MBSFIR[21]
     *  MBS_FIR_REG_EMERGENCY_THROTTLE_SET
     */
    (MbsFir, bit(21)) ? defaultMaskedError;

    /** MBSFIR[22]
     *  MBS_FIR_REG_HOST_INBAND_READ_ERROR
     */
    (MbsFir, bit(22)) ? defaultMaskedError;

    /** MBSFIR[23]
     *  MBS_FIR_REG_HOST_INBAND_WRITE_ERROR
     */
    (MbsFir, bit(23)) ? defaultMaskedError;

    /** MBSFIR[24]
     *  MBS_FIR_REG_OCC_INBAND_READ_ERROR
     */
    (MbsFir, bit(24)) ? defaultMaskedError;

    /** MBSFIR[25]
     *  MBS_FIR_REG_OCC_INBAND_WRITE_ERROR
     */
    (MbsFir, bit(25)) ? defaultMaskedError;

    /** MBSFIR[26]
     *  MBS_FIR_REG_SRB_BUFFER_CE
     */
    (MbsFir, bit(26)) ? SelfMedThr32PerDay;

    /** MBSFIR[27]
     *  MBS_FIR_REG_SRB_BUFFER_UE
     */
    (MbsFir, bit(27)) ? SelfMedThr1;

    /** MBSFIR[28]
     *  MBS_FIR_REG_SRB_BUFFER_SUE
     */
    (MbsFir, bit(28)) ? defaultMaskedError;

    /** MBSFIR[29]
     *  MBS_FIR_REG_INTERNAL_SCOM_ERROR
     */
    (MbsFir, bit(29)) ? defaultMaskedError;

    /** MBSFIR[30]
     *  MBS_FIR_REG_INTERNAL_SCOM_ERROR_COPY
     */
    (MbsFir, bit(30)) ? defaultMaskedError;
};

################################################################################
#  NEST Chiplet MBSECC01FIR and MBSECC23FIR
################################################################################
# RAS spreadsheet: p8dd1_mss_FFDC_37_ reviewd.xls

rule MbsEcc01Fir
{
  CHECK_STOP:
    MBSECC01FIR & ~MBSECC01FIR_MASK & ~MBSECC01FIR_ACT0 & ~MBSECC01FIR_ACT1;
  UNIT_CS:
    MBSECC01FIR & ~MBSECC01FIR_MASK & ~MBSECC01FIR_ACT0 & ~MBSECC01FIR_ACT1;
  RECOVERABLE:
    MBSECC01FIR & ~MBSECC01FIR_MASK & ~MBSECC01FIR_ACT0 &  MBSECC01FIR_ACT1;
};

rule MbsEcc23Fir
{
  CHECK_STOP:
    MBSECC23FIR & ~MBSECC23FIR_MASK & ~MBSECC23FIR_ACT0 & ~MBSECC23FIR_ACT1;
  UNIT_CS:
    MBSECC23FIR & ~MBSECC23FIR_MASK & ~MBSECC23FIR_ACT0 & ~MBSECC23FIR_ACT1;
  RECOVERABLE:
    MBSECC23FIR & ~MBSECC23FIR_MASK & ~MBSECC23FIR_ACT0 &  MBSECC23FIR_ACT1;
};

group gMbsEccFir filter singlebit
{
    /** MBSECCFIR01[0:7]
     *  MBECCFIR_MEMORY_MPE_RANK_0_7
     */
    #TODO via RTC 22866 ( Chip Mark Verification )
    (MbsEcc01Fir, bit(0|1|2|3|4|5|6|7)) ? TBDDefaultCallout;

    /** MBSECCFIR23[0:7]
     *  MBECCFIR_MEMORY_MPE_RANK_0_7
     */
    #TODO via RTC 22866 ( Chip Mark Verification )
    (MbsEcc23Fir, bit(0|1|2|3|4|5|6|7)) ? TBDDefaultCallout;

    /** MBSECCFIR01[8:15]
     *  Reserved
     */
    (MbsEcc01Fir, bit(8|9|10|11|12|13|14|15)) ? defaultMaskedError;

    /** MBSECCFIR23[8:15]
     *  Reserved
     */
    (MbsEcc23Fir, bit(8|9|10|11|12|13|14|15)) ? defaultMaskedError;

    /** MBSECCFIR01[16]
     *  MBECCFIR_MEMORY_NCE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc01Fir, bit(16)) ? TBDDefaultCallout;

    /** MBSECCFIR23[16]
     *  MBECCFIR_MEMORY_NCE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc23Fir, bit(16)) ? TBDDefaultCallout;

    /** MBSECCFIR01[17]
     *  MBECCFIR_MEMORY_RCE
     */
    # TODO via RTC 23125. How to do this. In RAS spreadsheet action is RCE
    # In description, Threshold per rank 8/24 make a callout of DIMM pair
    # Needs discussion
    (MbsEcc01Fir, bit(17)) ? TBDDefaultCallout;

    /** MBSECCFIR23[17]
     *  MBECCFIR_MEMORY_RCE
     */
    (MbsEcc23Fir, bit(17)) ? TBDDefaultCallout;

    /** MBSECCFIR01[18]
     *  MBECCFIR_MEMORY_SUE
     */
    (MbsEcc01Fir, bit(18)) ? defaultMaskedError;

    /** MBSECCFIR23[18]
     *  MBECCFIR_MEMORY_SUE
     */
    (MbsEcc23Fir, bit(18)) ? defaultMaskedError;

    /** MBSECCFIR01[19]
     *  MBECCFIR_MEMORY_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc01Fir, bit(19)) ? TBDDefaultCallout;

    /** MBSECCFIR23[19]
     *  MBECCFIR_MEMORY_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc23Fir, bit(19)) ? TBDDefaultCallout;

    /** MBSECCFIR01[20:27]
     *  MBECCFIR_MAINT_MPE_RANK_0_7
     */
    #TODO via RTC 22866 ( Chip Mark Verification )
    (MbsEcc01Fir, bit(20|21|22|23|24|25|26|27)) ? TBDDefaultCallout;

    /** MBSECCFIR23[20:27]
     *  MBECCFIR_MAINT_MPE_RANK_0_7
     */
    #TODO via RTC 22866 ( Chip Mark Verification )
    (MbsEcc23Fir, bit(20|21|22|23|24|25|26|27)) ? TBDDefaultCallout;

    /** MBSECCFIR01[28:35]
     *  Reserved
     */
    (MbsEcc01Fir, bit(28|29|30|31|32|33|34|35)) ? TBDDefaultCallout;

    /** MBSECCFIR23[28:35]
     *  Reserved
     */
    (MbsEcc23Fir, bit(28|29|30|31|32|33|34|35)) ? TBDDefaultCallout;

    /** MBSECCFIR01[36]
     *  MBECCFIR_MAINTENANCE_NCE
     */
    (MbsEcc01Fir, bit(36)) ? defaultMaskedError;

    /** MBSECCFIR23[36]
     *  MBECCFIR_MAINTENANCE_NCE
     */
    (MbsEcc23Fir, bit(36)) ? defaultMaskedError;

    /** MBSECCFIR01[37]
     *  MBECCFIR_MAINTENANCE_SCE
     */
    (MbsEcc01Fir, bit(37)) ? defaultMaskedError;

    /** MBSECCFIR23[37]
     *  MBECCFIR_MAINTENANCE_SCE
     */
    (MbsEcc23Fir, bit(37)) ? defaultMaskedError;

    /** MBSECCFIR01[38]
     *  MBECCFIR_MAINTENANCE_MCE
     */
    (MbsEcc01Fir, bit(38)) ? defaultMaskedError;

    /** MBSECCFIR23[38]
     *  MBECCFIR_MAINTENANCE_MCE
     */
    (MbsEcc23Fir, bit(38)) ? defaultMaskedError;

    /** MBSECCFIR01[39]
     *  MBECCFIR_MAINTENANCE_RCE
     */
    (MbsEcc01Fir, bit(39)) ? defaultMaskedError;

    /** MBSECCFIR23[39]
     *  MBECCFIR_MAINTENANCE_RCE
     */
    (MbsEcc23Fir, bit(39)) ? defaultMaskedError;

    /** MBSECCFIR01[40]
     *  MBECCFIR_MAINTENANCE_SUE
     */
    (MbsEcc01Fir, bit(40)) ? defaultMaskedError;

    /** MBSECCFIR23[40]
     *  MBECCFIR_MAINTENANCE_SUE
     */
    (MbsEcc23Fir, bit(40)) ? defaultMaskedError;

    /** MBSECCFIR01[41]
     *  MBECCFIR_MAINTENANCE_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc01Fir, bit(41)) ? TBDDefaultCallout;

    /** MBSECCFIR23[41]
     *  MBECCFIR_MAINTENANCE_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc23Fir, bit(41)) ? TBDDefaultCallout;

    /** MBSECCFIR01[42]
     *  MBECCFIR_MPE_DURING_USE_MAINTENANCE_MARK_MODE
     */
    (MbsEcc01Fir, bit(42)) ? defaultMaskedError;

    /** MBSECCFIR23[42]
     *  MBECCFIR_MPE_DURING_USE_MAINTENANCE_MARK_MODE
     */
    (MbsEcc23Fir, bit(42)) ? defaultMaskedError;

    /** MBSECCFIR01[43]
     *  MBECCFIR_PREFETCH_MEMORY_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc01Fir, bit(43)) ? TBDDefaultCallout;

    /** MBSECCFIR23[43]
     *  MBECCFIR_PREFETCH_MEMORY_UE
     */
    #TODO via RTC 47289 ( CE/UE isolation )
    (MbsEcc23Fir, bit(43)) ? TBDDefaultCallout;

    /** MBSECCFIR01[44]
     *  MBECCFIR_MEMORY_RCD_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(44)) ? defaultMaskedError;

    /** MBSECCFIR23[44]
     *  MBECCFIR_MEMORY_RCD_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(44)) ? defaultMaskedError;

    /** MBSECCFIR01[45]
     *  MBECCFIR_MAINTENANCE_RCD_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(45)) ? defaultMaskedError;

    /** MBSECCFIR23[45]
     *  MBECCFIR_MAINTENANCE_RCD_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(45)) ? defaultMaskedError;

    /** MBSECCFIR01[46]
     *  MBECCFIR_RECOVERABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(46)) ? SelfMedThr1;

    /** MBSECCFIR23[46]
     *  MBECCFIR_RECOVERABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(46)) ? SelfMedThr1;

    /** MBSECCFIR01[47]
     *  MBECCFIR_UNRECOVERABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(47)) ? SelfMedThr1;

    /** MBSECCFIR23[47]
     *  MBECCFIR_UNRECOVERABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(47)) ? SelfMedThr1;

    /** MBSECCFIR01[48]
     *  MBECCFIR_MASKABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(48)) ? defaultMaskedError;

    /** MBSECCFIR23[48]
     *  MBECCFIR_MASKABLE_CONFIGURATION_REGISTER_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(48)) ? defaultMaskedError;

    /** MBSECCFIR01[49]
     *  MBECCFIR_ECC_DATAPATH_PARITY_ERROR
     */
    (MbsEcc01Fir, bit(49)) ? SelfMedThr1;

    /** MBSECCFIR23[49]
     *  MBECCFIR_ECC_DATAPATH_PARITY_ERROR
     */
    (MbsEcc23Fir, bit(49)) ? SelfMedThr1;

    /** MBSECCFIR01[50]
     *  MBECCFIR_INTERNAL_SCOM_ERROR
     */
    (MbsEcc01Fir, bit(50)) ? defaultMaskedError;

    /** MBSECCFIR23[50]
     *  MBECCFIR_INTERNAL_SCOM_ERROR
     */
    (MbsEcc23Fir, bit(50)) ? defaultMaskedError;

    /** MBSECCFIR01[51]
     *  MBECCFIR_INTERNAL_SCOM_ERROR_COPY
     */
    (MbsEcc01Fir, bit(51)) ? defaultMaskedError;

    /** MBSECCFIR23[51]
     *  MBECCFIR_INTERNAL_SCOM_ERROR_COPY
     */
    (MbsEcc23Fir, bit(51)) ? defaultMaskedError;
};

################################################################################
#  NEST Chiplet MCBIST01FIR and MCBIST23FIR
################################################################################
# RAS spreadsheet: p8dd1_mss_FFDC_37_ reviewd.xls

rule Mcbist01Fir
{
  CHECK_STOP:
    MCBIST01FIR & ~MCBIST01FIR_MASK & ~MCBIST01FIR_ACT0 & ~MCBIST01FIR_ACT1;
  UNIT_CS:
    MCBIST01FIR & ~MCBIST01FIR_MASK & ~MCBIST01FIR_ACT0 & ~MCBIST01FIR_ACT1;
  RECOVERABLE:
    MCBIST01FIR & ~MCBIST01FIR_MASK & ~MCBIST01FIR_ACT0 &  MCBIST01FIR_ACT1;
};

rule Mcbist23Fir
{
  CHECK_STOP:
    MCBIST23FIR & ~MCBIST23FIR_MASK & ~MCBIST23FIR_ACT0 & ~MCBIST23FIR_ACT1;
  UNIT_CS:
    MCBIST23FIR & ~MCBIST23FIR_MASK & ~MCBIST23FIR_ACT0 & ~MCBIST23FIR_ACT1;
  RECOVERABLE:
    MCBIST23FIR & ~MCBIST23FIR_MASK & ~MCBIST23FIR_ACT0 &  MCBIST23FIR_ACT1;
};

group gMcbistFir filter singlebit
{
    /** MCBISTFIR01[0]
     *  MBSFIRQ_SCOM_PAR_ERRORS
     */
    (Mcbist01Fir, bit(0)) ? SelfMedThr1;

    /** MCBISTFIR23[0]
     *  MBSFIRQ_SCOM_PAR_ERRORS
     */
    (Mcbist23Fir, bit(0)) ? SelfMedThr1;

    /** MCBISTFIR01[1]
     *  MBSFIRQ_MBX_PAR_ERRORS
     */
    (Mcbist01Fir, bit(1)) ? calloutSelfMed;

    /** MCBISTFIR23[1]
     *  MBSFIRQ_MBX_PAR_ERRORS
     */
    (Mcbist23Fir, bit(1)) ? calloutSelfMed;

    /** MCBISTFIR01[2:14]
     *  Reserved
     */
    (Mcbist01Fir, bit(2|3|4|5|6|7|8|9|10|11|12|13|14)) ? defaultMaskedError;

    /** MCBISTFIR23[2:14]
     *  Reserved
     */
    (Mcbist23Fir, bit(2|3|4|5|6|7|8|9|10|11|12|13|14)) ? defaultMaskedError;

    /** MCBISTFIR01[15]
     *  MBSFIRQ_INTERNAL_SCOM_ERROR
     */
    (Mcbist01Fir, bit(15)) ? defaultMaskedError;

    /** MCBISTFIR23[15]
     *  MBSFIRQ_INTERNAL_SCOM_ERROR
     */
    (Mcbist23Fir, bit(15)) ? defaultMaskedError;

    /** MCBISTFIR01[16]
     *  MBSFIRQ_INTERNAL_SCOM_ERROR_CLONE
     */
    (Mcbist01Fir, bit(16)) ? defaultMaskedError;

    /** MCBISTFIR23[16]
     *  MBSFIRQ_INTERNAL_SCOM_ERROR_CLONE
     */
    (Mcbist23Fir, bit(16)) ? defaultMaskedError;
};

################################################################################
#  NEST Chiplet MBSSECUREFIR
################################################################################

rule MbsSecureFir
{
  # NOTE: This secure FIR will only report checkstop attentions.
  CHECK_STOP: MBSSECUREFIR;
  UNIT_CS:    MBSSECUREFIR;
};

group gMbsSecureFir filter singlebit
{
    /** MBSSECUREFIR[0]
     *  MBSSIRQ_INVALID_MBSXCR_ACCESS
     */
    (MbsSecureFir, bit(0)) ? TBDDefaultCallout;

    /** MBSSECUREFIR[1]
     *  MBSSIRQ_INVALID_MBAXCR01_ACCESS
     */
    (MbsSecureFir, bit(1)) ? TBDDefaultCallout;

    /** MBSSECUREFIR[2]
     *  MBSSIRQ_INVALID_MBAXCR23_ACCESS
     */
    (MbsSecureFir, bit(2)) ? TBDDefaultCallout;

    /** MBSSECUREFIR[3]
     *  MBSSIRQ_INVALID_MBAXCRMS_ACCRESS
     */
    (MbsSecureFir, bit(3)) ? TBDDefaultCallout;

    /** MBSSECUREFIR[5]
     *  MBSSIRQ_INVALID_SIR_MASK_OR_ACTION_REGISTER_ACCESS
     */
    (MbsSecureFir, bit(5)) ? TBDDefaultCallout;
};

################################################################################
# Actions specific to NEST chiplet
################################################################################

actionclass bus0SpareDeployed
{
    callout(procedure(MEMBUS_ERROR_ENUM), MRU_LOW);
    funccall("dmiBus0SpareDeployed");
};

actionclass bus0MaxSparesExceeded
{
    callout(procedure(MEMBUS_ERROR_ENUM), MRU_LOW);
    funccall("dmiBus0SparesExceeded");
    threshold1;
};

actionclass bus0TooManyBusErrors
{
    callout(procedure(MEMBUS_ERROR_ENUM), MRU_LOW);
    funccall("dmiBus0TooManyErrors");
    threshold1;
};

/** Callout the DMI bus */
actionclass calloutDmiBus
{
    calloutSelfMedA;
    callout(connected(TYPE_MCS),MRU_MEDA);
    callout(procedure(MEMBUS_ERROR_ENUM), MRU_LOW);
};

/** Callout the DMI bus, threhold 1 */
actionclass calloutDmiBusTh1
{
    calloutDmiBus;
    threshold1;
};

/** Callout the DMI bus and 2nd Level (LOW), threhold 1 */
actionclass calloutDmiBusLvl2Th1
{
    calloutDmiBusTh1;
    callout2ndLvlLow;
};

actionclass CalloutMcsHighAndThr1
{
    callout(connected(TYPE_MCS),MRU_HIGH);
    threshold1;
};
