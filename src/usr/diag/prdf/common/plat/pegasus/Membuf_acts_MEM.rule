# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/pegasus/Membuf_acts_MEM.rule $
#
# IBM CONFIDENTIAL
#
# COPYRIGHT International Business Machines Corp. 2012,2013
#
# p1
#
# Object Code Only (OCO) source materials
# Licensed Internal Code Source Materials
# IBM HostBoot Licensed Internal Code
#
# The source code for this program is not published or otherwise
# divested of its trade secrets, irrespective of what has been
# deposited with the U.S. Copyright Office.
#
# Origin: 30
#
# IBM_PROLOG_END_TAG

################################################################################
# MEM Chiplet Registers
################################################################################

rule MemChipletFir
{
  CHECK_STOP:
     (MEM_CHIPLET_CS_FIR       & `17fc000000000000`) & ~MEM_CHIPLET_FIR_MASK;
  UNIT_CS:
     (MEM_CHIPLET_CS_FIR       & `17fc000000000000`) & ~MEM_CHIPLET_FIR_MASK;
  RECOVERABLE:
    ((MEM_CHIPLET_RE_FIR >> 2) & `17f0000000000000`) & ~MEM_CHIPLET_FIR_MASK;
};

group gMemChipletFir filter singlebit
{
    /** MEM_CHIPLET_FIR[3]
     *  Attention from LFIR
     */
    (MemChipletFir, bit(3)) ? analyze(gMemLFir);

    /** MEM_CHIPLET_FIR[5]
     *  Attention from MBACALFIR (MBA 01)
     */
    (MemChipletFir, bit(5)) ? analyzeMba0;

    /** MEM_CHIPLET_FIR[6]
     *  Attention from MBAFIR (MBA 01)
     */
    (MemChipletFir, bit(6)) ? analyzeMba0;

    /** MEM_CHIPLET_FIR[7]
     *  Attention from MBACALFIR (MBA 23)
     */
    (MemChipletFir, bit(7)) ? analyzeMba1;

    /** MEM_CHIPLET_FIR[8]
     *  Attention from MBAFIR (MBA 23)
     */
    (MemChipletFir, bit(8)) ? analyzeMba1;

    /** MEM_CHIPLET_FIR[9]
     *  Attention from DDRPHYFIR (MBA 01)
     */
    (MemChipletFir, bit(9)) ? analyzeMba0;

    /** MEM_CHIPLET_FIR[10]
     *  Attention from DDRPHYFIR (MBA 23)
     */
    (MemChipletFir, bit(10)) ? analyzeMba1;

    /** MEM_CHIPLET_FIR[11]
     *  Attention from MEMFBISTFIR
     */
    (MemChipletFir, bit(11)) ? defaultMaskedError;

    /** MEM_CHIPLET_FIR[12]
     *  Attention from MBASECUREFIR (MBA 01)
     */
    (MemChipletFir, bit(12)) ? analyzeMba0; # Checkstop only

    /** MEM_CHIPLET_FIR[13]
     *  Attention from MBASECUREFIR (MBA 23)
     */
    (MemChipletFir, bit(13)) ? analyzeMba1; # Checkstop only
};

rule MemChipletSpa
{
    SPECIAL: MEM_CHIPLET_SPA & ~MEM_CHIPLET_SPA_MASK;
};

group gMemChipletSpa filter singlebit
{
    /** MEM_CHIPLET_SPA[0]
     *  Attention from Mba 01
     */
    (MemChipletSpa, bit(0)) ? analyzeMba0;

    /** MEM_CHIPLET_SPA[1]
     *  Attention from Mba 1
     */
    (MemChipletSpa, bit(1)) ? analyzeMba1;
};

################################################################################
# MEM Chiplet LFIR
################################################################################

rule MemLFir
{
  CHECK_STOP:  MEM_LFIR & ~MEM_LFIR_MASK & ~MEM_LFIR_ACT0 & ~MEM_LFIR_ACT1;
  UNIT_CS:     MEM_LFIR & ~MEM_LFIR_MASK & ~MEM_LFIR_ACT0 & ~MEM_LFIR_ACT1;
  RECOVERABLE: MEM_LFIR & ~MEM_LFIR_MASK & ~MEM_LFIR_ACT0 &  MEM_LFIR_ACT1;
};

group gMemLFir filter singlebit
{
    /** MEM_LFIR[0]
     *  CFIR internal parity error
     */
    (MemLFir, bit(0)) ? TBDDefaultCallout;

    /** MEM_LFIR[1]
     *  Local errors from GPIO (PCB error)
     */
    (MemLFir, bit(1)) ? TBDDefaultCallout;

    /** MEM_LFIR[2]
     *  Local errors from CC (PCB error)
     */
    (MemLFir, bit(2)) ? TBDDefaultCallout;

    /** MEM_LFIR[3]
     *  Local errors from CC (OPCG, parity, scan collision, ...)
     */
    (MemLFir, bit(3)) ? TBDDefaultCallout;

    /** MEM_LFIR[4]
     *  Local errors from PSC (PCB error)
     */
    (MemLFir, bit(4)) ? TBDDefaultCallout;

    /** MEM_LFIR[5]
     *  Local errors from PSC (parity error)
     */
    (MemLFir, bit(5)) ? TBDDefaultCallout;

    /** MEM_LFIR[6]
     *  Local errors from Thermal (parity error)
     */
    (MemLFir, bit(6)) ? TBDDefaultCallout;

    /** MEM_LFIR[7]
     *  Local errors from Thermal (PCB error)
     */
    (MemLFir, bit(7)) ? TBDDefaultCallout;

    /** MEM_LFIR[8|9]
     *  Local errors from Thermal (Trip error)
     */
    (MemLFir, bit(8|9)) ? TBDDefaultCallout;

    /** MEM_LFIR[10|11]
     *  Local errors from Trace Array ( error)
     */
    (MemLFir, bit(10|11)) ? TBDDefaultCallout;
};

################################################################################
# Actions specific to MEM chiplet
################################################################################

/** Analyze connected MBA0 */
actionclass analyzeMba0
{
    try ( funccall("MBA1_Starvation"),
          analyze(connected(TYPE_MBA, 0)) );
};

/** Analyze connected MBA1 */
# No need to address starvation issue here
# because MBA0 is not at attention
actionclass analyzeMba1
{
    analyze(connected(TYPE_MBA, 1));
};

