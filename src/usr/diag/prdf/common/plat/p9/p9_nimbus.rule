# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_nimbus.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p9_nimbus
{
    name        "P9 Nimbus chip";
    targettype  TYPE_PROC;
    sigoff      0x9000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

#Import signatures
.include "prdfP9ProcMbCommonExtraSig.H";

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # Global Attention FIR
    ############################################################################

    register GLOBAL_CS_FIR
    {
        name        "Global Checkstop Attention FIR";
        scomaddr    0x500F001C;
        capture     group default;
    };

    register GLOBAL_RE_FIR
    {
        name        "Global Recoverable Attention FIR";
        scomaddr    0x500F001B;
        capture     group default;
    };

    ############################################################################
    # Global Unit Checkstop FIR
    ############################################################################

    register GLOBAL_UCS_FIR
    {
        name        "Global Unit Checkstop FIR";
        scomaddr    0x50040018;
        capture     group default;
    };

    ############################################################################
    # Global Host Attention FIR
    ############################################################################

    register GLOBAL_HA_FIR
    {
        name        "Global Host Attention FIR";
        scomaddr    0x50040009;
        capture     group default;
    };

    ############################################################################
    # TP Chiplet FIR
    ############################################################################

    register TP_CHIPLET_CS_FIR
    {
        name        "TP Chiplet Checkstop FIR";
        scomaddr    0x01040000;
        capture     group default;
    };

    register TP_CHIPLET_RE_FIR
    {
        name        "TP Chiplet Recoverable FIR";
        scomaddr    0x01040001;
        capture     group default;
    };

    register TP_CHIPLET_FIR_MASK
    {
        name        "TP Chiplet FIR MASK";
        scomaddr    0x01040002;
        capture     group default;
    };

    ############################################################################
    # P9 chip TP_LFIR
    ############################################################################

    register TP_LFIR
    {
        name        "P9 chip TP_LFIR";
        scomaddr    0x0104000a;
        reset       (&, 0x0104000b);
        mask        (|, 0x0104000f);
        capture     group default;
    };

    register TP_LFIR_MASK
    {
        name        "P9 chip TP_LFIR MASK";
        scomaddr    0x0104000d;
        capture     group default;
    };

    register TP_LFIR_ACT0
    {
        name        "P9 chip TP_LFIR ACT0";
        scomaddr    0x01040010;
        capture     group default;
        capture     req nonzero("TP_LFIR");
    };

    register TP_LFIR_ACT1
    {
        name        "P9 chip TP_LFIR ACT1";
        scomaddr    0x01040011;
        capture     group default;
        capture     req nonzero("TP_LFIR");
    };

    ############################################################################
    # P9 chip OCCFIR
    ############################################################################

    register OCCFIR
    {
        name        "P9 chip OCCFIR";
        scomaddr    0x01010800;
        reset       (&, 0x01010801);
        mask        (|, 0x01010805);
        capture     group default;
    };

    register OCCFIR_MASK
    {
        name        "P9 chip OCCFIR MASK";
        scomaddr    0x01010803;
        capture     group default;
    };

    register OCCFIR_ACT0
    {
        name        "P9 chip OCCFIR ACT0";
        scomaddr    0x01010806;
        capture     group default;
        capture     req nonzero("OCCFIR");
    };

    register OCCFIR_ACT1
    {
        name        "P9 chip OCCFIR ACT1";
        scomaddr    0x01010807;
        capture     group default;
        capture     req nonzero("OCCFIR");
    };

    ############################################################################
    # N0 Chiplet FIR
    ############################################################################

    register N0_CHIPLET_CS_FIR
    {
        name        "N0 Chiplet Checkstop FIR";
        scomaddr    0x02040000;
        capture     group default;
    };

    register N0_CHIPLET_RE_FIR
    {
        name        "N0 Chiplet Recoverable FIR";
        scomaddr    0x02040001;
        capture     group default;
    };

    register N0_CHIPLET_FIR_MASK
    {
        name        "N0 Chiplet FIR MASK";
        scomaddr    0x02040002;
        capture     group default;
    };

    ############################################################################
    # N0 Chiplet Unit Checkstop FIR
    ############################################################################

    register N0_CHIPLET_UCS_FIR
    {
        name        "N0 Chiplet Unit Checkstop FIR";
        scomaddr    0x02040018;
        capture     group default;
    };

    register N0_CHIPLET_UCS_FIR_MASK
    {
        name        "N0 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x02040019;
        capture     group default;
    };

    ############################################################################
    # P9 chip N0_LFIR
    ############################################################################

    register N0_LFIR
    {
        name        "P9 chip N0_LFIR";
        scomaddr    0x0204000a;
        reset       (&, 0x0204000b);
        mask        (|, 0x0204000f);
        capture     group default;
    };

    register N0_LFIR_MASK
    {
        name        "P9 chip N0_LFIR MASK";
        scomaddr    0x0204000d;
        capture     group default;
    };

    register N0_LFIR_ACT0
    {
        name        "P9 chip N0_LFIR ACT0";
        scomaddr    0x02040010;
        capture     group default;
        capture     req nonzero("N0_LFIR");
    };

    register N0_LFIR_ACT1
    {
        name        "P9 chip N0_LFIR ACT1";
        scomaddr    0x02040011;
        capture     group default;
        capture     req nonzero("N0_LFIR");
    };

    ############################################################################
    # P9 chip NXCQFIR
    ############################################################################

    register NXCQFIR
    {
        name        "P9 chip NXCQFIR";
        scomaddr    0x02011080;
        reset       (&, 0x02011081);
        mask        (|, 0x02011085);
        capture     group default;
    };

    register NXCQFIR_MASK
    {
        name        "P9 chip NXCQFIR MASK";
        scomaddr    0x02011083;
        capture     group default;
    };

    register NXCQFIR_ACT0
    {
        name        "P9 chip NXCQFIR ACT0";
        scomaddr    0x02011086;
        capture     group default;
        capture     req nonzero("NXCQFIR");
    };

    register NXCQFIR_ACT1
    {
        name        "P9 chip NXCQFIR ACT1";
        scomaddr    0x02011087;
        capture     group default;
        capture     req nonzero("NXCQFIR");
    };

    ############################################################################
    # P9 chip NXDMAENGFIR
    ############################################################################

    register NXDMAENGFIR
    {
        name        "P9 chip NXDMAENGFIR";
        scomaddr    0x02011100;
        reset       (&, 0x02011101);
        mask        (|, 0x02011105);
        capture     group default;
    };

    register NXDMAENGFIR_MASK
    {
        name        "P9 chip NXDMAENGFIR MASK";
        scomaddr    0x02011103;
        capture     group default;
    };

    register NXDMAENGFIR_ACT0
    {
        name        "P9 chip NXDMAENGFIR ACT0";
        scomaddr    0x02011106;
        capture     group default;
        capture     req nonzero("NXDMAENGFIR");
    };

    register NXDMAENGFIR_ACT1
    {
        name        "P9 chip NXDMAENGFIR ACT1";
        scomaddr    0x02011107;
        capture     group default;
        capture     req nonzero("NXDMAENGFIR");
    };

    ############################################################################
    # N1 Chiplet FIR
    ############################################################################

    register N1_CHIPLET_CS_FIR
    {
        name        "N1 Chiplet Checkstop FIR";
        scomaddr    0x03040000;
        capture     group default;
    };

    register N1_CHIPLET_RE_FIR
    {
        name        "N1 Chiplet Recoverable FIR";
        scomaddr    0x03040001;
        capture     group default;
    };

    register N1_CHIPLET_FIR_MASK
    {
        name        "N1 Chiplet FIR MASK";
        scomaddr    0x03040002;
        capture     group default;
    };

    ############################################################################
    # N1 Chiplet Unit Checkstop FIR
    ############################################################################

    register N1_CHIPLET_UCS_FIR
    {
        name        "N1 Chiplet Unit Checkstop FIR";
        scomaddr    0x03040018;
        capture     group default;
    };

    register N1_CHIPLET_UCS_FIR_MASK
    {
        name        "N1 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x03040019;
        capture     group default;
    };

    ############################################################################
    # N1 Chiplet Host Attention FIR
    ############################################################################

    register N1_CHIPLET_HA_FIR
    {
        name        "N1 Chiplet Host Attention FIR";
        scomaddr    0x03040009;
        capture     group default;
    };

    register N1_CHIPLET_HA_FIR_MASK
    {
        name        "N1 Chiplet Host Attention FIR MASK";
        scomaddr    0x0304001a;
        capture     group default;
    };

    ############################################################################
    # P9 chip N1_LFIR
    ############################################################################

    register N1_LFIR
    {
        name        "P9 chip N1_LFIR";
        scomaddr    0x0304000a;
        reset       (&, 0x0304000b);
        mask        (|, 0x0304000f);
        capture     group default;
    };

    register N1_LFIR_MASK
    {
        name        "P9 chip N1_LFIR MASK";
        scomaddr    0x0304000d;
        capture     group default;
    };

    register N1_LFIR_ACT0
    {
        name        "P9 chip N1_LFIR ACT0";
        scomaddr    0x03040010;
        capture     group default;
        capture     req nonzero("N1_LFIR");
    };

    register N1_LFIR_ACT1
    {
        name        "P9 chip N1_LFIR ACT1";
        scomaddr    0x03040011;
        capture     group default;
        capture     req nonzero("N1_LFIR");
    };

    ############################################################################
    # P9 chip MCDFIR 0
    ############################################################################

    register MCDFIR_0
    {
        name        "P9 chip MCDFIR 0";
        scomaddr    0x03011000;
        reset       (&, 0x03011001);
        mask        (|, 0x03011005);
        capture     group default;
    };

    register MCDFIR_0_MASK
    {
        name        "P9 chip MCDFIR 0 MASK";
        scomaddr    0x03011003;
        capture     group default;
    };

    register MCDFIR_0_ACT0
    {
        name        "P9 chip MCDFIR 0 ACT0";
        scomaddr    0x03011006;
        capture     group default;
        capture     req nonzero("MCDFIR_0");
    };

    register MCDFIR_0_ACT1
    {
        name        "P9 chip MCDFIR 0 ACT1";
        scomaddr    0x03011007;
        capture     group default;
        capture     req nonzero("MCDFIR_0");
    };

    ############################################################################
    # P9 chip MCDFIR 1
    ############################################################################

    register MCDFIR_1
    {
        name        "P9 chip MCDFIR 1";
        scomaddr    0x03011400;
        reset       (&, 0x03011401);
        mask        (|, 0x03011405);
        capture     group default;
    };

    register MCDFIR_1_MASK
    {
        name        "P9 chip MCDFIR 1 MASK";
        scomaddr    0x03011403;
        capture     group default;
    };

    register MCDFIR_1_ACT0
    {
        name        "P9 chip MCDFIR 1 ACT0";
        scomaddr    0x03011406;
        capture     group default;
        capture     req nonzero("MCDFIR_1");
    };

    register MCDFIR_1_ACT1
    {
        name        "P9 chip MCDFIR 1 ACT1";
        scomaddr    0x03011407;
        capture     group default;
        capture     req nonzero("MCDFIR_1");
    };

    ############################################################################
    # P9 chip VASFIR
    ############################################################################

    register VASFIR
    {
        name        "P9 chip VASFIR";
        scomaddr    0x03011800;
        reset       (&, 0x03011801);
        mask        (|, 0x03011805);
        capture     group default;
    };

    register VASFIR_MASK
    {
        name        "P9 chip VASFIR MASK";
        scomaddr    0x03011803;
        capture     group default;
    };

    register VASFIR_ACT0
    {
        name        "P9 chip VASFIR ACT0";
        scomaddr    0x03011806;
        capture     group default;
        capture     req nonzero("VASFIR");
    };

    register VASFIR_ACT1
    {
        name        "P9 chip VASFIR ACT1";
        scomaddr    0x03011807;
        capture     group default;
        capture     req nonzero("VASFIR");
    };

    ############################################################################
    # N2 Chiplet FIR
    ############################################################################

    register N2_CHIPLET_CS_FIR
    {
        name        "N2 Chiplet Checkstop FIR";
        scomaddr    0x04040000;
        capture     group default;
    };

    register N2_CHIPLET_RE_FIR
    {
        name        "N2 Chiplet Recoverable FIR";
        scomaddr    0x04040001;
        capture     group default;
    };

    register N2_CHIPLET_FIR_MASK
    {
        name        "N2 Chiplet FIR MASK";
        scomaddr    0x04040002;
        capture     group default;
    };

    ############################################################################
    # N2 Chiplet Unit Checkstop FIR
    ############################################################################

    register N2_CHIPLET_UCS_FIR
    {
        name        "N2 Chiplet Unit Checkstop FIR";
        scomaddr    0x04040018;
        capture     group default;
    };

    register N2_CHIPLET_UCS_FIR_MASK
    {
        name        "N2 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x04040019;
        capture     group default;
    };

    ############################################################################
    # P9 chip N2_LFIR
    ############################################################################

    register N2_LFIR
    {
        name        "P9 chip N2_LFIR";
        scomaddr    0x0404000a;
        reset       (&, 0x0404000b);
        mask        (|, 0x0404000f);
        capture     group default;
    };

    register N2_LFIR_MASK
    {
        name        "P9 chip N2_LFIR MASK";
        scomaddr    0x0404000d;
        capture     group default;
    };

    register N2_LFIR_ACT0
    {
        name        "P9 chip N2_LFIR ACT0";
        scomaddr    0x04040010;
        capture     group default;
        capture     req nonzero("N2_LFIR");
    };

    register N2_LFIR_ACT1
    {
        name        "P9 chip N2_LFIR ACT1";
        scomaddr    0x04040011;
        capture     group default;
        capture     req nonzero("N2_LFIR");
    };

    ############################################################################
    # P9 chip PSIFIR
    ############################################################################

    register PSIFIR
    {
        name        "P9 chip PSIFIR";
        scomaddr    0x04011800;
        reset       (&, 0x04011801);
        mask        (|, 0x04011805);
        capture     group default;
    };

    register PSIFIR_MASK
    {
        name        "P9 chip PSIFIR MASK";
        scomaddr    0x04011803;
        capture     group default;
    };

    register PSIFIR_ACT0
    {
        name        "P9 chip PSIFIR ACT0";
        scomaddr    0x04011806;
        capture     group default;
        capture     req nonzero("PSIFIR");
    };

    register PSIFIR_ACT1
    {
        name        "P9 chip PSIFIR ACT1";
        scomaddr    0x04011807;
        capture     group default;
        capture     req nonzero("PSIFIR");
    };

    ############################################################################
    # N3 Chiplet FIR
    ############################################################################

    register N3_CHIPLET_CS_FIR
    {
        name        "N3 Chiplet Checkstop FIR";
        scomaddr    0x05040000;
        capture     group default;
    };

    register N3_CHIPLET_RE_FIR
    {
        name        "N3 Chiplet Recoverable FIR";
        scomaddr    0x05040001;
        capture     group default;
    };

    register N3_CHIPLET_FIR_MASK
    {
        name        "N3 Chiplet FIR MASK";
        scomaddr    0x05040002;
        capture     group default;
    };

    ############################################################################
    # N3 Chiplet Unit Checkstop FIR
    ############################################################################

    register N3_CHIPLET_UCS_FIR
    {
        name        "N3 Chiplet Unit Checkstop FIR";
        scomaddr    0x05040018;
        capture     group default;
    };

    register N3_CHIPLET_UCS_FIR_MASK
    {
        name        "N3 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x05040019;
        capture     group default;
    };

    ############################################################################
    # N3 Chiplet Host Attention FIR
    ############################################################################

    register N3_CHIPLET_HA_FIR
    {
        name        "N3 Chiplet Host Attention FIR";
        scomaddr    0x05040009;
        capture     group default;
    };

    register N3_CHIPLET_HA_FIR_MASK
    {
        name        "N3 Chiplet Host Attention FIR MASK";
        scomaddr    0x0504001a;
        capture     group default;
    };

    ############################################################################
    # N3 Chiplet PBEXTFIR
    ############################################################################

    # External checkstop register - Used for FFDC and Fabric sorting only
    # Any attention generated from this FIR register indicates that there was a
    # checkstop attention raised on another chip. Currently, we do not do any
    # additional analysis in this FIR because we assume we will get an interrupt
    # from the offending chip. This FIR will set PB_CHIPLET_FIR[2] which is
    # currently ignored.

    register PBEXTFIR
    {
        name        "PowerBus EH EXTFIR";
        scomaddr    0x05011C2E;
        capture     group default;
    };

    ############################################################################
    # P9 chip N3_LFIR
    ############################################################################

    register N3_LFIR
    {
        name        "P9 chip N3_LFIR";
        scomaddr    0x0504000a;
        reset       (&, 0x0504000b);
        mask        (|, 0x0504000f);
        capture     group default;
    };

    register N3_LFIR_MASK
    {
        name        "P9 chip N3_LFIR MASK";
        scomaddr    0x0504000d;
        capture     group default;
    };

    register N3_LFIR_ACT0
    {
        name        "P9 chip N3_LFIR ACT0";
        scomaddr    0x05040010;
        capture     group default;
        capture     req nonzero("N3_LFIR");
    };

    register N3_LFIR_ACT1
    {
        name        "P9 chip N3_LFIR ACT1";
        scomaddr    0x05040011;
        capture     group default;
        capture     req nonzero("N3_LFIR");
    };

    ############################################################################
    # P9 chip NPU0FIR
    ############################################################################

    register NPU0FIR
    {
        name        "P9 chip NPU0FIR";
        scomaddr    0x05011400;
        reset       (&, 0x05011401);
        mask        (|, 0x05011405);
        capture     group default;
    };

    register NPU0FIR_MASK
    {
        name        "P9 chip NPU0FIR MASK";
        scomaddr    0x05011403;
        capture     group default;
    };

    register NPU0FIR_ACT0
    {
        name        "P9 chip NPU0FIR ACT0";
        scomaddr    0x05011406;
        capture     group default;
        capture     req nonzero("NPU0FIR");
    };

    register NPU0FIR_ACT1
    {
        name        "P9 chip NPU0FIR ACT1";
        scomaddr    0x05011407;
        capture     group default;
        capture     req nonzero("NPU0FIR");
    };

    ############################################################################
    # P9 chip NPU1FIR
    ############################################################################

    register NPU1FIR
    {
        name        "P9 chip NPU1FIR";
        scomaddr    0x05011440;
        reset       (&, 0x05011441);
        mask        (|, 0x05011445);
        capture     group default;
    };

    register NPU1FIR_MASK
    {
        name        "P9 chip NPU1FIR MASK";
        scomaddr    0x05011443;
        capture     group default;
    };

    register NPU1FIR_ACT0
    {
        name        "P9 chip NPU1FIR ACT0";
        scomaddr    0x05011446;
        capture     group default;
        capture     req nonzero("NPU1FIR");
    };

    register NPU1FIR_ACT1
    {
        name        "P9 chip NPU1FIR ACT1";
        scomaddr    0x05011447;
        capture     group default;
        capture     req nonzero("NPU1FIR");
    };

    ############################################################################
    # P9 chip PBWESTFIR
    ############################################################################

    register PBWESTFIR
    {
        name        "P9 chip PBWESTFIR";
        scomaddr    0x05011800;
        reset       (&, 0x05011801);
        mask        (|, 0x05011805);
        capture     group default;
    };

    register PBWESTFIR_MASK
    {
        name        "P9 chip PBWESTFIR MASK";
        scomaddr    0x05011803;
        capture     group default;
    };

    register PBWESTFIR_ACT0
    {
        name        "P9 chip PBWESTFIR ACT0";
        scomaddr    0x05011806;
        capture     group default;
        capture     req nonzero("PBWESTFIR");
    };

    register PBWESTFIR_ACT1
    {
        name        "P9 chip PBWESTFIR ACT1";
        scomaddr    0x05011807;
        capture     group default;
        capture     req nonzero("PBWESTFIR");
    };

    ############################################################################
    # P9 chip PBCENTFIR
    ############################################################################

    register PBCENTFIR
    {
        name        "P9 chip PBCENTFIR";
        scomaddr    0x05011c00;
        reset       (&, 0x05011c01);
        mask        (|, 0x05011c05);
        capture     group default;
    };

    register PBCENTFIR_MASK
    {
        name        "P9 chip PBCENTFIR MASK";
        scomaddr    0x05011c03;
        capture     group default;
    };

    register PBCENTFIR_ACT0
    {
        name        "P9 chip PBCENTFIR ACT0";
        scomaddr    0x05011c06;
        capture     group default;
        capture     req nonzero("PBCENTFIR");
    };

    register PBCENTFIR_ACT1
    {
        name        "P9 chip PBCENTFIR ACT1";
        scomaddr    0x05011c07;
        capture     group default;
        capture     req nonzero("PBCENTFIR");
    };

    ############################################################################
    # P9 chip PBEASTFIR
    ############################################################################

    register PBEASTFIR
    {
        name        "P9 chip PBEASTFIR";
        scomaddr    0x05012000;
        reset       (&, 0x05012001);
        mask        (|, 0x05012005);
        capture     group default;
    };

    register PBEASTFIR_MASK
    {
        name        "P9 chip PBEASTFIR MASK";
        scomaddr    0x05012003;
        capture     group default;
    };

    register PBEASTFIR_ACT0
    {
        name        "P9 chip PBEASTFIR ACT0";
        scomaddr    0x05012006;
        capture     group default;
        capture     req nonzero("PBEASTFIR");
    };

    register PBEASTFIR_ACT1
    {
        name        "P9 chip PBEASTFIR ACT1";
        scomaddr    0x05012007;
        capture     group default;
        capture     req nonzero("PBEASTFIR");
    };

    ############################################################################
    # P9 chip PBPPEFIR
    ############################################################################

    register PBPPEFIR
    {
        name        "P9 chip PBPPEFIR";
        scomaddr    0x05012400;
        reset       (&, 0x05012401);
        mask        (|, 0x05012405);
        capture     group default;
    };

    register PBPPEFIR_MASK
    {
        name        "P9 chip PBPPEFIR MASK";
        scomaddr    0x05012403;
        capture     group default;
    };

    register PBPPEFIR_ACT0
    {
        name        "P9 chip PBPPEFIR ACT0";
        scomaddr    0x05012406;
        capture     group default;
        capture     req nonzero("PBPPEFIR");
    };

    register PBPPEFIR_ACT1
    {
        name        "P9 chip PBPPEFIR ACT1";
        scomaddr    0x05012407;
        capture     group default;
        capture     req nonzero("PBPPEFIR");
    };

    ############################################################################
    # P9 chip PBAFIR
    ############################################################################

    register PBAFIR
    {
        name        "P9 chip PBAFIR";
        scomaddr    0x05012840;
        reset       (&, 0x05012841);
        mask        (|, 0x05012845);
        capture     group default;
    };

    register PBAFIR_MASK
    {
        name        "P9 chip PBAFIR MASK";
        scomaddr    0x05012843;
        capture     group default;
    };

    register PBAFIR_ACT0
    {
        name        "P9 chip PBAFIR ACT0";
        scomaddr    0x05012846;
        capture     group default;
        capture     req nonzero("PBAFIR");
    };

    register PBAFIR_ACT1
    {
        name        "P9 chip PBAFIR ACT1";
        scomaddr    0x05012847;
        capture     group default;
        capture     req nonzero("PBAFIR");
    };

    ############################################################################
    # P9 chip PSIHBFIR
    ############################################################################

    register PSIHBFIR
    {
        name        "P9 chip PSIHBFIR";
        scomaddr    0x05012900;
        reset       (&, 0x05012901);
        mask        (|, 0x05012905);
        capture     group default;
    };

    register PSIHBFIR_MASK
    {
        name        "P9 chip PSIHBFIR MASK";
        scomaddr    0x05012903;
        capture     group default;
    };

    register PSIHBFIR_ACT0
    {
        name        "P9 chip PSIHBFIR ACT0";
        scomaddr    0x05012906;
        capture     group default;
        capture     req nonzero("PSIHBFIR");
    };

    register PSIHBFIR_ACT1
    {
        name        "P9 chip PSIHBFIR ACT1";
        scomaddr    0x05012907;
        capture     group default;
        capture     req nonzero("PSIHBFIR");
    };

    ############################################################################
    # P9 chip ENHCAFIR
    ############################################################################

    register ENHCAFIR
    {
        name        "P9 chip ENHCAFIR";
        scomaddr    0x05012940;
        reset       (&, 0x05012941);
        mask        (|, 0x05012945);
        capture     group default;
    };

    register ENHCAFIR_MASK
    {
        name        "P9 chip ENHCAFIR MASK";
        scomaddr    0x05012943;
        capture     group default;
    };

    register ENHCAFIR_ACT0
    {
        name        "P9 chip ENHCAFIR ACT0";
        scomaddr    0x05012946;
        capture     group default;
        capture     req nonzero("ENHCAFIR");
    };

    register ENHCAFIR_ACT1
    {
        name        "P9 chip ENHCAFIR ACT1";
        scomaddr    0x05012947;
        capture     group default;
        capture     req nonzero("ENHCAFIR");
    };

    ############################################################################
    # P9 chip EHHCAFIR
    ############################################################################

    register EHHCAFIR
    {
        name        "P9 chip EHHCAFIR";
        scomaddr    0x05012980;
        reset       (&, 0x05012981);
        mask        (|, 0x05012985);
        capture     group default;
    };

    register EHHCAFIR_MASK
    {
        name        "P9 chip EHHCAFIR MASK";
        scomaddr    0x05012983;
        capture     group default;
    };

    register EHHCAFIR_ACT0
    {
        name        "P9 chip EHHCAFIR ACT0";
        scomaddr    0x05012986;
        capture     group default;
        capture     req nonzero("EHHCAFIR");
    };

    register EHHCAFIR_ACT1
    {
        name        "P9 chip EHHCAFIR ACT1";
        scomaddr    0x05012987;
        capture     group default;
        capture     req nonzero("EHHCAFIR");
    };

    ############################################################################
    # P9 chip PBAMFIR
    ############################################################################

    register PBAMFIR
    {
        name        "P9 chip PBAMFIR";
        scomaddr    0x050129c0;
        reset       (&, 0x050129c1);
        mask        (|, 0x050129c5);
        capture     group default;
    };

    register PBAMFIR_MASK
    {
        name        "P9 chip PBAMFIR MASK";
        scomaddr    0x050129c3;
        capture     group default;
    };

    register PBAMFIR_ACT0
    {
        name        "P9 chip PBAMFIR ACT0";
        scomaddr    0x050129c6;
        capture     group default;
        capture     req nonzero("PBAMFIR");
    };

    register PBAMFIR_ACT1
    {
        name        "P9 chip PBAMFIR ACT1";
        scomaddr    0x050129c7;
        capture     group default;
        capture     req nonzero("PBAMFIR");
    };

    ############################################################################
    # P9 chip PBICQFIR
    ############################################################################

    register PBICQFIR
    {
        name        "P9 chip PBICQFIR";
        scomaddr    0x05012c00;
        reset       (&, 0x05012c01);
        mask        (|, 0x05012c05);
        capture     group default;
    };

    register PBICQFIR_MASK
    {
        name        "P9 chip PBICQFIR MASK";
        scomaddr    0x05012c03;
        capture     group default;
    };

    register PBICQFIR_ACT0
    {
        name        "P9 chip PBICQFIR ACT0";
        scomaddr    0x05012c06;
        capture     group default;
        capture     req nonzero("PBICQFIR");
    };

    register PBICQFIR_ACT1
    {
        name        "P9 chip PBICQFIR ACT1";
        scomaddr    0x05012c07;
        capture     group default;
        capture     req nonzero("PBICQFIR");
    };

    ############################################################################
    # P9 chip NMMUFIR
    ############################################################################

    register NMMUFIR
    {
        name        "P9 chip NMMUFIR";
        scomaddr    0x05012c40;
        reset       (&, 0x05012c41);
        mask        (|, 0x05012c45);
        capture     group default;
    };

    register NMMUFIR_MASK
    {
        name        "P9 chip NMMUFIR MASK";
        scomaddr    0x05012c43;
        capture     group default;
    };

    register NMMUFIR_ACT0
    {
        name        "P9 chip NMMUFIR ACT0";
        scomaddr    0x05012c46;
        capture     group default;
        capture     req nonzero("NMMUFIR");
    };

    register NMMUFIR_ACT1
    {
        name        "P9 chip NMMUFIR ACT1";
        scomaddr    0x05012c47;
        capture     group default;
        capture     req nonzero("NMMUFIR");
    };

    ############################################################################
    # P9 chip INTCQFIR
    ############################################################################

    register INTCQFIR
    {
        name        "P9 chip INTCQFIR";
        scomaddr    0x05013030;
        reset       (&, 0x05013031);
        mask        (|, 0x05013035);
        capture     group default;
    };

    register INTCQFIR_MASK
    {
        name        "P9 chip INTCQFIR MASK";
        scomaddr    0x05013033;
        capture     group default;
    };

    register INTCQFIR_ACT0
    {
        name        "P9 chip INTCQFIR ACT0";
        scomaddr    0x05013036;
        capture     group default;
        capture     req nonzero("INTCQFIR");
    };

    register INTCQFIR_ACT1
    {
        name        "P9 chip INTCQFIR ACT1";
        scomaddr    0x05013037;
        capture     group default;
        capture     req nonzero("INTCQFIR");
    };

    ############################################################################
    # P9 chip PBIOEFIR
    ############################################################################

    register PBIOEFIR
    {
        name        "P9 chip PBIOEFIR";
        scomaddr    0x05013400;
        reset       (&, 0x05013401);
        mask        (|, 0x05013405);
        capture     group default;
    };

    register PBIOEFIR_MASK
    {
        name        "P9 chip PBIOEFIR MASK";
        scomaddr    0x05013403;
        capture     group default;
    };

    register PBIOEFIR_ACT0
    {
        name        "P9 chip PBIOEFIR ACT0";
        scomaddr    0x05013406;
        capture     group default;
        capture     req nonzero("PBIOEFIR");
    };

    register PBIOEFIR_ACT1
    {
        name        "P9 chip PBIOEFIR ACT1";
        scomaddr    0x05013407;
        capture     group default;
        capture     req nonzero("PBIOEFIR");
    };

    ############################################################################
    # P9 chip PBIOOFIR
    ############################################################################

    register PBIOOFIR
    {
        name        "P9 chip PBIOOFIR";
        scomaddr    0x05013800;
        reset       (&, 0x05013801);
        mask        (|, 0x05013805);
        capture     group default;
    };

    register PBIOOFIR_MASK
    {
        name        "P9 chip PBIOOFIR MASK";
        scomaddr    0x05013803;
        capture     group default;
    };

    register PBIOOFIR_ACT0
    {
        name        "P9 chip PBIOOFIR ACT0";
        scomaddr    0x05013806;
        capture     group default;
        capture     req nonzero("PBIOOFIR");
    };

    register PBIOOFIR_ACT1
    {
        name        "P9 chip PBIOOFIR ACT1";
        scomaddr    0x05013807;
        capture     group default;
        capture     req nonzero("PBIOOFIR");
    };

    ############################################################################
    # XB Chiplet FIR
    ############################################################################

    register XB_CHIPLET_CS_FIR
    {
        name        "XB Chiplet Checkstop FIR";
        scomaddr    0x06040000;
        capture     group default;
    };

    register XB_CHIPLET_RE_FIR
    {
        name        "XB Chiplet Recoverable FIR";
        scomaddr    0x06040001;
        capture     group default;
    };

    register XB_CHIPLET_FIR_MASK
    {
        name        "XB Chiplet FIR MASK";
        scomaddr    0x06040002;
        capture     group default;
    };

    ############################################################################
    # XB Chiplet Unit Checkstop FIR
    ############################################################################

    register XB_CHIPLET_UCS_FIR
    {
        name        "XB Chiplet Unit Checkstop FIR";
        scomaddr    0x06040018;
        capture     group default;
    };

    register XB_CHIPLET_UCS_FIR_MASK
    {
        name        "XB Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x06040019;
        capture     group default;
    };

    ############################################################################
    # P9 chip XB_LFIR
    ############################################################################

    register XB_LFIR
    {
        name        "P9 chip XB_LFIR";
        scomaddr    0x0604000a;
        reset       (&, 0x0604000b);
        mask        (|, 0x0604000f);
        capture     group default;
    };

    register XB_LFIR_MASK
    {
        name        "P9 chip XB_LFIR MASK";
        scomaddr    0x0604000d;
        capture     group default;
    };

    register XB_LFIR_ACT0
    {
        name        "P9 chip XB_LFIR ACT0";
        scomaddr    0x06040010;
        capture     group default;
        capture     req nonzero("XB_LFIR");
    };

    register XB_LFIR_ACT1
    {
        name        "P9 chip XB_LFIR ACT1";
        scomaddr    0x06040011;
        capture     group default;
        capture     req nonzero("XB_LFIR");
    };

    ############################################################################
    # P9 chip XBPPEFIR
    ############################################################################

    register XBPPEFIR
    {
        name        "P9 chip XBPPEFIR";
        scomaddr    0x06010840;
        reset       (&, 0x06010841);
        mask        (|, 0x06010845);
        capture     group default;
    };

    register XBPPEFIR_MASK
    {
        name        "P9 chip XBPPEFIR MASK";
        scomaddr    0x06010843;
        capture     group default;
    };

    register XBPPEFIR_ACT0
    {
        name        "P9 chip XBPPEFIR ACT0";
        scomaddr    0x06010846;
        capture     group default;
        capture     req nonzero("XBPPEFIR");
    };

    register XBPPEFIR_ACT1
    {
        name        "P9 chip XBPPEFIR ACT1";
        scomaddr    0x06010847;
        capture     group default;
        capture     req nonzero("XBPPEFIR");
    };

    ############################################################################
    # MC0 Chiplet FIR
    ############################################################################

    register MC0_CHIPLET_CS_FIR
    {
        name        "MC0 Chiplet Checkstop FIR";
        scomaddr    0x07040000;
        capture     group default;
    };

    register MC0_CHIPLET_RE_FIR
    {
        name        "MC0 Chiplet Recoverable FIR";
        scomaddr    0x07040001;
        capture     group default;
    };

    register MC0_CHIPLET_FIR_MASK
    {
        name        "MC0 Chiplet FIR MASK";
        scomaddr    0x07040002;
        capture     group default;
    };

    ############################################################################
    # MC0 Chiplet Unit Checkstop FIR
    ############################################################################

    register MC0_CHIPLET_UCS_FIR
    {
        name        "MC0 Chiplet Unit Checkstop FIR";
        scomaddr    0x07040018;
        capture     group default;
    };

    register MC0_CHIPLET_UCS_FIR_MASK
    {
        name        "MC0 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x07040019;
        capture     group default;
    };

    ############################################################################
    # MC0 Chiplet Host Attention FIR
    ############################################################################

    register MC0_CHIPLET_HA_FIR
    {
        name        "MC0 Chiplet Host Attention FIR";
        scomaddr    0x07040009;
        capture     group default;
    };

    register MC0_CHIPLET_HA_FIR_MASK
    {
        name        "MC0 Chiplet Host Attention FIR MASK";
        scomaddr    0x0704001a;
        capture     group default;
    };

    ############################################################################
    # P9 chip MC_LFIR 0
    ############################################################################

    register MC_LFIR_0
    {
        name        "P9 chip MC_LFIR 0";
        scomaddr    0x0704000a;
        reset       (&, 0x0704000b);
        mask        (|, 0x0704000f);
        capture     group default;
    };

    register MC_LFIR_0_MASK
    {
        name        "P9 chip MC_LFIR 0 MASK";
        scomaddr    0x0704000d;
        capture     group default;
    };

    register MC_LFIR_0_ACT0
    {
        name        "P9 chip MC_LFIR 0 ACT0";
        scomaddr    0x07040010;
        capture     group default;
        capture     req nonzero("MC_LFIR_0");
    };

    register MC_LFIR_0_ACT1
    {
        name        "P9 chip MC_LFIR 0 ACT1";
        scomaddr    0x07040011;
        capture     group default;
        capture     req nonzero("MC_LFIR_0");
    };

    ############################################################################
    # MC1 Chiplet FIR
    ############################################################################

    register MC1_CHIPLET_CS_FIR
    {
        name        "MC1 Chiplet Checkstop FIR";
        scomaddr    0x08040000;
        capture     group default;
    };

    register MC1_CHIPLET_RE_FIR
    {
        name        "MC1 Chiplet Recoverable FIR";
        scomaddr    0x08040001;
        capture     group default;
    };

    register MC1_CHIPLET_FIR_MASK
    {
        name        "MC1 Chiplet FIR MASK";
        scomaddr    0x08040002;
        capture     group default;
    };

    ############################################################################
    # MC1 Chiplet Unit Checkstop FIR
    ############################################################################

    register MC1_CHIPLET_UCS_FIR
    {
        name        "MC1 Chiplet Unit Checkstop FIR";
        scomaddr    0x08040018;
        capture     group default;
    };

    register MC1_CHIPLET_UCS_FIR_MASK
    {
        name        "MC1 Chiplet Unit Checkstop FIR MASK";
        scomaddr    0x08040019;
        capture     group default;
    };

    ############################################################################
    # MC1 Chiplet Host Attention FIR
    ############################################################################

    register MC1_CHIPLET_HA_FIR
    {
        name        "MC1 Chiplet Host Attention FIR";
        scomaddr    0x08040009;
        capture     group default;
    };

    register MC1_CHIPLET_HA_FIR_MASK
    {
        name        "MC1 Chiplet Host Attention FIR MASK";
        scomaddr    0x0804001a;
        capture     group default;
    };

    ############################################################################
    # P9 chip MC_LFIR 1
    ############################################################################

    register MC_LFIR_1
    {
        name        "P9 chip MC_LFIR 1";
        scomaddr    0x0804000a;
        reset       (&, 0x0804000b);
        mask        (|, 0x0804000f);
        capture     group default;
    };

    register MC_LFIR_1_MASK
    {
        name        "P9 chip MC_LFIR 1 MASK";
        scomaddr    0x0804000d;
        capture     group default;
    };

    register MC_LFIR_1_ACT0
    {
        name        "P9 chip MC_LFIR 1 ACT0";
        scomaddr    0x08040010;
        capture     group default;
        capture     req nonzero("MC_LFIR_1");
    };

    register MC_LFIR_1_ACT1
    {
        name        "P9 chip MC_LFIR 1 ACT1";
        scomaddr    0x08040011;
        capture     group default;
        capture     req nonzero("MC_LFIR_1");
    };

    ############################################################################
    # PCI0 Chiplet FIR
    ############################################################################

    register PCI0_CHIPLET_CS_FIR
    {
        name        "PCI0 Chiplet Checkstop FIR";
        scomaddr    0x0d040000;
        capture     group default;
    };

    register PCI0_CHIPLET_RE_FIR
    {
        name        "PCI0 Chiplet Recoverable FIR";
        scomaddr    0x0d040001;
        capture     group default;
    };

    register PCI0_CHIPLET_FIR_MASK
    {
        name        "PCI0 Chiplet FIR MASK";
        scomaddr    0x0d040002;
        capture     group default;
    };

    ############################################################################
    # PCI1 Chiplet FIR
    ############################################################################

    register PCI1_CHIPLET_CS_FIR
    {
        name        "PCI1 Chiplet Checkstop FIR";
        scomaddr    0x0e040000;
        capture     group default;
    };

    register PCI1_CHIPLET_RE_FIR
    {
        name        "PCI1 Chiplet Recoverable FIR";
        scomaddr    0x0e040001;
        capture     group default;
    };

    register PCI1_CHIPLET_FIR_MASK
    {
        name        "PCI1 Chiplet FIR MASK";
        scomaddr    0x0e040002;
        capture     group default;
    };

    ############################################################################
    # PCI2 Chiplet FIR
    ############################################################################

    register PCI2_CHIPLET_CS_FIR
    {
        name        "PCI2 Chiplet Checkstop FIR";
        scomaddr    0x0f040000;
        capture     group default;
    };

    register PCI2_CHIPLET_RE_FIR
    {
        name        "PCI2 Chiplet Recoverable FIR";
        scomaddr    0x0f040001;
        capture     group default;
    };

    register PCI2_CHIPLET_FIR_MASK
    {
        name        "PCI2 Chiplet FIR MASK";
        scomaddr    0x0f040002;
        capture     group default;
    };

    ############################################################################
    # Non-FIR Registers
    ############################################################################
    register CFAM_FSI_STATUS
    {
        name        "TPC.FSI.FSI2PIB.STATUS";
        scomaddr    0x00001007;
        capture     group never;
    };

    register CFAM_FSI_GP7
    {
        name        "TPC.FSI.FSI_MAILBOX.FSXCOMP.FSXLOG.FSIGP7";
        scomaddr    0x00002816;
        capture     group never;
    };

    register TODWOF
    {
        name        "Time of Day / WOF Counter";
        scomaddr    0x00040020;
        capture     group default;
    };

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Global Attention FIR
################################################################################

rule rGLOBAL_FIR
{
  CHECK_STOP:
    GLOBAL_CS_FIR;
  RECOVERABLE:
    GLOBAL_RE_FIR;
};

group gGLOBAL_FIR attntype CHECK_STOP, RECOVERABLE filter singlebit
{
    /** GLOBAL_FIR[1]
     *  Attention from TP chiplet
     */
    (rGLOBAL_FIR, bit(1)) ? analyze(gTP_CHIPLET_FIR);

    /** GLOBAL_FIR[2]
     *  Attention from N0 chiplet
     */
    (rGLOBAL_FIR, bit(2)) ? analyze(gN0_CHIPLET_FIR);

    /** GLOBAL_FIR[3]
     *  Attention from N1 chiplet
     */
    (rGLOBAL_FIR, bit(3)) ? analyze(gN1_CHIPLET_FIR);

    /** GLOBAL_FIR[4]
     *  Attention from N2 chiplet
     */
    (rGLOBAL_FIR, bit(4)) ? analyze(gN2_CHIPLET_FIR);

    /** GLOBAL_FIR[5]
     *  Attention from N3 chiplet
     */
    (rGLOBAL_FIR, bit(5)) ? analyze(gN3_CHIPLET_FIR);

    /** GLOBAL_FIR[6]
     *  Attention from XB chiplet
     */
    (rGLOBAL_FIR, bit(6)) ? analyze(gXB_CHIPLET_FIR);

    /** GLOBAL_FIR[7]
     *  Attention from MC0 chiplet
     */
    (rGLOBAL_FIR, bit(7)) ? analyze(gMC0_CHIPLET_FIR);

    /** GLOBAL_FIR[8]
     *  Attention from MC1 chiplet
     */
    (rGLOBAL_FIR, bit(8)) ? analyze(gMC1_CHIPLET_FIR);

    /** GLOBAL_FIR[9]
     *  Attention from OB 0 chiplet
     */
    (rGLOBAL_FIR, bit(9)) ? analyzeConnectedOBUS0;

    /** GLOBAL_FIR[12]
     *  Attention from OB 3 chiplet
     */
    (rGLOBAL_FIR, bit(12)) ? analyzeConnectedOBUS3;

    /** GLOBAL_FIR[13]
     *  Attention from PCI0 chiplet
     */
    (rGLOBAL_FIR, bit(13)) ? analyze(gPCI0_CHIPLET_FIR);

    /** GLOBAL_FIR[14]
     *  Attention from PCI1 chiplet
     */
    (rGLOBAL_FIR, bit(14)) ? analyze(gPCI1_CHIPLET_FIR);

    /** GLOBAL_FIR[15]
     *  Attention from PCI2 chiplet
     */
    (rGLOBAL_FIR, bit(15)) ? analyze(gPCI2_CHIPLET_FIR);

    /** GLOBAL_FIR[16]
     *  Attention from EQ 0 chiplet
     */
    (rGLOBAL_FIR, bit(16)) ? analyzeConnectedEQ0;

    /** GLOBAL_FIR[17]
     *  Attention from EQ 1 chiplet
     */
    (rGLOBAL_FIR, bit(17)) ? analyzeConnectedEQ1;

    /** GLOBAL_FIR[18]
     *  Attention from EQ 2 chiplet
     */
    (rGLOBAL_FIR, bit(18)) ? analyzeConnectedEQ2;

    /** GLOBAL_FIR[19]
     *  Attention from EQ 3 chiplet
     */
    (rGLOBAL_FIR, bit(19)) ? analyzeConnectedEQ3;

    /** GLOBAL_FIR[20]
     *  Attention from EQ 4 chiplet
     */
    (rGLOBAL_FIR, bit(20)) ? analyzeConnectedEQ4;

    /** GLOBAL_FIR[21]
     *  Attention from EQ 5 chiplet
     */
    (rGLOBAL_FIR, bit(21)) ? analyzeConnectedEQ5;

    /** GLOBAL_FIR[32]
     *  Attention from EC 0 chiplet
     */
    (rGLOBAL_FIR, bit(32)) ? analyzeConnectedEC0;

    /** GLOBAL_FIR[33]
     *  Attention from EC 1 chiplet
     */
    (rGLOBAL_FIR, bit(33)) ? analyzeConnectedEC1;

    /** GLOBAL_FIR[34]
     *  Attention from EC 2 chiplet
     */
    (rGLOBAL_FIR, bit(34)) ? analyzeConnectedEC2;

    /** GLOBAL_FIR[35]
     *  Attention from EC 3 chiplet
     */
    (rGLOBAL_FIR, bit(35)) ? analyzeConnectedEC3;

    /** GLOBAL_FIR[36]
     *  Attention from EC 4 chiplet
     */
    (rGLOBAL_FIR, bit(36)) ? analyzeConnectedEC4;

    /** GLOBAL_FIR[37]
     *  Attention from EC 5 chiplet
     */
    (rGLOBAL_FIR, bit(37)) ? analyzeConnectedEC5;

    /** GLOBAL_FIR[38]
     *  Attention from EC 6 chiplet
     */
    (rGLOBAL_FIR, bit(38)) ? analyzeConnectedEC6;

    /** GLOBAL_FIR[39]
     *  Attention from EC 7 chiplet
     */
    (rGLOBAL_FIR, bit(39)) ? analyzeConnectedEC7;

    /** GLOBAL_FIR[40]
     *  Attention from EC 8 chiplet
     */
    (rGLOBAL_FIR, bit(40)) ? analyzeConnectedEC8;

    /** GLOBAL_FIR[41]
     *  Attention from EC 9 chiplet
     */
    (rGLOBAL_FIR, bit(41)) ? analyzeConnectedEC9;

    /** GLOBAL_FIR[42]
     *  Attention from EC 10 chiplet
     */
    (rGLOBAL_FIR, bit(42)) ? analyzeConnectedEC10;

    /** GLOBAL_FIR[43]
     *  Attention from EC 11 chiplet
     */
    (rGLOBAL_FIR, bit(43)) ? analyzeConnectedEC11;

    /** GLOBAL_FIR[44]
     *  Attention from EC 12 chiplet
     */
    (rGLOBAL_FIR, bit(44)) ? analyzeConnectedEC12;

    /** GLOBAL_FIR[45]
     *  Attention from EC 13 chiplet
     */
    (rGLOBAL_FIR, bit(45)) ? analyzeConnectedEC13;

    /** GLOBAL_FIR[46]
     *  Attention from EC 14 chiplet
     */
    (rGLOBAL_FIR, bit(46)) ? analyzeConnectedEC14;

    /** GLOBAL_FIR[47]
     *  Attention from EC 15 chiplet
     */
    (rGLOBAL_FIR, bit(47)) ? analyzeConnectedEC15;

    /** GLOBAL_FIR[48]
     *  Attention from EC 16 chiplet
     */
    (rGLOBAL_FIR, bit(48)) ? analyzeConnectedEC16;

    /** GLOBAL_FIR[49]
     *  Attention from EC 17 chiplet
     */
    (rGLOBAL_FIR, bit(49)) ? analyzeConnectedEC17;

    /** GLOBAL_FIR[50]
     *  Attention from EC 18 chiplet
     */
    (rGLOBAL_FIR, bit(50)) ? analyzeConnectedEC18;

    /** GLOBAL_FIR[51]
     *  Attention from EC 19 chiplet
     */
    (rGLOBAL_FIR, bit(51)) ? analyzeConnectedEC19;

    /** GLOBAL_FIR[52]
     *  Attention from EC 20 chiplet
     */
    (rGLOBAL_FIR, bit(52)) ? analyzeConnectedEC20;

    /** GLOBAL_FIR[53]
     *  Attention from EC 21 chiplet
     */
    (rGLOBAL_FIR, bit(53)) ? analyzeConnectedEC21;

    /** GLOBAL_FIR[54]
     *  Attention from EC 22 chiplet
     */
    (rGLOBAL_FIR, bit(54)) ? analyzeConnectedEC22;

    /** GLOBAL_FIR[55]
     *  Attention from EC 23 chiplet
     */
    (rGLOBAL_FIR, bit(55)) ? analyzeConnectedEC23;

};

################################################################################
# Global Unit Checkstop FIR
################################################################################

rule rGLOBAL_UCS_FIR
{
  UNIT_CS:
    GLOBAL_UCS_FIR;
};

group gGLOBAL_UCS_FIR attntype UNIT_CS filter singlebit
{
    /** GLOBAL_UCS_FIR[2]
     *  Attention from N0 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(2)) ? analyze(gN0_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[3]
     *  Attention from N1 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(3)) ? analyze(gN1_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[4]
     *  Attention from N2 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(4)) ? analyze(gN2_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[5]
     *  Attention from N3 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(5)) ? analyze(gN3_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[6]
     *  Attention from XB chiplet
     */
    (rGLOBAL_UCS_FIR, bit(6)) ? analyze(gXB_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[7]
     *  Attention from MC0 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(7)) ? analyze(gMC0_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[8]
     *  Attention from MC1 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(8)) ? analyze(gMC1_CHIPLET_UCS_FIR);

    /** GLOBAL_UCS_FIR[9]
     *  Attention from OB 0 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(9)) ? analyzeConnectedOBUS0;

    /** GLOBAL_UCS_FIR[12]
     *  Attention from OB 3 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(12)) ? analyzeConnectedOBUS3;

    /** GLOBAL_UCS_FIR[32]
     *  Attention from EC 0 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(32)) ? analyzeConnectedEC0;

    /** GLOBAL_UCS_FIR[33]
     *  Attention from EC 1 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(33)) ? analyzeConnectedEC1;

    /** GLOBAL_UCS_FIR[34]
     *  Attention from EC 2 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(34)) ? analyzeConnectedEC2;

    /** GLOBAL_UCS_FIR[35]
     *  Attention from EC 3 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(35)) ? analyzeConnectedEC3;

    /** GLOBAL_UCS_FIR[36]
     *  Attention from EC 4 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(36)) ? analyzeConnectedEC4;

    /** GLOBAL_UCS_FIR[37]
     *  Attention from EC 5 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(37)) ? analyzeConnectedEC5;

    /** GLOBAL_UCS_FIR[38]
     *  Attention from EC 6 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(38)) ? analyzeConnectedEC6;

    /** GLOBAL_UCS_FIR[39]
     *  Attention from EC 7 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(39)) ? analyzeConnectedEC7;

    /** GLOBAL_UCS_FIR[40]
     *  Attention from EC 8 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(40)) ? analyzeConnectedEC8;

    /** GLOBAL_UCS_FIR[41]
     *  Attention from EC 9 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(41)) ? analyzeConnectedEC9;

    /** GLOBAL_UCS_FIR[42]
     *  Attention from EC 10 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(42)) ? analyzeConnectedEC10;

    /** GLOBAL_UCS_FIR[43]
     *  Attention from EC 11 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(43)) ? analyzeConnectedEC11;

    /** GLOBAL_UCS_FIR[44]
     *  Attention from EC 12 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(44)) ? analyzeConnectedEC12;

    /** GLOBAL_UCS_FIR[45]
     *  Attention from EC 13 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(45)) ? analyzeConnectedEC13;

    /** GLOBAL_UCS_FIR[46]
     *  Attention from EC 14 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(46)) ? analyzeConnectedEC14;

    /** GLOBAL_UCS_FIR[47]
     *  Attention from EC 15 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(47)) ? analyzeConnectedEC15;

    /** GLOBAL_UCS_FIR[48]
     *  Attention from EC 16 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(48)) ? analyzeConnectedEC16;

    /** GLOBAL_UCS_FIR[49]
     *  Attention from EC 17 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(49)) ? analyzeConnectedEC17;

    /** GLOBAL_UCS_FIR[50]
     *  Attention from EC 18 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(50)) ? analyzeConnectedEC18;

    /** GLOBAL_UCS_FIR[51]
     *  Attention from EC 19 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(51)) ? analyzeConnectedEC19;

    /** GLOBAL_UCS_FIR[52]
     *  Attention from EC 20 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(52)) ? analyzeConnectedEC20;

    /** GLOBAL_UCS_FIR[53]
     *  Attention from EC 21 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(53)) ? analyzeConnectedEC21;

    /** GLOBAL_UCS_FIR[54]
     *  Attention from EC 22 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(54)) ? analyzeConnectedEC22;

    /** GLOBAL_UCS_FIR[55]
     *  Attention from EC 23 chiplet
     */
    (rGLOBAL_UCS_FIR, bit(55)) ? analyzeConnectedEC23;

};

################################################################################
# Global Host Attention FIR
################################################################################

rule rGLOBAL_HA_FIR
{
  HOST_ATTN:
    GLOBAL_HA_FIR;
};

group gGLOBAL_HA_FIR attntype HOST_ATTN filter singlebit
{
    /** GLOBAL_HA_FIR[3]
     *  Attention from N1 chiplet
     */
    (rGLOBAL_HA_FIR, bit(3)) ? analyze(gN1_CHIPLET_HA_FIR);

    /** GLOBAL_HA_FIR[5]
     *  Attention from N3 chiplet
     */
    (rGLOBAL_HA_FIR, bit(5)) ? analyze(gN3_CHIPLET_HA_FIR);

    /** GLOBAL_HA_FIR[7]
     *  Attention from MC0 chiplet
     */
    (rGLOBAL_HA_FIR, bit(7)) ? analyze(gMC0_CHIPLET_HA_FIR);

    /** GLOBAL_HA_FIR[8]
     *  Attention from MC1 chiplet
     */
    (rGLOBAL_HA_FIR, bit(8)) ? analyze(gMC1_CHIPLET_HA_FIR);

};

################################################################################
# TP Chiplet FIR
################################################################################

rule rTP_CHIPLET_FIR
{
  CHECK_STOP:
     TP_CHIPLET_CS_FIR       & ~TP_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (TP_CHIPLET_RE_FIR >> 2) & ~TP_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gTP_CHIPLET_FIR filter singlebit
{
    /** TP_CHIPLET_FIR[3]
     *  Attention from TP_LFIR
     */
    (rTP_CHIPLET_FIR, bit(3)) ? analyze(gTP_LFIR);

    /** TP_CHIPLET_FIR[4]
     *  Attention from OCCFIR
     */
    (rTP_CHIPLET_FIR, bit(4)) ? analyze(gOCCFIR);

};

################################################################################
# P9 chip TP_LFIR
################################################################################

rule rTP_LFIR
{
  CHECK_STOP:
    TP_LFIR & ~TP_LFIR_MASK & ~TP_LFIR_ACT0 & ~TP_LFIR_ACT1;
  RECOVERABLE:
    TP_LFIR & ~TP_LFIR_MASK & ~TP_LFIR_ACT0 &  TP_LFIR_ACT1;
};

group gTP_LFIR filter singlebit
{
    /** TP_LFIR[0]
     *  
     */
    (rTP_LFIR, bit(0)) ? TBDDefaultCallout;

    /** TP_LFIR[1]
     *  
     */
    (rTP_LFIR, bit(1)) ? TBDDefaultCallout;

    /** TP_LFIR[2]
     *  
     */
    (rTP_LFIR, bit(2)) ? TBDDefaultCallout;

    /** TP_LFIR[3]
     *  
     */
    (rTP_LFIR, bit(3)) ? TBDDefaultCallout;

    /** TP_LFIR[4]
     *  
     */
    (rTP_LFIR, bit(4)) ? TBDDefaultCallout;

    /** TP_LFIR[5]
     *  
     */
    (rTP_LFIR, bit(5)) ? TBDDefaultCallout;

    /** TP_LFIR[6]
     *  
     */
    (rTP_LFIR, bit(6)) ? TBDDefaultCallout;

    /** TP_LFIR[7]
     *  
     */
    (rTP_LFIR, bit(7)) ? TBDDefaultCallout;

    /** TP_LFIR[8]
     *  
     */
    (rTP_LFIR, bit(8)) ? TBDDefaultCallout;

    /** TP_LFIR[9]
     *  
     */
    (rTP_LFIR, bit(9)) ? TBDDefaultCallout;

    /** TP_LFIR[10]
     *  
     */
    (rTP_LFIR, bit(10)) ? TBDDefaultCallout;

    /** TP_LFIR[11]
     *  
     */
    (rTP_LFIR, bit(11)) ? TBDDefaultCallout;

    /** TP_LFIR[12]
     *  
     */
    (rTP_LFIR, bit(12)) ? TBDDefaultCallout;

    /** TP_LFIR[13]
     *  
     */
    (rTP_LFIR, bit(13)) ? TBDDefaultCallout;

    /** TP_LFIR[14]
     *  
     */
    (rTP_LFIR, bit(14)) ? TBDDefaultCallout;

    /** TP_LFIR[15]
     *  
     */
    (rTP_LFIR, bit(15)) ? TBDDefaultCallout;

    /** TP_LFIR[16]
     *  
     */
    (rTP_LFIR, bit(16)) ? TBDDefaultCallout;

    /** TP_LFIR[17]
     *  
     */
    (rTP_LFIR, bit(17)) ? TBDDefaultCallout;

    /** TP_LFIR[18]
     *  
     */
    (rTP_LFIR, bit(18)) ? TBDDefaultCallout;

    /** TP_LFIR[19]
     *  
     */
    (rTP_LFIR, bit(19)) ? TBDDefaultCallout;

    /** TP_LFIR[20]
     *  
     */
    (rTP_LFIR, bit(20)) ? TBDDefaultCallout;

    /** TP_LFIR[21]
     *  
     */
    (rTP_LFIR, bit(21)) ? TBDDefaultCallout;

    /** TP_LFIR[22]
     *  
     */
    (rTP_LFIR, bit(22)) ? TBDDefaultCallout;

    /** TP_LFIR[23]
     *  
     */
    (rTP_LFIR, bit(23)) ? TBDDefaultCallout;

    /** TP_LFIR[24]
     *  
     */
    (rTP_LFIR, bit(24)) ? TBDDefaultCallout;

    /** TP_LFIR[25]
     *  
     */
    (rTP_LFIR, bit(25)) ? TBDDefaultCallout;

    /** TP_LFIR[26]
     *  
     */
    (rTP_LFIR, bit(26)) ? TBDDefaultCallout;

    /** TP_LFIR[27]
     *  
     */
    (rTP_LFIR, bit(27)) ? TBDDefaultCallout;

    /** TP_LFIR[28]
     *  
     */
    (rTP_LFIR, bit(28)) ? TBDDefaultCallout;

    /** TP_LFIR[29]
     *  
     */
    (rTP_LFIR, bit(29)) ? TBDDefaultCallout;

    /** TP_LFIR[30]
     *  
     */
    (rTP_LFIR, bit(30)) ? TBDDefaultCallout;

    /** TP_LFIR[31]
     *  
     */
    (rTP_LFIR, bit(31)) ? TBDDefaultCallout;

    /** TP_LFIR[32]
     *  
     */
    (rTP_LFIR, bit(32)) ? TBDDefaultCallout;

    /** TP_LFIR[33]
     *  
     */
    (rTP_LFIR, bit(33)) ? TBDDefaultCallout;

    /** TP_LFIR[34]
     *  
     */
    (rTP_LFIR, bit(34)) ? TBDDefaultCallout;

    /** TP_LFIR[35]
     *  
     */
    (rTP_LFIR, bit(35)) ? TBDDefaultCallout;

    /** TP_LFIR[36]
     *  
     */
    (rTP_LFIR, bit(36)) ? TBDDefaultCallout;

    /** TP_LFIR[37]
     *  
     */
    (rTP_LFIR, bit(37)) ? TBDDefaultCallout;

    /** TP_LFIR[38]
     *  
     */
    (rTP_LFIR, bit(38)) ? TBDDefaultCallout;

    /** TP_LFIR[39]
     *  
     */
    (rTP_LFIR, bit(39)) ? TBDDefaultCallout;

    /** TP_LFIR[40]
     *  
     */
    (rTP_LFIR, bit(40)) ? TBDDefaultCallout;

    /** TP_LFIR[41]
     *  
     */
    (rTP_LFIR, bit(41)) ? TBDDefaultCallout;

    /** TP_LFIR[42]
     *  
     */
    (rTP_LFIR, bit(42)) ? TBDDefaultCallout;

    /** TP_LFIR[43]
     *  
     */
    (rTP_LFIR, bit(43)) ? TBDDefaultCallout;

    /** TP_LFIR[44]
     *  
     */
    (rTP_LFIR, bit(44)) ? TBDDefaultCallout;

    /** TP_LFIR[45]
     *  
     */
    (rTP_LFIR, bit(45)) ? TBDDefaultCallout;

    /** TP_LFIR[46]
     *  
     */
    (rTP_LFIR, bit(46)) ? TBDDefaultCallout;

    /** TP_LFIR[47]
     *  
     */
    (rTP_LFIR, bit(47)) ? TBDDefaultCallout;

    /** TP_LFIR[48]
     *  
     */
    (rTP_LFIR, bit(48)) ? TBDDefaultCallout;

    /** TP_LFIR[49]
     *  
     */
    (rTP_LFIR, bit(49)) ? TBDDefaultCallout;

    /** TP_LFIR[50]
     *  
     */
    (rTP_LFIR, bit(50)) ? TBDDefaultCallout;

    /** TP_LFIR[51]
     *  
     */
    (rTP_LFIR, bit(51)) ? TBDDefaultCallout;

    /** TP_LFIR[52]
     *  
     */
    (rTP_LFIR, bit(52)) ? TBDDefaultCallout;

    /** TP_LFIR[53]
     *  
     */
    (rTP_LFIR, bit(53)) ? TBDDefaultCallout;

    /** TP_LFIR[54]
     *  
     */
    (rTP_LFIR, bit(54)) ? TBDDefaultCallout;

    /** TP_LFIR[55]
     *  
     */
    (rTP_LFIR, bit(55)) ? TBDDefaultCallout;

    /** TP_LFIR[56]
     *  
     */
    (rTP_LFIR, bit(56)) ? TBDDefaultCallout;

    /** TP_LFIR[57]
     *  
     */
    (rTP_LFIR, bit(57)) ? TBDDefaultCallout;

    /** TP_LFIR[58]
     *  
     */
    (rTP_LFIR, bit(58)) ? TBDDefaultCallout;

    /** TP_LFIR[59]
     *  
     */
    (rTP_LFIR, bit(59)) ? TBDDefaultCallout;

    /** TP_LFIR[60]
     *  
     */
    (rTP_LFIR, bit(60)) ? TBDDefaultCallout;

    /** TP_LFIR[61]
     *  
     */
    (rTP_LFIR, bit(61)) ? TBDDefaultCallout;

    /** TP_LFIR[62]
     *  
     */
    (rTP_LFIR, bit(62)) ? TBDDefaultCallout;

    /** TP_LFIR[63]
     *  
     */
    (rTP_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip OCCFIR
################################################################################

rule rOCCFIR
{
  CHECK_STOP:
    OCCFIR & ~OCCFIR_MASK & ~OCCFIR_ACT0 & ~OCCFIR_ACT1;
  RECOVERABLE:
    OCCFIR & ~OCCFIR_MASK & ~OCCFIR_ACT0 &  OCCFIR_ACT1;
};

group gOCCFIR filter singlebit
{
    /** OCCFIR[0]
     *  
     */
    (rOCCFIR, bit(0)) ? TBDDefaultCallout;

    /** OCCFIR[1]
     *  
     */
    (rOCCFIR, bit(1)) ? TBDDefaultCallout;

    /** OCCFIR[2]
     *  
     */
    (rOCCFIR, bit(2)) ? TBDDefaultCallout;

    /** OCCFIR[3]
     *  
     */
    (rOCCFIR, bit(3)) ? TBDDefaultCallout;

    /** OCCFIR[4]
     *  
     */
    (rOCCFIR, bit(4)) ? TBDDefaultCallout;

    /** OCCFIR[5]
     *  
     */
    (rOCCFIR, bit(5)) ? TBDDefaultCallout;

    /** OCCFIR[6]
     *  
     */
    (rOCCFIR, bit(6)) ? TBDDefaultCallout;

    /** OCCFIR[7]
     *  
     */
    (rOCCFIR, bit(7)) ? TBDDefaultCallout;

    /** OCCFIR[8]
     *  
     */
    (rOCCFIR, bit(8)) ? TBDDefaultCallout;

    /** OCCFIR[9]
     *  
     */
    (rOCCFIR, bit(9)) ? TBDDefaultCallout;

    /** OCCFIR[10]
     *  
     */
    (rOCCFIR, bit(10)) ? TBDDefaultCallout;

    /** OCCFIR[11]
     *  
     */
    (rOCCFIR, bit(11)) ? TBDDefaultCallout;

    /** OCCFIR[12]
     *  
     */
    (rOCCFIR, bit(12)) ? TBDDefaultCallout;

    /** OCCFIR[13]
     *  
     */
    (rOCCFIR, bit(13)) ? TBDDefaultCallout;

    /** OCCFIR[14]
     *  
     */
    (rOCCFIR, bit(14)) ? TBDDefaultCallout;

    /** OCCFIR[15]
     *  
     */
    (rOCCFIR, bit(15)) ? TBDDefaultCallout;

    /** OCCFIR[16]
     *  
     */
    (rOCCFIR, bit(16)) ? TBDDefaultCallout;

    /** OCCFIR[17]
     *  
     */
    (rOCCFIR, bit(17)) ? TBDDefaultCallout;

    /** OCCFIR[18]
     *  
     */
    (rOCCFIR, bit(18)) ? TBDDefaultCallout;

    /** OCCFIR[19]
     *  
     */
    (rOCCFIR, bit(19)) ? TBDDefaultCallout;

    /** OCCFIR[20]
     *  
     */
    (rOCCFIR, bit(20)) ? TBDDefaultCallout;

    /** OCCFIR[21]
     *  
     */
    (rOCCFIR, bit(21)) ? TBDDefaultCallout;

    /** OCCFIR[22]
     *  
     */
    (rOCCFIR, bit(22)) ? TBDDefaultCallout;

    /** OCCFIR[23]
     *  
     */
    (rOCCFIR, bit(23)) ? TBDDefaultCallout;

    /** OCCFIR[24]
     *  
     */
    (rOCCFIR, bit(24)) ? TBDDefaultCallout;

    /** OCCFIR[25]
     *  
     */
    (rOCCFIR, bit(25)) ? TBDDefaultCallout;

    /** OCCFIR[26]
     *  
     */
    (rOCCFIR, bit(26)) ? TBDDefaultCallout;

    /** OCCFIR[27]
     *  
     */
    (rOCCFIR, bit(27)) ? TBDDefaultCallout;

    /** OCCFIR[28]
     *  
     */
    (rOCCFIR, bit(28)) ? TBDDefaultCallout;

    /** OCCFIR[29]
     *  
     */
    (rOCCFIR, bit(29)) ? TBDDefaultCallout;

    /** OCCFIR[30]
     *  
     */
    (rOCCFIR, bit(30)) ? TBDDefaultCallout;

    /** OCCFIR[31]
     *  
     */
    (rOCCFIR, bit(31)) ? TBDDefaultCallout;

    /** OCCFIR[32]
     *  
     */
    (rOCCFIR, bit(32)) ? TBDDefaultCallout;

    /** OCCFIR[33]
     *  
     */
    (rOCCFIR, bit(33)) ? TBDDefaultCallout;

    /** OCCFIR[34]
     *  
     */
    (rOCCFIR, bit(34)) ? TBDDefaultCallout;

    /** OCCFIR[35]
     *  
     */
    (rOCCFIR, bit(35)) ? TBDDefaultCallout;

    /** OCCFIR[36]
     *  
     */
    (rOCCFIR, bit(36)) ? TBDDefaultCallout;

    /** OCCFIR[37]
     *  
     */
    (rOCCFIR, bit(37)) ? TBDDefaultCallout;

    /** OCCFIR[38]
     *  
     */
    (rOCCFIR, bit(38)) ? TBDDefaultCallout;

    /** OCCFIR[39]
     *  
     */
    (rOCCFIR, bit(39)) ? TBDDefaultCallout;

    /** OCCFIR[40]
     *  
     */
    (rOCCFIR, bit(40)) ? TBDDefaultCallout;

    /** OCCFIR[41]
     *  
     */
    (rOCCFIR, bit(41)) ? TBDDefaultCallout;

    /** OCCFIR[42]
     *  
     */
    (rOCCFIR, bit(42)) ? TBDDefaultCallout;

    /** OCCFIR[43]
     *  
     */
    (rOCCFIR, bit(43)) ? TBDDefaultCallout;

    /** OCCFIR[44]
     *  
     */
    (rOCCFIR, bit(44)) ? TBDDefaultCallout;

    /** OCCFIR[45]
     *  
     */
    (rOCCFIR, bit(45)) ? TBDDefaultCallout;

    /** OCCFIR[46]
     *  
     */
    (rOCCFIR, bit(46)) ? TBDDefaultCallout;

    /** OCCFIR[47]
     *  
     */
    (rOCCFIR, bit(47)) ? TBDDefaultCallout;

    /** OCCFIR[48]
     *  
     */
    (rOCCFIR, bit(48)) ? TBDDefaultCallout;

    /** OCCFIR[49]
     *  
     */
    (rOCCFIR, bit(49)) ? TBDDefaultCallout;

    /** OCCFIR[50]
     *  
     */
    (rOCCFIR, bit(50)) ? TBDDefaultCallout;

    /** OCCFIR[51]
     *  
     */
    (rOCCFIR, bit(51)) ? TBDDefaultCallout;

    /** OCCFIR[52]
     *  
     */
    (rOCCFIR, bit(52)) ? TBDDefaultCallout;

    /** OCCFIR[53]
     *  
     */
    (rOCCFIR, bit(53)) ? TBDDefaultCallout;

    /** OCCFIR[54]
     *  
     */
    (rOCCFIR, bit(54)) ? TBDDefaultCallout;

    /** OCCFIR[55]
     *  
     */
    (rOCCFIR, bit(55)) ? TBDDefaultCallout;

    /** OCCFIR[56]
     *  
     */
    (rOCCFIR, bit(56)) ? TBDDefaultCallout;

    /** OCCFIR[57]
     *  
     */
    (rOCCFIR, bit(57)) ? TBDDefaultCallout;

    /** OCCFIR[58]
     *  
     */
    (rOCCFIR, bit(58)) ? TBDDefaultCallout;

    /** OCCFIR[59]
     *  
     */
    (rOCCFIR, bit(59)) ? TBDDefaultCallout;

    /** OCCFIR[60]
     *  
     */
    (rOCCFIR, bit(60)) ? TBDDefaultCallout;

    /** OCCFIR[61]
     *  
     */
    (rOCCFIR, bit(61)) ? TBDDefaultCallout;

    /** OCCFIR[62]
     *  
     */
    (rOCCFIR, bit(62)) ? TBDDefaultCallout;

    /** OCCFIR[63]
     *  
     */
    (rOCCFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# N0 Chiplet FIR
################################################################################

rule rN0_CHIPLET_FIR
{
  CHECK_STOP:
     N0_CHIPLET_CS_FIR       & ~N0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (N0_CHIPLET_RE_FIR >> 2) & ~N0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gN0_CHIPLET_FIR filter singlebit
{
    /** N0_CHIPLET_FIR[3]
     *  Attention from N0_LFIR
     */
    (rN0_CHIPLET_FIR, bit(3)) ? analyze(gN0_LFIR);

    /** N0_CHIPLET_FIR[4]
     *  Attention from NXDMAENGFIR
     */
    (rN0_CHIPLET_FIR, bit(4)) ? analyze(gNXDMAENGFIR);

    /** N0_CHIPLET_FIR[5]
     *  Attention from NXCQFIR
     */
    (rN0_CHIPLET_FIR, bit(5)) ? analyze(gNXCQFIR);

    /** N0_CHIPLET_FIR[6]
     *  Attention from CXAFIR 0
     */
    (rN0_CHIPLET_FIR, bit(6)) ? analyzeConnectedCAPP0;

};

################################################################################
# N0 Chiplet Unit Checkstop FIR
################################################################################

rule rN0_CHIPLET_UCS_FIR
{
  UNIT_CS:
    N0_CHIPLET_UCS_FIR & ~N0_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gN0_CHIPLET_UCS_FIR filter singlebit
{
    /** N0_CHIPLET_UCS_FIR[1]
     *  Attention from NXDMAENGFIR
     */
    (rN0_CHIPLET_UCS_FIR, bit(1)) ? analyze(gNXDMAENGFIR);

    /** N0_CHIPLET_UCS_FIR[2]
     *  Attention from NXCQFIR
     */
    (rN0_CHIPLET_UCS_FIR, bit(2)) ? analyze(gNXCQFIR);

    /** N0_CHIPLET_UCS_FIR[3]
     *  Attention from CXAFIR 0
     */
    (rN0_CHIPLET_UCS_FIR, bit(3)) ? analyzeConnectedCAPP0;

};

################################################################################
# P9 chip N0_LFIR
################################################################################

rule rN0_LFIR
{
  CHECK_STOP:
    N0_LFIR & ~N0_LFIR_MASK & ~N0_LFIR_ACT0 & ~N0_LFIR_ACT1;
  RECOVERABLE:
    N0_LFIR & ~N0_LFIR_MASK & ~N0_LFIR_ACT0 &  N0_LFIR_ACT1;
};

group gN0_LFIR filter singlebit
{
    /** N0_LFIR[0]
     *  
     */
    (rN0_LFIR, bit(0)) ? TBDDefaultCallout;

    /** N0_LFIR[1]
     *  
     */
    (rN0_LFIR, bit(1)) ? TBDDefaultCallout;

    /** N0_LFIR[2]
     *  
     */
    (rN0_LFIR, bit(2)) ? TBDDefaultCallout;

    /** N0_LFIR[3]
     *  
     */
    (rN0_LFIR, bit(3)) ? TBDDefaultCallout;

    /** N0_LFIR[4]
     *  
     */
    (rN0_LFIR, bit(4)) ? TBDDefaultCallout;

    /** N0_LFIR[5]
     *  
     */
    (rN0_LFIR, bit(5)) ? TBDDefaultCallout;

    /** N0_LFIR[6]
     *  
     */
    (rN0_LFIR, bit(6)) ? TBDDefaultCallout;

    /** N0_LFIR[7]
     *  
     */
    (rN0_LFIR, bit(7)) ? TBDDefaultCallout;

    /** N0_LFIR[8]
     *  
     */
    (rN0_LFIR, bit(8)) ? TBDDefaultCallout;

    /** N0_LFIR[9]
     *  
     */
    (rN0_LFIR, bit(9)) ? TBDDefaultCallout;

    /** N0_LFIR[10]
     *  
     */
    (rN0_LFIR, bit(10)) ? TBDDefaultCallout;

    /** N0_LFIR[11]
     *  
     */
    (rN0_LFIR, bit(11)) ? TBDDefaultCallout;

    /** N0_LFIR[12]
     *  
     */
    (rN0_LFIR, bit(12)) ? TBDDefaultCallout;

    /** N0_LFIR[13]
     *  
     */
    (rN0_LFIR, bit(13)) ? TBDDefaultCallout;

    /** N0_LFIR[14]
     *  
     */
    (rN0_LFIR, bit(14)) ? TBDDefaultCallout;

    /** N0_LFIR[15]
     *  
     */
    (rN0_LFIR, bit(15)) ? TBDDefaultCallout;

    /** N0_LFIR[16]
     *  
     */
    (rN0_LFIR, bit(16)) ? TBDDefaultCallout;

    /** N0_LFIR[17]
     *  
     */
    (rN0_LFIR, bit(17)) ? TBDDefaultCallout;

    /** N0_LFIR[18]
     *  
     */
    (rN0_LFIR, bit(18)) ? TBDDefaultCallout;

    /** N0_LFIR[19]
     *  
     */
    (rN0_LFIR, bit(19)) ? TBDDefaultCallout;

    /** N0_LFIR[20]
     *  
     */
    (rN0_LFIR, bit(20)) ? TBDDefaultCallout;

    /** N0_LFIR[21]
     *  
     */
    (rN0_LFIR, bit(21)) ? TBDDefaultCallout;

    /** N0_LFIR[22]
     *  
     */
    (rN0_LFIR, bit(22)) ? TBDDefaultCallout;

    /** N0_LFIR[23]
     *  
     */
    (rN0_LFIR, bit(23)) ? TBDDefaultCallout;

    /** N0_LFIR[24]
     *  
     */
    (rN0_LFIR, bit(24)) ? TBDDefaultCallout;

    /** N0_LFIR[25]
     *  
     */
    (rN0_LFIR, bit(25)) ? TBDDefaultCallout;

    /** N0_LFIR[26]
     *  
     */
    (rN0_LFIR, bit(26)) ? TBDDefaultCallout;

    /** N0_LFIR[27]
     *  
     */
    (rN0_LFIR, bit(27)) ? TBDDefaultCallout;

    /** N0_LFIR[28]
     *  
     */
    (rN0_LFIR, bit(28)) ? TBDDefaultCallout;

    /** N0_LFIR[29]
     *  
     */
    (rN0_LFIR, bit(29)) ? TBDDefaultCallout;

    /** N0_LFIR[30]
     *  
     */
    (rN0_LFIR, bit(30)) ? TBDDefaultCallout;

    /** N0_LFIR[31]
     *  
     */
    (rN0_LFIR, bit(31)) ? TBDDefaultCallout;

    /** N0_LFIR[32]
     *  
     */
    (rN0_LFIR, bit(32)) ? TBDDefaultCallout;

    /** N0_LFIR[33]
     *  
     */
    (rN0_LFIR, bit(33)) ? TBDDefaultCallout;

    /** N0_LFIR[34]
     *  
     */
    (rN0_LFIR, bit(34)) ? TBDDefaultCallout;

    /** N0_LFIR[35]
     *  
     */
    (rN0_LFIR, bit(35)) ? TBDDefaultCallout;

    /** N0_LFIR[36]
     *  
     */
    (rN0_LFIR, bit(36)) ? TBDDefaultCallout;

    /** N0_LFIR[37]
     *  
     */
    (rN0_LFIR, bit(37)) ? TBDDefaultCallout;

    /** N0_LFIR[38]
     *  
     */
    (rN0_LFIR, bit(38)) ? TBDDefaultCallout;

    /** N0_LFIR[39]
     *  
     */
    (rN0_LFIR, bit(39)) ? TBDDefaultCallout;

    /** N0_LFIR[40]
     *  
     */
    (rN0_LFIR, bit(40)) ? TBDDefaultCallout;

    /** N0_LFIR[41]
     *  
     */
    (rN0_LFIR, bit(41)) ? TBDDefaultCallout;

    /** N0_LFIR[42]
     *  
     */
    (rN0_LFIR, bit(42)) ? TBDDefaultCallout;

    /** N0_LFIR[43]
     *  
     */
    (rN0_LFIR, bit(43)) ? TBDDefaultCallout;

    /** N0_LFIR[44]
     *  
     */
    (rN0_LFIR, bit(44)) ? TBDDefaultCallout;

    /** N0_LFIR[45]
     *  
     */
    (rN0_LFIR, bit(45)) ? TBDDefaultCallout;

    /** N0_LFIR[46]
     *  
     */
    (rN0_LFIR, bit(46)) ? TBDDefaultCallout;

    /** N0_LFIR[47]
     *  
     */
    (rN0_LFIR, bit(47)) ? TBDDefaultCallout;

    /** N0_LFIR[48]
     *  
     */
    (rN0_LFIR, bit(48)) ? TBDDefaultCallout;

    /** N0_LFIR[49]
     *  
     */
    (rN0_LFIR, bit(49)) ? TBDDefaultCallout;

    /** N0_LFIR[50]
     *  
     */
    (rN0_LFIR, bit(50)) ? TBDDefaultCallout;

    /** N0_LFIR[51]
     *  
     */
    (rN0_LFIR, bit(51)) ? TBDDefaultCallout;

    /** N0_LFIR[52]
     *  
     */
    (rN0_LFIR, bit(52)) ? TBDDefaultCallout;

    /** N0_LFIR[53]
     *  
     */
    (rN0_LFIR, bit(53)) ? TBDDefaultCallout;

    /** N0_LFIR[54]
     *  
     */
    (rN0_LFIR, bit(54)) ? TBDDefaultCallout;

    /** N0_LFIR[55]
     *  
     */
    (rN0_LFIR, bit(55)) ? TBDDefaultCallout;

    /** N0_LFIR[56]
     *  
     */
    (rN0_LFIR, bit(56)) ? TBDDefaultCallout;

    /** N0_LFIR[57]
     *  
     */
    (rN0_LFIR, bit(57)) ? TBDDefaultCallout;

    /** N0_LFIR[58]
     *  
     */
    (rN0_LFIR, bit(58)) ? TBDDefaultCallout;

    /** N0_LFIR[59]
     *  
     */
    (rN0_LFIR, bit(59)) ? TBDDefaultCallout;

    /** N0_LFIR[60]
     *  
     */
    (rN0_LFIR, bit(60)) ? TBDDefaultCallout;

    /** N0_LFIR[61]
     *  
     */
    (rN0_LFIR, bit(61)) ? TBDDefaultCallout;

    /** N0_LFIR[62]
     *  
     */
    (rN0_LFIR, bit(62)) ? TBDDefaultCallout;

    /** N0_LFIR[63]
     *  
     */
    (rN0_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip NXCQFIR
################################################################################

rule rNXCQFIR
{
  CHECK_STOP:
    NXCQFIR & ~NXCQFIR_MASK & ~NXCQFIR_ACT0 & ~NXCQFIR_ACT1;
  RECOVERABLE:
    NXCQFIR & ~NXCQFIR_MASK & ~NXCQFIR_ACT0 &  NXCQFIR_ACT1;
  UNIT_CS:
    NXCQFIR & ~NXCQFIR_MASK &  NXCQFIR_ACT0 &  NXCQFIR_ACT1;
};

group gNXCQFIR filter singlebit
{
    /** NXCQFIR[0]
     *  
     */
    (rNXCQFIR, bit(0)) ? TBDDefaultCallout;

    /** NXCQFIR[1]
     *  
     */
    (rNXCQFIR, bit(1)) ? TBDDefaultCallout;

    /** NXCQFIR[2]
     *  
     */
    (rNXCQFIR, bit(2)) ? TBDDefaultCallout;

    /** NXCQFIR[3]
     *  
     */
    (rNXCQFIR, bit(3)) ? TBDDefaultCallout;

    /** NXCQFIR[4]
     *  
     */
    (rNXCQFIR, bit(4)) ? TBDDefaultCallout;

    /** NXCQFIR[5]
     *  
     */
    (rNXCQFIR, bit(5)) ? TBDDefaultCallout;

    /** NXCQFIR[6]
     *  
     */
    (rNXCQFIR, bit(6)) ? TBDDefaultCallout;

    /** NXCQFIR[7]
     *  
     */
    (rNXCQFIR, bit(7)) ? TBDDefaultCallout;

    /** NXCQFIR[8]
     *  
     */
    (rNXCQFIR, bit(8)) ? TBDDefaultCallout;

    /** NXCQFIR[9]
     *  
     */
    (rNXCQFIR, bit(9)) ? TBDDefaultCallout;

    /** NXCQFIR[10]
     *  
     */
    (rNXCQFIR, bit(10)) ? TBDDefaultCallout;

    /** NXCQFIR[11]
     *  
     */
    (rNXCQFIR, bit(11)) ? TBDDefaultCallout;

    /** NXCQFIR[12]
     *  
     */
    (rNXCQFIR, bit(12)) ? TBDDefaultCallout;

    /** NXCQFIR[13]
     *  
     */
    (rNXCQFIR, bit(13)) ? TBDDefaultCallout;

    /** NXCQFIR[14]
     *  
     */
    (rNXCQFIR, bit(14)) ? TBDDefaultCallout;

    /** NXCQFIR[15]
     *  
     */
    (rNXCQFIR, bit(15)) ? TBDDefaultCallout;

    /** NXCQFIR[16]
     *  
     */
    (rNXCQFIR, bit(16)) ? TBDDefaultCallout;

    /** NXCQFIR[17]
     *  
     */
    (rNXCQFIR, bit(17)) ? TBDDefaultCallout;

    /** NXCQFIR[18]
     *  
     */
    (rNXCQFIR, bit(18)) ? TBDDefaultCallout;

    /** NXCQFIR[19]
     *  
     */
    (rNXCQFIR, bit(19)) ? TBDDefaultCallout;

    /** NXCQFIR[20]
     *  
     */
    (rNXCQFIR, bit(20)) ? TBDDefaultCallout;

    /** NXCQFIR[21]
     *  
     */
    (rNXCQFIR, bit(21)) ? TBDDefaultCallout;

    /** NXCQFIR[22]
     *  
     */
    (rNXCQFIR, bit(22)) ? TBDDefaultCallout;

    /** NXCQFIR[23]
     *  
     */
    (rNXCQFIR, bit(23)) ? TBDDefaultCallout;

    /** NXCQFIR[24]
     *  
     */
    (rNXCQFIR, bit(24)) ? TBDDefaultCallout;

    /** NXCQFIR[25]
     *  
     */
    (rNXCQFIR, bit(25)) ? TBDDefaultCallout;

    /** NXCQFIR[26]
     *  
     */
    (rNXCQFIR, bit(26)) ? TBDDefaultCallout;

    /** NXCQFIR[27]
     *  
     */
    (rNXCQFIR, bit(27)) ? TBDDefaultCallout;

    /** NXCQFIR[28]
     *  
     */
    (rNXCQFIR, bit(28)) ? TBDDefaultCallout;

    /** NXCQFIR[29]
     *  
     */
    (rNXCQFIR, bit(29)) ? TBDDefaultCallout;

    /** NXCQFIR[30]
     *  
     */
    (rNXCQFIR, bit(30)) ? TBDDefaultCallout;

    /** NXCQFIR[31]
     *  
     */
    (rNXCQFIR, bit(31)) ? TBDDefaultCallout;

    /** NXCQFIR[32]
     *  
     */
    (rNXCQFIR, bit(32)) ? TBDDefaultCallout;

    /** NXCQFIR[33]
     *  
     */
    (rNXCQFIR, bit(33)) ? TBDDefaultCallout;

    /** NXCQFIR[34]
     *  
     */
    (rNXCQFIR, bit(34)) ? TBDDefaultCallout;

    /** NXCQFIR[35]
     *  
     */
    (rNXCQFIR, bit(35)) ? TBDDefaultCallout;

    /** NXCQFIR[36]
     *  
     */
    (rNXCQFIR, bit(36)) ? TBDDefaultCallout;

    /** NXCQFIR[37]
     *  
     */
    (rNXCQFIR, bit(37)) ? TBDDefaultCallout;

    /** NXCQFIR[38]
     *  
     */
    (rNXCQFIR, bit(38)) ? TBDDefaultCallout;

    /** NXCQFIR[39]
     *  
     */
    (rNXCQFIR, bit(39)) ? TBDDefaultCallout;

    /** NXCQFIR[40]
     *  
     */
    (rNXCQFIR, bit(40)) ? TBDDefaultCallout;

    /** NXCQFIR[41]
     *  
     */
    (rNXCQFIR, bit(41)) ? TBDDefaultCallout;

    /** NXCQFIR[42]
     *  
     */
    (rNXCQFIR, bit(42)) ? TBDDefaultCallout;

    /** NXCQFIR[43]
     *  
     */
    (rNXCQFIR, bit(43)) ? TBDDefaultCallout;

    /** NXCQFIR[44]
     *  
     */
    (rNXCQFIR, bit(44)) ? TBDDefaultCallout;

    /** NXCQFIR[45]
     *  
     */
    (rNXCQFIR, bit(45)) ? TBDDefaultCallout;

    /** NXCQFIR[46]
     *  
     */
    (rNXCQFIR, bit(46)) ? TBDDefaultCallout;

    /** NXCQFIR[47]
     *  
     */
    (rNXCQFIR, bit(47)) ? TBDDefaultCallout;

    /** NXCQFIR[48]
     *  
     */
    (rNXCQFIR, bit(48)) ? TBDDefaultCallout;

    /** NXCQFIR[49]
     *  
     */
    (rNXCQFIR, bit(49)) ? TBDDefaultCallout;

    /** NXCQFIR[50]
     *  
     */
    (rNXCQFIR, bit(50)) ? TBDDefaultCallout;

    /** NXCQFIR[51]
     *  
     */
    (rNXCQFIR, bit(51)) ? TBDDefaultCallout;

    /** NXCQFIR[52]
     *  
     */
    (rNXCQFIR, bit(52)) ? TBDDefaultCallout;

    /** NXCQFIR[53]
     *  
     */
    (rNXCQFIR, bit(53)) ? TBDDefaultCallout;

    /** NXCQFIR[54]
     *  
     */
    (rNXCQFIR, bit(54)) ? TBDDefaultCallout;

    /** NXCQFIR[55]
     *  
     */
    (rNXCQFIR, bit(55)) ? TBDDefaultCallout;

    /** NXCQFIR[56]
     *  
     */
    (rNXCQFIR, bit(56)) ? TBDDefaultCallout;

    /** NXCQFIR[57]
     *  
     */
    (rNXCQFIR, bit(57)) ? TBDDefaultCallout;

    /** NXCQFIR[58]
     *  
     */
    (rNXCQFIR, bit(58)) ? TBDDefaultCallout;

    /** NXCQFIR[59]
     *  
     */
    (rNXCQFIR, bit(59)) ? TBDDefaultCallout;

    /** NXCQFIR[60]
     *  
     */
    (rNXCQFIR, bit(60)) ? TBDDefaultCallout;

    /** NXCQFIR[61]
     *  
     */
    (rNXCQFIR, bit(61)) ? TBDDefaultCallout;

    /** NXCQFIR[62]
     *  
     */
    (rNXCQFIR, bit(62)) ? TBDDefaultCallout;

    /** NXCQFIR[63]
     *  
     */
    (rNXCQFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip NXDMAENGFIR
################################################################################

rule rNXDMAENGFIR
{
  CHECK_STOP:
    NXDMAENGFIR & ~NXDMAENGFIR_MASK & ~NXDMAENGFIR_ACT0 & ~NXDMAENGFIR_ACT1;
  RECOVERABLE:
    NXDMAENGFIR & ~NXDMAENGFIR_MASK & ~NXDMAENGFIR_ACT0 &  NXDMAENGFIR_ACT1;
  UNIT_CS:
    NXDMAENGFIR & ~NXDMAENGFIR_MASK &  NXDMAENGFIR_ACT0 &  NXDMAENGFIR_ACT1;
};

group gNXDMAENGFIR filter singlebit
{
    /** NXDMAENGFIR[0]
     *  
     */
    (rNXDMAENGFIR, bit(0)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[1]
     *  
     */
    (rNXDMAENGFIR, bit(1)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[2]
     *  
     */
    (rNXDMAENGFIR, bit(2)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[3]
     *  
     */
    (rNXDMAENGFIR, bit(3)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[4]
     *  
     */
    (rNXDMAENGFIR, bit(4)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[5]
     *  
     */
    (rNXDMAENGFIR, bit(5)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[6]
     *  
     */
    (rNXDMAENGFIR, bit(6)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[7]
     *  
     */
    (rNXDMAENGFIR, bit(7)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[8]
     *  
     */
    (rNXDMAENGFIR, bit(8)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[9]
     *  
     */
    (rNXDMAENGFIR, bit(9)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[10]
     *  
     */
    (rNXDMAENGFIR, bit(10)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[11]
     *  
     */
    (rNXDMAENGFIR, bit(11)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[12]
     *  
     */
    (rNXDMAENGFIR, bit(12)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[13]
     *  
     */
    (rNXDMAENGFIR, bit(13)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[14]
     *  
     */
    (rNXDMAENGFIR, bit(14)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[15]
     *  
     */
    (rNXDMAENGFIR, bit(15)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[16]
     *  
     */
    (rNXDMAENGFIR, bit(16)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[17]
     *  
     */
    (rNXDMAENGFIR, bit(17)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[18]
     *  
     */
    (rNXDMAENGFIR, bit(18)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[19]
     *  
     */
    (rNXDMAENGFIR, bit(19)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[20]
     *  
     */
    (rNXDMAENGFIR, bit(20)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[21]
     *  
     */
    (rNXDMAENGFIR, bit(21)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[22]
     *  
     */
    (rNXDMAENGFIR, bit(22)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[23]
     *  
     */
    (rNXDMAENGFIR, bit(23)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[24]
     *  
     */
    (rNXDMAENGFIR, bit(24)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[25]
     *  
     */
    (rNXDMAENGFIR, bit(25)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[26]
     *  
     */
    (rNXDMAENGFIR, bit(26)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[27]
     *  
     */
    (rNXDMAENGFIR, bit(27)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[28]
     *  
     */
    (rNXDMAENGFIR, bit(28)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[29]
     *  
     */
    (rNXDMAENGFIR, bit(29)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[30]
     *  
     */
    (rNXDMAENGFIR, bit(30)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[31]
     *  
     */
    (rNXDMAENGFIR, bit(31)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[32]
     *  
     */
    (rNXDMAENGFIR, bit(32)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[33]
     *  
     */
    (rNXDMAENGFIR, bit(33)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[34]
     *  
     */
    (rNXDMAENGFIR, bit(34)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[35]
     *  
     */
    (rNXDMAENGFIR, bit(35)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[36]
     *  
     */
    (rNXDMAENGFIR, bit(36)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[37]
     *  
     */
    (rNXDMAENGFIR, bit(37)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[38]
     *  
     */
    (rNXDMAENGFIR, bit(38)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[39]
     *  
     */
    (rNXDMAENGFIR, bit(39)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[40]
     *  
     */
    (rNXDMAENGFIR, bit(40)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[41]
     *  
     */
    (rNXDMAENGFIR, bit(41)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[42]
     *  
     */
    (rNXDMAENGFIR, bit(42)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[43]
     *  
     */
    (rNXDMAENGFIR, bit(43)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[44]
     *  
     */
    (rNXDMAENGFIR, bit(44)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[45]
     *  
     */
    (rNXDMAENGFIR, bit(45)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[46]
     *  
     */
    (rNXDMAENGFIR, bit(46)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[47]
     *  
     */
    (rNXDMAENGFIR, bit(47)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[48]
     *  
     */
    (rNXDMAENGFIR, bit(48)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[49]
     *  
     */
    (rNXDMAENGFIR, bit(49)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[50]
     *  
     */
    (rNXDMAENGFIR, bit(50)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[51]
     *  
     */
    (rNXDMAENGFIR, bit(51)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[52]
     *  
     */
    (rNXDMAENGFIR, bit(52)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[53]
     *  
     */
    (rNXDMAENGFIR, bit(53)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[54]
     *  
     */
    (rNXDMAENGFIR, bit(54)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[55]
     *  
     */
    (rNXDMAENGFIR, bit(55)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[56]
     *  
     */
    (rNXDMAENGFIR, bit(56)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[57]
     *  
     */
    (rNXDMAENGFIR, bit(57)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[58]
     *  
     */
    (rNXDMAENGFIR, bit(58)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[59]
     *  
     */
    (rNXDMAENGFIR, bit(59)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[60]
     *  
     */
    (rNXDMAENGFIR, bit(60)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[61]
     *  
     */
    (rNXDMAENGFIR, bit(61)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[62]
     *  
     */
    (rNXDMAENGFIR, bit(62)) ? TBDDefaultCallout;

    /** NXDMAENGFIR[63]
     *  
     */
    (rNXDMAENGFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# N1 Chiplet FIR
################################################################################

rule rN1_CHIPLET_FIR
{
  CHECK_STOP:
     N1_CHIPLET_CS_FIR       & ~N1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (N1_CHIPLET_RE_FIR >> 2) & ~N1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gN1_CHIPLET_FIR filter singlebit
{
    /** N1_CHIPLET_FIR[3]
     *  Attention from N1_LFIR
     */
    (rN1_CHIPLET_FIR, bit(3)) ? analyze(gN1_LFIR);

    /** N1_CHIPLET_FIR[4]
     *  Attention from MCFIR 2
     */
    (rN1_CHIPLET_FIR, bit(4)) ? analyzeConnectedMCS2;

    /** N1_CHIPLET_FIR[5]
     *  Attention from MCFIR 3
     */
    (rN1_CHIPLET_FIR, bit(5)) ? analyzeConnectedMCS3;

    /** N1_CHIPLET_FIR[6]
     *  Attention from MCDFIR
     */
    (rN1_CHIPLET_FIR, bit(6)) ? analyze(gMCDFIR_0);

    /** N1_CHIPLET_FIR[7]
     *  Attention from MCDFIR
     */
    (rN1_CHIPLET_FIR, bit(7)) ? analyze(gMCDFIR_1);

    /** N1_CHIPLET_FIR[8]
     *  Attention from VASFIR
     */
    (rN1_CHIPLET_FIR, bit(8)) ? analyze(gVASFIR);

};

################################################################################
# N1 Chiplet Unit Checkstop FIR
################################################################################

rule rN1_CHIPLET_UCS_FIR
{
  UNIT_CS:
    N1_CHIPLET_UCS_FIR & ~N1_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gN1_CHIPLET_UCS_FIR filter singlebit
{
    /** N1_CHIPLET_UCS_FIR[1]
     *  Attention from MCFIR 2
     */
    (rN1_CHIPLET_UCS_FIR, bit(1)) ? analyzeConnectedMCS2;

    /** N1_CHIPLET_UCS_FIR[2]
     *  Attention from MCFIR 3
     */
    (rN1_CHIPLET_UCS_FIR, bit(2)) ? analyzeConnectedMCS3;

    /** N1_CHIPLET_UCS_FIR[5]
     *  Attention from VASFIR
     */
    (rN1_CHIPLET_UCS_FIR, bit(5)) ? analyze(gVASFIR);

};

################################################################################
# N1 Chiplet Host Attention FIR
################################################################################

rule rN1_CHIPLET_HA_FIR
{
  HOST_ATTN:
    N1_CHIPLET_HA_FIR & ~N1_CHIPLET_HA_FIR_MASK & `7fffffffffffffff`;
};

group gN1_CHIPLET_HA_FIR filter singlebit
{
    /** N1_CHIPLET_HA_FIR[1]
     *  Attention from MCFIR 2
     */
    (rN1_CHIPLET_HA_FIR, bit(1)) ? analyzeConnectedMCS2;

    /** N1_CHIPLET_HA_FIR[2]
     *  Attention from MCFIR 3
     */
    (rN1_CHIPLET_HA_FIR, bit(2)) ? analyzeConnectedMCS3;

};

################################################################################
# P9 chip N1_LFIR
################################################################################

rule rN1_LFIR
{
  CHECK_STOP:
    N1_LFIR & ~N1_LFIR_MASK & ~N1_LFIR_ACT0 & ~N1_LFIR_ACT1;
  RECOVERABLE:
    N1_LFIR & ~N1_LFIR_MASK & ~N1_LFIR_ACT0 &  N1_LFIR_ACT1;
};

group gN1_LFIR filter singlebit
{
    /** N1_LFIR[0]
     *  
     */
    (rN1_LFIR, bit(0)) ? TBDDefaultCallout;

    /** N1_LFIR[1]
     *  
     */
    (rN1_LFIR, bit(1)) ? TBDDefaultCallout;

    /** N1_LFIR[2]
     *  
     */
    (rN1_LFIR, bit(2)) ? TBDDefaultCallout;

    /** N1_LFIR[3]
     *  
     */
    (rN1_LFIR, bit(3)) ? TBDDefaultCallout;

    /** N1_LFIR[4]
     *  
     */
    (rN1_LFIR, bit(4)) ? TBDDefaultCallout;

    /** N1_LFIR[5]
     *  
     */
    (rN1_LFIR, bit(5)) ? TBDDefaultCallout;

    /** N1_LFIR[6]
     *  
     */
    (rN1_LFIR, bit(6)) ? TBDDefaultCallout;

    /** N1_LFIR[7]
     *  
     */
    (rN1_LFIR, bit(7)) ? TBDDefaultCallout;

    /** N1_LFIR[8]
     *  
     */
    (rN1_LFIR, bit(8)) ? TBDDefaultCallout;

    /** N1_LFIR[9]
     *  
     */
    (rN1_LFIR, bit(9)) ? TBDDefaultCallout;

    /** N1_LFIR[10]
     *  
     */
    (rN1_LFIR, bit(10)) ? TBDDefaultCallout;

    /** N1_LFIR[11]
     *  
     */
    (rN1_LFIR, bit(11)) ? TBDDefaultCallout;

    /** N1_LFIR[12]
     *  
     */
    (rN1_LFIR, bit(12)) ? TBDDefaultCallout;

    /** N1_LFIR[13]
     *  
     */
    (rN1_LFIR, bit(13)) ? TBDDefaultCallout;

    /** N1_LFIR[14]
     *  
     */
    (rN1_LFIR, bit(14)) ? TBDDefaultCallout;

    /** N1_LFIR[15]
     *  
     */
    (rN1_LFIR, bit(15)) ? TBDDefaultCallout;

    /** N1_LFIR[16]
     *  
     */
    (rN1_LFIR, bit(16)) ? TBDDefaultCallout;

    /** N1_LFIR[17]
     *  
     */
    (rN1_LFIR, bit(17)) ? TBDDefaultCallout;

    /** N1_LFIR[18]
     *  
     */
    (rN1_LFIR, bit(18)) ? TBDDefaultCallout;

    /** N1_LFIR[19]
     *  
     */
    (rN1_LFIR, bit(19)) ? TBDDefaultCallout;

    /** N1_LFIR[20]
     *  
     */
    (rN1_LFIR, bit(20)) ? TBDDefaultCallout;

    /** N1_LFIR[21]
     *  
     */
    (rN1_LFIR, bit(21)) ? TBDDefaultCallout;

    /** N1_LFIR[22]
     *  
     */
    (rN1_LFIR, bit(22)) ? TBDDefaultCallout;

    /** N1_LFIR[23]
     *  
     */
    (rN1_LFIR, bit(23)) ? TBDDefaultCallout;

    /** N1_LFIR[24]
     *  
     */
    (rN1_LFIR, bit(24)) ? TBDDefaultCallout;

    /** N1_LFIR[25]
     *  
     */
    (rN1_LFIR, bit(25)) ? TBDDefaultCallout;

    /** N1_LFIR[26]
     *  
     */
    (rN1_LFIR, bit(26)) ? TBDDefaultCallout;

    /** N1_LFIR[27]
     *  
     */
    (rN1_LFIR, bit(27)) ? TBDDefaultCallout;

    /** N1_LFIR[28]
     *  
     */
    (rN1_LFIR, bit(28)) ? TBDDefaultCallout;

    /** N1_LFIR[29]
     *  
     */
    (rN1_LFIR, bit(29)) ? TBDDefaultCallout;

    /** N1_LFIR[30]
     *  
     */
    (rN1_LFIR, bit(30)) ? TBDDefaultCallout;

    /** N1_LFIR[31]
     *  
     */
    (rN1_LFIR, bit(31)) ? TBDDefaultCallout;

    /** N1_LFIR[32]
     *  
     */
    (rN1_LFIR, bit(32)) ? TBDDefaultCallout;

    /** N1_LFIR[33]
     *  
     */
    (rN1_LFIR, bit(33)) ? TBDDefaultCallout;

    /** N1_LFIR[34]
     *  
     */
    (rN1_LFIR, bit(34)) ? TBDDefaultCallout;

    /** N1_LFIR[35]
     *  
     */
    (rN1_LFIR, bit(35)) ? TBDDefaultCallout;

    /** N1_LFIR[36]
     *  
     */
    (rN1_LFIR, bit(36)) ? TBDDefaultCallout;

    /** N1_LFIR[37]
     *  
     */
    (rN1_LFIR, bit(37)) ? TBDDefaultCallout;

    /** N1_LFIR[38]
     *  
     */
    (rN1_LFIR, bit(38)) ? TBDDefaultCallout;

    /** N1_LFIR[39]
     *  
     */
    (rN1_LFIR, bit(39)) ? TBDDefaultCallout;

    /** N1_LFIR[40]
     *  
     */
    (rN1_LFIR, bit(40)) ? TBDDefaultCallout;

    /** N1_LFIR[41]
     *  
     */
    (rN1_LFIR, bit(41)) ? TBDDefaultCallout;

    /** N1_LFIR[42]
     *  
     */
    (rN1_LFIR, bit(42)) ? TBDDefaultCallout;

    /** N1_LFIR[43]
     *  
     */
    (rN1_LFIR, bit(43)) ? TBDDefaultCallout;

    /** N1_LFIR[44]
     *  
     */
    (rN1_LFIR, bit(44)) ? TBDDefaultCallout;

    /** N1_LFIR[45]
     *  
     */
    (rN1_LFIR, bit(45)) ? TBDDefaultCallout;

    /** N1_LFIR[46]
     *  
     */
    (rN1_LFIR, bit(46)) ? TBDDefaultCallout;

    /** N1_LFIR[47]
     *  
     */
    (rN1_LFIR, bit(47)) ? TBDDefaultCallout;

    /** N1_LFIR[48]
     *  
     */
    (rN1_LFIR, bit(48)) ? TBDDefaultCallout;

    /** N1_LFIR[49]
     *  
     */
    (rN1_LFIR, bit(49)) ? TBDDefaultCallout;

    /** N1_LFIR[50]
     *  
     */
    (rN1_LFIR, bit(50)) ? TBDDefaultCallout;

    /** N1_LFIR[51]
     *  
     */
    (rN1_LFIR, bit(51)) ? TBDDefaultCallout;

    /** N1_LFIR[52]
     *  
     */
    (rN1_LFIR, bit(52)) ? TBDDefaultCallout;

    /** N1_LFIR[53]
     *  
     */
    (rN1_LFIR, bit(53)) ? TBDDefaultCallout;

    /** N1_LFIR[54]
     *  
     */
    (rN1_LFIR, bit(54)) ? TBDDefaultCallout;

    /** N1_LFIR[55]
     *  
     */
    (rN1_LFIR, bit(55)) ? TBDDefaultCallout;

    /** N1_LFIR[56]
     *  
     */
    (rN1_LFIR, bit(56)) ? TBDDefaultCallout;

    /** N1_LFIR[57]
     *  
     */
    (rN1_LFIR, bit(57)) ? TBDDefaultCallout;

    /** N1_LFIR[58]
     *  
     */
    (rN1_LFIR, bit(58)) ? TBDDefaultCallout;

    /** N1_LFIR[59]
     *  
     */
    (rN1_LFIR, bit(59)) ? TBDDefaultCallout;

    /** N1_LFIR[60]
     *  
     */
    (rN1_LFIR, bit(60)) ? TBDDefaultCallout;

    /** N1_LFIR[61]
     *  
     */
    (rN1_LFIR, bit(61)) ? TBDDefaultCallout;

    /** N1_LFIR[62]
     *  
     */
    (rN1_LFIR, bit(62)) ? TBDDefaultCallout;

    /** N1_LFIR[63]
     *  
     */
    (rN1_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip MCDFIR 0
################################################################################

rule rMCDFIR_0
{
  CHECK_STOP:
    MCDFIR_0 & ~MCDFIR_0_MASK & ~MCDFIR_0_ACT0 & ~MCDFIR_0_ACT1;
  RECOVERABLE:
    MCDFIR_0 & ~MCDFIR_0_MASK & ~MCDFIR_0_ACT0 &  MCDFIR_0_ACT1;
};

group gMCDFIR_0 filter singlebit
{
    /** MCDFIR_0[0]
     *  
     */
    (rMCDFIR_0, bit(0)) ? TBDDefaultCallout;

    /** MCDFIR_0[1]
     *  
     */
    (rMCDFIR_0, bit(1)) ? TBDDefaultCallout;

    /** MCDFIR_0[2]
     *  
     */
    (rMCDFIR_0, bit(2)) ? TBDDefaultCallout;

    /** MCDFIR_0[3]
     *  
     */
    (rMCDFIR_0, bit(3)) ? TBDDefaultCallout;

    /** MCDFIR_0[4]
     *  
     */
    (rMCDFIR_0, bit(4)) ? TBDDefaultCallout;

    /** MCDFIR_0[5]
     *  
     */
    (rMCDFIR_0, bit(5)) ? TBDDefaultCallout;

    /** MCDFIR_0[6]
     *  
     */
    (rMCDFIR_0, bit(6)) ? TBDDefaultCallout;

    /** MCDFIR_0[7]
     *  
     */
    (rMCDFIR_0, bit(7)) ? TBDDefaultCallout;

    /** MCDFIR_0[8]
     *  
     */
    (rMCDFIR_0, bit(8)) ? TBDDefaultCallout;

    /** MCDFIR_0[9]
     *  
     */
    (rMCDFIR_0, bit(9)) ? TBDDefaultCallout;

    /** MCDFIR_0[10]
     *  
     */
    (rMCDFIR_0, bit(10)) ? TBDDefaultCallout;

    /** MCDFIR_0[11]
     *  
     */
    (rMCDFIR_0, bit(11)) ? TBDDefaultCallout;

    /** MCDFIR_0[12]
     *  
     */
    (rMCDFIR_0, bit(12)) ? TBDDefaultCallout;

    /** MCDFIR_0[13]
     *  
     */
    (rMCDFIR_0, bit(13)) ? TBDDefaultCallout;

    /** MCDFIR_0[14]
     *  
     */
    (rMCDFIR_0, bit(14)) ? TBDDefaultCallout;

    /** MCDFIR_0[15]
     *  
     */
    (rMCDFIR_0, bit(15)) ? TBDDefaultCallout;

    /** MCDFIR_0[16]
     *  
     */
    (rMCDFIR_0, bit(16)) ? TBDDefaultCallout;

    /** MCDFIR_0[17]
     *  
     */
    (rMCDFIR_0, bit(17)) ? TBDDefaultCallout;

    /** MCDFIR_0[18]
     *  
     */
    (rMCDFIR_0, bit(18)) ? TBDDefaultCallout;

    /** MCDFIR_0[19]
     *  
     */
    (rMCDFIR_0, bit(19)) ? TBDDefaultCallout;

    /** MCDFIR_0[20]
     *  
     */
    (rMCDFIR_0, bit(20)) ? TBDDefaultCallout;

    /** MCDFIR_0[21]
     *  
     */
    (rMCDFIR_0, bit(21)) ? TBDDefaultCallout;

    /** MCDFIR_0[22]
     *  
     */
    (rMCDFIR_0, bit(22)) ? TBDDefaultCallout;

    /** MCDFIR_0[23]
     *  
     */
    (rMCDFIR_0, bit(23)) ? TBDDefaultCallout;

    /** MCDFIR_0[24]
     *  
     */
    (rMCDFIR_0, bit(24)) ? TBDDefaultCallout;

    /** MCDFIR_0[25]
     *  
     */
    (rMCDFIR_0, bit(25)) ? TBDDefaultCallout;

    /** MCDFIR_0[26]
     *  
     */
    (rMCDFIR_0, bit(26)) ? TBDDefaultCallout;

    /** MCDFIR_0[27]
     *  
     */
    (rMCDFIR_0, bit(27)) ? TBDDefaultCallout;

    /** MCDFIR_0[28]
     *  
     */
    (rMCDFIR_0, bit(28)) ? TBDDefaultCallout;

    /** MCDFIR_0[29]
     *  
     */
    (rMCDFIR_0, bit(29)) ? TBDDefaultCallout;

    /** MCDFIR_0[30]
     *  
     */
    (rMCDFIR_0, bit(30)) ? TBDDefaultCallout;

    /** MCDFIR_0[31]
     *  
     */
    (rMCDFIR_0, bit(31)) ? TBDDefaultCallout;

    /** MCDFIR_0[32]
     *  
     */
    (rMCDFIR_0, bit(32)) ? TBDDefaultCallout;

    /** MCDFIR_0[33]
     *  
     */
    (rMCDFIR_0, bit(33)) ? TBDDefaultCallout;

    /** MCDFIR_0[34]
     *  
     */
    (rMCDFIR_0, bit(34)) ? TBDDefaultCallout;

    /** MCDFIR_0[35]
     *  
     */
    (rMCDFIR_0, bit(35)) ? TBDDefaultCallout;

    /** MCDFIR_0[36]
     *  
     */
    (rMCDFIR_0, bit(36)) ? TBDDefaultCallout;

    /** MCDFIR_0[37]
     *  
     */
    (rMCDFIR_0, bit(37)) ? TBDDefaultCallout;

    /** MCDFIR_0[38]
     *  
     */
    (rMCDFIR_0, bit(38)) ? TBDDefaultCallout;

    /** MCDFIR_0[39]
     *  
     */
    (rMCDFIR_0, bit(39)) ? TBDDefaultCallout;

    /** MCDFIR_0[40]
     *  
     */
    (rMCDFIR_0, bit(40)) ? TBDDefaultCallout;

    /** MCDFIR_0[41]
     *  
     */
    (rMCDFIR_0, bit(41)) ? TBDDefaultCallout;

    /** MCDFIR_0[42]
     *  
     */
    (rMCDFIR_0, bit(42)) ? TBDDefaultCallout;

    /** MCDFIR_0[43]
     *  
     */
    (rMCDFIR_0, bit(43)) ? TBDDefaultCallout;

    /** MCDFIR_0[44]
     *  
     */
    (rMCDFIR_0, bit(44)) ? TBDDefaultCallout;

    /** MCDFIR_0[45]
     *  
     */
    (rMCDFIR_0, bit(45)) ? TBDDefaultCallout;

    /** MCDFIR_0[46]
     *  
     */
    (rMCDFIR_0, bit(46)) ? TBDDefaultCallout;

    /** MCDFIR_0[47]
     *  
     */
    (rMCDFIR_0, bit(47)) ? TBDDefaultCallout;

    /** MCDFIR_0[48]
     *  
     */
    (rMCDFIR_0, bit(48)) ? TBDDefaultCallout;

    /** MCDFIR_0[49]
     *  
     */
    (rMCDFIR_0, bit(49)) ? TBDDefaultCallout;

    /** MCDFIR_0[50]
     *  
     */
    (rMCDFIR_0, bit(50)) ? TBDDefaultCallout;

    /** MCDFIR_0[51]
     *  
     */
    (rMCDFIR_0, bit(51)) ? TBDDefaultCallout;

    /** MCDFIR_0[52]
     *  
     */
    (rMCDFIR_0, bit(52)) ? TBDDefaultCallout;

    /** MCDFIR_0[53]
     *  
     */
    (rMCDFIR_0, bit(53)) ? TBDDefaultCallout;

    /** MCDFIR_0[54]
     *  
     */
    (rMCDFIR_0, bit(54)) ? TBDDefaultCallout;

    /** MCDFIR_0[55]
     *  
     */
    (rMCDFIR_0, bit(55)) ? TBDDefaultCallout;

    /** MCDFIR_0[56]
     *  
     */
    (rMCDFIR_0, bit(56)) ? TBDDefaultCallout;

    /** MCDFIR_0[57]
     *  
     */
    (rMCDFIR_0, bit(57)) ? TBDDefaultCallout;

    /** MCDFIR_0[58]
     *  
     */
    (rMCDFIR_0, bit(58)) ? TBDDefaultCallout;

    /** MCDFIR_0[59]
     *  
     */
    (rMCDFIR_0, bit(59)) ? TBDDefaultCallout;

    /** MCDFIR_0[60]
     *  
     */
    (rMCDFIR_0, bit(60)) ? TBDDefaultCallout;

    /** MCDFIR_0[61]
     *  
     */
    (rMCDFIR_0, bit(61)) ? TBDDefaultCallout;

    /** MCDFIR_0[62]
     *  
     */
    (rMCDFIR_0, bit(62)) ? TBDDefaultCallout;

    /** MCDFIR_0[63]
     *  
     */
    (rMCDFIR_0, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip MCDFIR 1
################################################################################

rule rMCDFIR_1
{
  CHECK_STOP:
    MCDFIR_1 & ~MCDFIR_1_MASK & ~MCDFIR_1_ACT0 & ~MCDFIR_1_ACT1;
  RECOVERABLE:
    MCDFIR_1 & ~MCDFIR_1_MASK & ~MCDFIR_1_ACT0 &  MCDFIR_1_ACT1;
};

group gMCDFIR_1 filter singlebit
{
    /** MCDFIR_1[0]
     *  
     */
    (rMCDFIR_1, bit(0)) ? TBDDefaultCallout;

    /** MCDFIR_1[1]
     *  
     */
    (rMCDFIR_1, bit(1)) ? TBDDefaultCallout;

    /** MCDFIR_1[2]
     *  
     */
    (rMCDFIR_1, bit(2)) ? TBDDefaultCallout;

    /** MCDFIR_1[3]
     *  
     */
    (rMCDFIR_1, bit(3)) ? TBDDefaultCallout;

    /** MCDFIR_1[4]
     *  
     */
    (rMCDFIR_1, bit(4)) ? TBDDefaultCallout;

    /** MCDFIR_1[5]
     *  
     */
    (rMCDFIR_1, bit(5)) ? TBDDefaultCallout;

    /** MCDFIR_1[6]
     *  
     */
    (rMCDFIR_1, bit(6)) ? TBDDefaultCallout;

    /** MCDFIR_1[7]
     *  
     */
    (rMCDFIR_1, bit(7)) ? TBDDefaultCallout;

    /** MCDFIR_1[8]
     *  
     */
    (rMCDFIR_1, bit(8)) ? TBDDefaultCallout;

    /** MCDFIR_1[9]
     *  
     */
    (rMCDFIR_1, bit(9)) ? TBDDefaultCallout;

    /** MCDFIR_1[10]
     *  
     */
    (rMCDFIR_1, bit(10)) ? TBDDefaultCallout;

    /** MCDFIR_1[11]
     *  
     */
    (rMCDFIR_1, bit(11)) ? TBDDefaultCallout;

    /** MCDFIR_1[12]
     *  
     */
    (rMCDFIR_1, bit(12)) ? TBDDefaultCallout;

    /** MCDFIR_1[13]
     *  
     */
    (rMCDFIR_1, bit(13)) ? TBDDefaultCallout;

    /** MCDFIR_1[14]
     *  
     */
    (rMCDFIR_1, bit(14)) ? TBDDefaultCallout;

    /** MCDFIR_1[15]
     *  
     */
    (rMCDFIR_1, bit(15)) ? TBDDefaultCallout;

    /** MCDFIR_1[16]
     *  
     */
    (rMCDFIR_1, bit(16)) ? TBDDefaultCallout;

    /** MCDFIR_1[17]
     *  
     */
    (rMCDFIR_1, bit(17)) ? TBDDefaultCallout;

    /** MCDFIR_1[18]
     *  
     */
    (rMCDFIR_1, bit(18)) ? TBDDefaultCallout;

    /** MCDFIR_1[19]
     *  
     */
    (rMCDFIR_1, bit(19)) ? TBDDefaultCallout;

    /** MCDFIR_1[20]
     *  
     */
    (rMCDFIR_1, bit(20)) ? TBDDefaultCallout;

    /** MCDFIR_1[21]
     *  
     */
    (rMCDFIR_1, bit(21)) ? TBDDefaultCallout;

    /** MCDFIR_1[22]
     *  
     */
    (rMCDFIR_1, bit(22)) ? TBDDefaultCallout;

    /** MCDFIR_1[23]
     *  
     */
    (rMCDFIR_1, bit(23)) ? TBDDefaultCallout;

    /** MCDFIR_1[24]
     *  
     */
    (rMCDFIR_1, bit(24)) ? TBDDefaultCallout;

    /** MCDFIR_1[25]
     *  
     */
    (rMCDFIR_1, bit(25)) ? TBDDefaultCallout;

    /** MCDFIR_1[26]
     *  
     */
    (rMCDFIR_1, bit(26)) ? TBDDefaultCallout;

    /** MCDFIR_1[27]
     *  
     */
    (rMCDFIR_1, bit(27)) ? TBDDefaultCallout;

    /** MCDFIR_1[28]
     *  
     */
    (rMCDFIR_1, bit(28)) ? TBDDefaultCallout;

    /** MCDFIR_1[29]
     *  
     */
    (rMCDFIR_1, bit(29)) ? TBDDefaultCallout;

    /** MCDFIR_1[30]
     *  
     */
    (rMCDFIR_1, bit(30)) ? TBDDefaultCallout;

    /** MCDFIR_1[31]
     *  
     */
    (rMCDFIR_1, bit(31)) ? TBDDefaultCallout;

    /** MCDFIR_1[32]
     *  
     */
    (rMCDFIR_1, bit(32)) ? TBDDefaultCallout;

    /** MCDFIR_1[33]
     *  
     */
    (rMCDFIR_1, bit(33)) ? TBDDefaultCallout;

    /** MCDFIR_1[34]
     *  
     */
    (rMCDFIR_1, bit(34)) ? TBDDefaultCallout;

    /** MCDFIR_1[35]
     *  
     */
    (rMCDFIR_1, bit(35)) ? TBDDefaultCallout;

    /** MCDFIR_1[36]
     *  
     */
    (rMCDFIR_1, bit(36)) ? TBDDefaultCallout;

    /** MCDFIR_1[37]
     *  
     */
    (rMCDFIR_1, bit(37)) ? TBDDefaultCallout;

    /** MCDFIR_1[38]
     *  
     */
    (rMCDFIR_1, bit(38)) ? TBDDefaultCallout;

    /** MCDFIR_1[39]
     *  
     */
    (rMCDFIR_1, bit(39)) ? TBDDefaultCallout;

    /** MCDFIR_1[40]
     *  
     */
    (rMCDFIR_1, bit(40)) ? TBDDefaultCallout;

    /** MCDFIR_1[41]
     *  
     */
    (rMCDFIR_1, bit(41)) ? TBDDefaultCallout;

    /** MCDFIR_1[42]
     *  
     */
    (rMCDFIR_1, bit(42)) ? TBDDefaultCallout;

    /** MCDFIR_1[43]
     *  
     */
    (rMCDFIR_1, bit(43)) ? TBDDefaultCallout;

    /** MCDFIR_1[44]
     *  
     */
    (rMCDFIR_1, bit(44)) ? TBDDefaultCallout;

    /** MCDFIR_1[45]
     *  
     */
    (rMCDFIR_1, bit(45)) ? TBDDefaultCallout;

    /** MCDFIR_1[46]
     *  
     */
    (rMCDFIR_1, bit(46)) ? TBDDefaultCallout;

    /** MCDFIR_1[47]
     *  
     */
    (rMCDFIR_1, bit(47)) ? TBDDefaultCallout;

    /** MCDFIR_1[48]
     *  
     */
    (rMCDFIR_1, bit(48)) ? TBDDefaultCallout;

    /** MCDFIR_1[49]
     *  
     */
    (rMCDFIR_1, bit(49)) ? TBDDefaultCallout;

    /** MCDFIR_1[50]
     *  
     */
    (rMCDFIR_1, bit(50)) ? TBDDefaultCallout;

    /** MCDFIR_1[51]
     *  
     */
    (rMCDFIR_1, bit(51)) ? TBDDefaultCallout;

    /** MCDFIR_1[52]
     *  
     */
    (rMCDFIR_1, bit(52)) ? TBDDefaultCallout;

    /** MCDFIR_1[53]
     *  
     */
    (rMCDFIR_1, bit(53)) ? TBDDefaultCallout;

    /** MCDFIR_1[54]
     *  
     */
    (rMCDFIR_1, bit(54)) ? TBDDefaultCallout;

    /** MCDFIR_1[55]
     *  
     */
    (rMCDFIR_1, bit(55)) ? TBDDefaultCallout;

    /** MCDFIR_1[56]
     *  
     */
    (rMCDFIR_1, bit(56)) ? TBDDefaultCallout;

    /** MCDFIR_1[57]
     *  
     */
    (rMCDFIR_1, bit(57)) ? TBDDefaultCallout;

    /** MCDFIR_1[58]
     *  
     */
    (rMCDFIR_1, bit(58)) ? TBDDefaultCallout;

    /** MCDFIR_1[59]
     *  
     */
    (rMCDFIR_1, bit(59)) ? TBDDefaultCallout;

    /** MCDFIR_1[60]
     *  
     */
    (rMCDFIR_1, bit(60)) ? TBDDefaultCallout;

    /** MCDFIR_1[61]
     *  
     */
    (rMCDFIR_1, bit(61)) ? TBDDefaultCallout;

    /** MCDFIR_1[62]
     *  
     */
    (rMCDFIR_1, bit(62)) ? TBDDefaultCallout;

    /** MCDFIR_1[63]
     *  
     */
    (rMCDFIR_1, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip VASFIR
################################################################################

rule rVASFIR
{
  CHECK_STOP:
    VASFIR & ~VASFIR_MASK & ~VASFIR_ACT0 & ~VASFIR_ACT1;
  RECOVERABLE:
    VASFIR & ~VASFIR_MASK & ~VASFIR_ACT0 &  VASFIR_ACT1;
  UNIT_CS:
    VASFIR & ~VASFIR_MASK &  VASFIR_ACT0 &  VASFIR_ACT1;
};

group gVASFIR filter singlebit
{
    /** VASFIR[0]
     *  
     */
    (rVASFIR, bit(0)) ? TBDDefaultCallout;

    /** VASFIR[1]
     *  
     */
    (rVASFIR, bit(1)) ? TBDDefaultCallout;

    /** VASFIR[2]
     *  
     */
    (rVASFIR, bit(2)) ? TBDDefaultCallout;

    /** VASFIR[3]
     *  
     */
    (rVASFIR, bit(3)) ? TBDDefaultCallout;

    /** VASFIR[4]
     *  
     */
    (rVASFIR, bit(4)) ? TBDDefaultCallout;

    /** VASFIR[5]
     *  
     */
    (rVASFIR, bit(5)) ? TBDDefaultCallout;

    /** VASFIR[6]
     *  
     */
    (rVASFIR, bit(6)) ? TBDDefaultCallout;

    /** VASFIR[7]
     *  
     */
    (rVASFIR, bit(7)) ? TBDDefaultCallout;

    /** VASFIR[8]
     *  
     */
    (rVASFIR, bit(8)) ? TBDDefaultCallout;

    /** VASFIR[9]
     *  
     */
    (rVASFIR, bit(9)) ? TBDDefaultCallout;

    /** VASFIR[10]
     *  
     */
    (rVASFIR, bit(10)) ? TBDDefaultCallout;

    /** VASFIR[11]
     *  
     */
    (rVASFIR, bit(11)) ? TBDDefaultCallout;

    /** VASFIR[12]
     *  
     */
    (rVASFIR, bit(12)) ? TBDDefaultCallout;

    /** VASFIR[13]
     *  
     */
    (rVASFIR, bit(13)) ? TBDDefaultCallout;

    /** VASFIR[14]
     *  
     */
    (rVASFIR, bit(14)) ? TBDDefaultCallout;

    /** VASFIR[15]
     *  
     */
    (rVASFIR, bit(15)) ? TBDDefaultCallout;

    /** VASFIR[16]
     *  
     */
    (rVASFIR, bit(16)) ? TBDDefaultCallout;

    /** VASFIR[17]
     *  
     */
    (rVASFIR, bit(17)) ? TBDDefaultCallout;

    /** VASFIR[18]
     *  
     */
    (rVASFIR, bit(18)) ? TBDDefaultCallout;

    /** VASFIR[19]
     *  
     */
    (rVASFIR, bit(19)) ? TBDDefaultCallout;

    /** VASFIR[20]
     *  
     */
    (rVASFIR, bit(20)) ? TBDDefaultCallout;

    /** VASFIR[21]
     *  
     */
    (rVASFIR, bit(21)) ? TBDDefaultCallout;

    /** VASFIR[22]
     *  
     */
    (rVASFIR, bit(22)) ? TBDDefaultCallout;

    /** VASFIR[23]
     *  
     */
    (rVASFIR, bit(23)) ? TBDDefaultCallout;

    /** VASFIR[24]
     *  
     */
    (rVASFIR, bit(24)) ? TBDDefaultCallout;

    /** VASFIR[25]
     *  
     */
    (rVASFIR, bit(25)) ? TBDDefaultCallout;

    /** VASFIR[26]
     *  
     */
    (rVASFIR, bit(26)) ? TBDDefaultCallout;

    /** VASFIR[27]
     *  
     */
    (rVASFIR, bit(27)) ? TBDDefaultCallout;

    /** VASFIR[28]
     *  
     */
    (rVASFIR, bit(28)) ? TBDDefaultCallout;

    /** VASFIR[29]
     *  
     */
    (rVASFIR, bit(29)) ? TBDDefaultCallout;

    /** VASFIR[30]
     *  
     */
    (rVASFIR, bit(30)) ? TBDDefaultCallout;

    /** VASFIR[31]
     *  
     */
    (rVASFIR, bit(31)) ? TBDDefaultCallout;

    /** VASFIR[32]
     *  
     */
    (rVASFIR, bit(32)) ? TBDDefaultCallout;

    /** VASFIR[33]
     *  
     */
    (rVASFIR, bit(33)) ? TBDDefaultCallout;

    /** VASFIR[34]
     *  
     */
    (rVASFIR, bit(34)) ? TBDDefaultCallout;

    /** VASFIR[35]
     *  
     */
    (rVASFIR, bit(35)) ? TBDDefaultCallout;

    /** VASFIR[36]
     *  
     */
    (rVASFIR, bit(36)) ? TBDDefaultCallout;

    /** VASFIR[37]
     *  
     */
    (rVASFIR, bit(37)) ? TBDDefaultCallout;

    /** VASFIR[38]
     *  
     */
    (rVASFIR, bit(38)) ? TBDDefaultCallout;

    /** VASFIR[39]
     *  
     */
    (rVASFIR, bit(39)) ? TBDDefaultCallout;

    /** VASFIR[40]
     *  
     */
    (rVASFIR, bit(40)) ? TBDDefaultCallout;

    /** VASFIR[41]
     *  
     */
    (rVASFIR, bit(41)) ? TBDDefaultCallout;

    /** VASFIR[42]
     *  
     */
    (rVASFIR, bit(42)) ? TBDDefaultCallout;

    /** VASFIR[43]
     *  
     */
    (rVASFIR, bit(43)) ? TBDDefaultCallout;

    /** VASFIR[44]
     *  
     */
    (rVASFIR, bit(44)) ? TBDDefaultCallout;

    /** VASFIR[45]
     *  
     */
    (rVASFIR, bit(45)) ? TBDDefaultCallout;

    /** VASFIR[46]
     *  
     */
    (rVASFIR, bit(46)) ? TBDDefaultCallout;

    /** VASFIR[47]
     *  
     */
    (rVASFIR, bit(47)) ? TBDDefaultCallout;

    /** VASFIR[48]
     *  
     */
    (rVASFIR, bit(48)) ? TBDDefaultCallout;

    /** VASFIR[49]
     *  
     */
    (rVASFIR, bit(49)) ? TBDDefaultCallout;

    /** VASFIR[50]
     *  
     */
    (rVASFIR, bit(50)) ? TBDDefaultCallout;

    /** VASFIR[51]
     *  
     */
    (rVASFIR, bit(51)) ? TBDDefaultCallout;

    /** VASFIR[52]
     *  
     */
    (rVASFIR, bit(52)) ? TBDDefaultCallout;

    /** VASFIR[53]
     *  
     */
    (rVASFIR, bit(53)) ? TBDDefaultCallout;

    /** VASFIR[54]
     *  
     */
    (rVASFIR, bit(54)) ? TBDDefaultCallout;

    /** VASFIR[55]
     *  
     */
    (rVASFIR, bit(55)) ? TBDDefaultCallout;

    /** VASFIR[56]
     *  
     */
    (rVASFIR, bit(56)) ? TBDDefaultCallout;

    /** VASFIR[57]
     *  
     */
    (rVASFIR, bit(57)) ? TBDDefaultCallout;

    /** VASFIR[58]
     *  
     */
    (rVASFIR, bit(58)) ? TBDDefaultCallout;

    /** VASFIR[59]
     *  
     */
    (rVASFIR, bit(59)) ? TBDDefaultCallout;

    /** VASFIR[60]
     *  
     */
    (rVASFIR, bit(60)) ? TBDDefaultCallout;

    /** VASFIR[61]
     *  
     */
    (rVASFIR, bit(61)) ? TBDDefaultCallout;

    /** VASFIR[62]
     *  
     */
    (rVASFIR, bit(62)) ? TBDDefaultCallout;

    /** VASFIR[63]
     *  
     */
    (rVASFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# N2 Chiplet FIR
################################################################################

rule rN2_CHIPLET_FIR
{
  CHECK_STOP:
     N2_CHIPLET_CS_FIR       & ~N2_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (N2_CHIPLET_RE_FIR >> 2) & ~N2_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gN2_CHIPLET_FIR filter singlebit
{
    /** N2_CHIPLET_FIR[3]
     *  Attention from N2_LFIR
     */
    (rN2_CHIPLET_FIR, bit(3)) ? analyze(gN2_LFIR);

    /** N2_CHIPLET_FIR[4]
     *  Attention from CXAFIR 1
     */
    (rN2_CHIPLET_FIR, bit(4)) ? analyzeConnectedCAPP1;

    /** N2_CHIPLET_FIR[5]
     *  Attention from PHBNFIR 0
     */
    (rN2_CHIPLET_FIR, bit(5)) ? analyzeConnectedPHB0;

    /** N2_CHIPLET_FIR[6]
     *  Attention from PHBNFIR 1
     */
    (rN2_CHIPLET_FIR, bit(6)) ? analyzeConnectedPHB1;

    /** N2_CHIPLET_FIR[7]
     *  Attention from PHBNFIR 3
     */
    (rN2_CHIPLET_FIR, bit(7)) ? analyzeConnectedPHB3;

    /** N2_CHIPLET_FIR[8]
     *  Attention from PHBNFIR 2
     */
    (rN2_CHIPLET_FIR, bit(8)) ? analyzeConnectedPHB2;

    /** N2_CHIPLET_FIR[9]
     *  Attention from PHBNFIR 4
     */
    (rN2_CHIPLET_FIR, bit(9)) ? analyzeConnectedPHB4;

    /** N2_CHIPLET_FIR[10]
     *  Attention from PHBNFIR 5
     */
    (rN2_CHIPLET_FIR, bit(10)) ? analyzeConnectedPHB5;

    /** N2_CHIPLET_FIR[11]
     *  Attention from PSIFIR
     */
    (rN2_CHIPLET_FIR, bit(11)) ? analyze(gPSIFIR);

};

################################################################################
# N2 Chiplet Unit Checkstop FIR
################################################################################

rule rN2_CHIPLET_UCS_FIR
{
  UNIT_CS:
    N2_CHIPLET_UCS_FIR & ~N2_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gN2_CHIPLET_UCS_FIR filter singlebit
{
    /** N2_CHIPLET_UCS_FIR[1]
     *  Attention from CXAFIR 1
     */
    (rN2_CHIPLET_UCS_FIR, bit(1)) ? analyzeConnectedCAPP1;

};

################################################################################
# P9 chip N2_LFIR
################################################################################

rule rN2_LFIR
{
  CHECK_STOP:
    N2_LFIR & ~N2_LFIR_MASK & ~N2_LFIR_ACT0 & ~N2_LFIR_ACT1;
  RECOVERABLE:
    N2_LFIR & ~N2_LFIR_MASK & ~N2_LFIR_ACT0 &  N2_LFIR_ACT1;
};

group gN2_LFIR filter singlebit
{
    /** N2_LFIR[0]
     *  
     */
    (rN2_LFIR, bit(0)) ? TBDDefaultCallout;

    /** N2_LFIR[1]
     *  
     */
    (rN2_LFIR, bit(1)) ? TBDDefaultCallout;

    /** N2_LFIR[2]
     *  
     */
    (rN2_LFIR, bit(2)) ? TBDDefaultCallout;

    /** N2_LFIR[3]
     *  
     */
    (rN2_LFIR, bit(3)) ? TBDDefaultCallout;

    /** N2_LFIR[4]
     *  
     */
    (rN2_LFIR, bit(4)) ? TBDDefaultCallout;

    /** N2_LFIR[5]
     *  
     */
    (rN2_LFIR, bit(5)) ? TBDDefaultCallout;

    /** N2_LFIR[6]
     *  
     */
    (rN2_LFIR, bit(6)) ? TBDDefaultCallout;

    /** N2_LFIR[7]
     *  
     */
    (rN2_LFIR, bit(7)) ? TBDDefaultCallout;

    /** N2_LFIR[8]
     *  
     */
    (rN2_LFIR, bit(8)) ? TBDDefaultCallout;

    /** N2_LFIR[9]
     *  
     */
    (rN2_LFIR, bit(9)) ? TBDDefaultCallout;

    /** N2_LFIR[10]
     *  
     */
    (rN2_LFIR, bit(10)) ? TBDDefaultCallout;

    /** N2_LFIR[11]
     *  
     */
    (rN2_LFIR, bit(11)) ? TBDDefaultCallout;

    /** N2_LFIR[12]
     *  
     */
    (rN2_LFIR, bit(12)) ? TBDDefaultCallout;

    /** N2_LFIR[13]
     *  
     */
    (rN2_LFIR, bit(13)) ? TBDDefaultCallout;

    /** N2_LFIR[14]
     *  
     */
    (rN2_LFIR, bit(14)) ? TBDDefaultCallout;

    /** N2_LFIR[15]
     *  
     */
    (rN2_LFIR, bit(15)) ? TBDDefaultCallout;

    /** N2_LFIR[16]
     *  
     */
    (rN2_LFIR, bit(16)) ? TBDDefaultCallout;

    /** N2_LFIR[17]
     *  
     */
    (rN2_LFIR, bit(17)) ? TBDDefaultCallout;

    /** N2_LFIR[18]
     *  
     */
    (rN2_LFIR, bit(18)) ? TBDDefaultCallout;

    /** N2_LFIR[19]
     *  
     */
    (rN2_LFIR, bit(19)) ? TBDDefaultCallout;

    /** N2_LFIR[20]
     *  
     */
    (rN2_LFIR, bit(20)) ? TBDDefaultCallout;

    /** N2_LFIR[21]
     *  
     */
    (rN2_LFIR, bit(21)) ? TBDDefaultCallout;

    /** N2_LFIR[22]
     *  
     */
    (rN2_LFIR, bit(22)) ? TBDDefaultCallout;

    /** N2_LFIR[23]
     *  
     */
    (rN2_LFIR, bit(23)) ? TBDDefaultCallout;

    /** N2_LFIR[24]
     *  
     */
    (rN2_LFIR, bit(24)) ? TBDDefaultCallout;

    /** N2_LFIR[25]
     *  
     */
    (rN2_LFIR, bit(25)) ? TBDDefaultCallout;

    /** N2_LFIR[26]
     *  
     */
    (rN2_LFIR, bit(26)) ? TBDDefaultCallout;

    /** N2_LFIR[27]
     *  
     */
    (rN2_LFIR, bit(27)) ? TBDDefaultCallout;

    /** N2_LFIR[28]
     *  
     */
    (rN2_LFIR, bit(28)) ? TBDDefaultCallout;

    /** N2_LFIR[29]
     *  
     */
    (rN2_LFIR, bit(29)) ? TBDDefaultCallout;

    /** N2_LFIR[30]
     *  
     */
    (rN2_LFIR, bit(30)) ? TBDDefaultCallout;

    /** N2_LFIR[31]
     *  
     */
    (rN2_LFIR, bit(31)) ? TBDDefaultCallout;

    /** N2_LFIR[32]
     *  
     */
    (rN2_LFIR, bit(32)) ? TBDDefaultCallout;

    /** N2_LFIR[33]
     *  
     */
    (rN2_LFIR, bit(33)) ? TBDDefaultCallout;

    /** N2_LFIR[34]
     *  
     */
    (rN2_LFIR, bit(34)) ? TBDDefaultCallout;

    /** N2_LFIR[35]
     *  
     */
    (rN2_LFIR, bit(35)) ? TBDDefaultCallout;

    /** N2_LFIR[36]
     *  
     */
    (rN2_LFIR, bit(36)) ? TBDDefaultCallout;

    /** N2_LFIR[37]
     *  
     */
    (rN2_LFIR, bit(37)) ? TBDDefaultCallout;

    /** N2_LFIR[38]
     *  
     */
    (rN2_LFIR, bit(38)) ? TBDDefaultCallout;

    /** N2_LFIR[39]
     *  
     */
    (rN2_LFIR, bit(39)) ? TBDDefaultCallout;

    /** N2_LFIR[40]
     *  
     */
    (rN2_LFIR, bit(40)) ? TBDDefaultCallout;

    /** N2_LFIR[41]
     *  
     */
    (rN2_LFIR, bit(41)) ? TBDDefaultCallout;

    /** N2_LFIR[42]
     *  
     */
    (rN2_LFIR, bit(42)) ? TBDDefaultCallout;

    /** N2_LFIR[43]
     *  
     */
    (rN2_LFIR, bit(43)) ? TBDDefaultCallout;

    /** N2_LFIR[44]
     *  
     */
    (rN2_LFIR, bit(44)) ? TBDDefaultCallout;

    /** N2_LFIR[45]
     *  
     */
    (rN2_LFIR, bit(45)) ? TBDDefaultCallout;

    /** N2_LFIR[46]
     *  
     */
    (rN2_LFIR, bit(46)) ? TBDDefaultCallout;

    /** N2_LFIR[47]
     *  
     */
    (rN2_LFIR, bit(47)) ? TBDDefaultCallout;

    /** N2_LFIR[48]
     *  
     */
    (rN2_LFIR, bit(48)) ? TBDDefaultCallout;

    /** N2_LFIR[49]
     *  
     */
    (rN2_LFIR, bit(49)) ? TBDDefaultCallout;

    /** N2_LFIR[50]
     *  
     */
    (rN2_LFIR, bit(50)) ? TBDDefaultCallout;

    /** N2_LFIR[51]
     *  
     */
    (rN2_LFIR, bit(51)) ? TBDDefaultCallout;

    /** N2_LFIR[52]
     *  
     */
    (rN2_LFIR, bit(52)) ? TBDDefaultCallout;

    /** N2_LFIR[53]
     *  
     */
    (rN2_LFIR, bit(53)) ? TBDDefaultCallout;

    /** N2_LFIR[54]
     *  
     */
    (rN2_LFIR, bit(54)) ? TBDDefaultCallout;

    /** N2_LFIR[55]
     *  
     */
    (rN2_LFIR, bit(55)) ? TBDDefaultCallout;

    /** N2_LFIR[56]
     *  
     */
    (rN2_LFIR, bit(56)) ? TBDDefaultCallout;

    /** N2_LFIR[57]
     *  
     */
    (rN2_LFIR, bit(57)) ? TBDDefaultCallout;

    /** N2_LFIR[58]
     *  
     */
    (rN2_LFIR, bit(58)) ? TBDDefaultCallout;

    /** N2_LFIR[59]
     *  
     */
    (rN2_LFIR, bit(59)) ? TBDDefaultCallout;

    /** N2_LFIR[60]
     *  
     */
    (rN2_LFIR, bit(60)) ? TBDDefaultCallout;

    /** N2_LFIR[61]
     *  
     */
    (rN2_LFIR, bit(61)) ? TBDDefaultCallout;

    /** N2_LFIR[62]
     *  
     */
    (rN2_LFIR, bit(62)) ? TBDDefaultCallout;

    /** N2_LFIR[63]
     *  
     */
    (rN2_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PSIFIR
################################################################################

rule rPSIFIR
{
  CHECK_STOP:
    PSIFIR & ~PSIFIR_MASK & ~PSIFIR_ACT0 & ~PSIFIR_ACT1;
  RECOVERABLE:
    PSIFIR & ~PSIFIR_MASK & ~PSIFIR_ACT0 &  PSIFIR_ACT1;
};

group gPSIFIR filter singlebit
{
    /** PSIFIR[0]
     *  
     */
    (rPSIFIR, bit(0)) ? TBDDefaultCallout;

    /** PSIFIR[1]
     *  
     */
    (rPSIFIR, bit(1)) ? TBDDefaultCallout;

    /** PSIFIR[2]
     *  
     */
    (rPSIFIR, bit(2)) ? TBDDefaultCallout;

    /** PSIFIR[3]
     *  
     */
    (rPSIFIR, bit(3)) ? TBDDefaultCallout;

    /** PSIFIR[4]
     *  
     */
    (rPSIFIR, bit(4)) ? TBDDefaultCallout;

    /** PSIFIR[5]
     *  
     */
    (rPSIFIR, bit(5)) ? TBDDefaultCallout;

    /** PSIFIR[6]
     *  
     */
    (rPSIFIR, bit(6)) ? TBDDefaultCallout;

    /** PSIFIR[7]
     *  
     */
    (rPSIFIR, bit(7)) ? TBDDefaultCallout;

    /** PSIFIR[8]
     *  
     */
    (rPSIFIR, bit(8)) ? TBDDefaultCallout;

    /** PSIFIR[9]
     *  
     */
    (rPSIFIR, bit(9)) ? TBDDefaultCallout;

    /** PSIFIR[10]
     *  
     */
    (rPSIFIR, bit(10)) ? TBDDefaultCallout;

    /** PSIFIR[11]
     *  
     */
    (rPSIFIR, bit(11)) ? TBDDefaultCallout;

    /** PSIFIR[12]
     *  
     */
    (rPSIFIR, bit(12)) ? TBDDefaultCallout;

    /** PSIFIR[13]
     *  
     */
    (rPSIFIR, bit(13)) ? TBDDefaultCallout;

    /** PSIFIR[14]
     *  
     */
    (rPSIFIR, bit(14)) ? TBDDefaultCallout;

    /** PSIFIR[15]
     *  
     */
    (rPSIFIR, bit(15)) ? TBDDefaultCallout;

    /** PSIFIR[16]
     *  
     */
    (rPSIFIR, bit(16)) ? TBDDefaultCallout;

    /** PSIFIR[17]
     *  
     */
    (rPSIFIR, bit(17)) ? TBDDefaultCallout;

    /** PSIFIR[18]
     *  
     */
    (rPSIFIR, bit(18)) ? TBDDefaultCallout;

    /** PSIFIR[19]
     *  
     */
    (rPSIFIR, bit(19)) ? TBDDefaultCallout;

    /** PSIFIR[20]
     *  
     */
    (rPSIFIR, bit(20)) ? TBDDefaultCallout;

    /** PSIFIR[21]
     *  
     */
    (rPSIFIR, bit(21)) ? TBDDefaultCallout;

    /** PSIFIR[22]
     *  
     */
    (rPSIFIR, bit(22)) ? TBDDefaultCallout;

    /** PSIFIR[23]
     *  
     */
    (rPSIFIR, bit(23)) ? TBDDefaultCallout;

    /** PSIFIR[24]
     *  
     */
    (rPSIFIR, bit(24)) ? TBDDefaultCallout;

    /** PSIFIR[25]
     *  
     */
    (rPSIFIR, bit(25)) ? TBDDefaultCallout;

    /** PSIFIR[26]
     *  
     */
    (rPSIFIR, bit(26)) ? TBDDefaultCallout;

    /** PSIFIR[27]
     *  
     */
    (rPSIFIR, bit(27)) ? TBDDefaultCallout;

    /** PSIFIR[28]
     *  
     */
    (rPSIFIR, bit(28)) ? TBDDefaultCallout;

    /** PSIFIR[29]
     *  
     */
    (rPSIFIR, bit(29)) ? TBDDefaultCallout;

    /** PSIFIR[30]
     *  
     */
    (rPSIFIR, bit(30)) ? TBDDefaultCallout;

    /** PSIFIR[31]
     *  
     */
    (rPSIFIR, bit(31)) ? TBDDefaultCallout;

    /** PSIFIR[32]
     *  
     */
    (rPSIFIR, bit(32)) ? TBDDefaultCallout;

    /** PSIFIR[33]
     *  
     */
    (rPSIFIR, bit(33)) ? TBDDefaultCallout;

    /** PSIFIR[34]
     *  
     */
    (rPSIFIR, bit(34)) ? TBDDefaultCallout;

    /** PSIFIR[35]
     *  
     */
    (rPSIFIR, bit(35)) ? TBDDefaultCallout;

    /** PSIFIR[36]
     *  
     */
    (rPSIFIR, bit(36)) ? TBDDefaultCallout;

    /** PSIFIR[37]
     *  
     */
    (rPSIFIR, bit(37)) ? TBDDefaultCallout;

    /** PSIFIR[38]
     *  
     */
    (rPSIFIR, bit(38)) ? TBDDefaultCallout;

    /** PSIFIR[39]
     *  
     */
    (rPSIFIR, bit(39)) ? TBDDefaultCallout;

    /** PSIFIR[40]
     *  
     */
    (rPSIFIR, bit(40)) ? TBDDefaultCallout;

    /** PSIFIR[41]
     *  
     */
    (rPSIFIR, bit(41)) ? TBDDefaultCallout;

    /** PSIFIR[42]
     *  
     */
    (rPSIFIR, bit(42)) ? TBDDefaultCallout;

    /** PSIFIR[43]
     *  
     */
    (rPSIFIR, bit(43)) ? TBDDefaultCallout;

    /** PSIFIR[44]
     *  
     */
    (rPSIFIR, bit(44)) ? TBDDefaultCallout;

    /** PSIFIR[45]
     *  
     */
    (rPSIFIR, bit(45)) ? TBDDefaultCallout;

    /** PSIFIR[46]
     *  
     */
    (rPSIFIR, bit(46)) ? TBDDefaultCallout;

    /** PSIFIR[47]
     *  
     */
    (rPSIFIR, bit(47)) ? TBDDefaultCallout;

    /** PSIFIR[48]
     *  
     */
    (rPSIFIR, bit(48)) ? TBDDefaultCallout;

    /** PSIFIR[49]
     *  
     */
    (rPSIFIR, bit(49)) ? TBDDefaultCallout;

    /** PSIFIR[50]
     *  
     */
    (rPSIFIR, bit(50)) ? TBDDefaultCallout;

    /** PSIFIR[51]
     *  
     */
    (rPSIFIR, bit(51)) ? TBDDefaultCallout;

    /** PSIFIR[52]
     *  
     */
    (rPSIFIR, bit(52)) ? TBDDefaultCallout;

    /** PSIFIR[53]
     *  
     */
    (rPSIFIR, bit(53)) ? TBDDefaultCallout;

    /** PSIFIR[54]
     *  
     */
    (rPSIFIR, bit(54)) ? TBDDefaultCallout;

    /** PSIFIR[55]
     *  
     */
    (rPSIFIR, bit(55)) ? TBDDefaultCallout;

    /** PSIFIR[56]
     *  
     */
    (rPSIFIR, bit(56)) ? TBDDefaultCallout;

    /** PSIFIR[57]
     *  
     */
    (rPSIFIR, bit(57)) ? TBDDefaultCallout;

    /** PSIFIR[58]
     *  
     */
    (rPSIFIR, bit(58)) ? TBDDefaultCallout;

    /** PSIFIR[59]
     *  
     */
    (rPSIFIR, bit(59)) ? TBDDefaultCallout;

    /** PSIFIR[60]
     *  
     */
    (rPSIFIR, bit(60)) ? TBDDefaultCallout;

    /** PSIFIR[61]
     *  
     */
    (rPSIFIR, bit(61)) ? TBDDefaultCallout;

    /** PSIFIR[62]
     *  
     */
    (rPSIFIR, bit(62)) ? TBDDefaultCallout;

    /** PSIFIR[63]
     *  
     */
    (rPSIFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# N3 Chiplet FIR
################################################################################

rule rN3_CHIPLET_FIR
{
  CHECK_STOP:
     N3_CHIPLET_CS_FIR       & ~N3_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (N3_CHIPLET_RE_FIR >> 2) & ~N3_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gN3_CHIPLET_FIR filter singlebit
{
    /** N3_CHIPLET_FIR[3]
     *  Attention from N3_LFIR
     */
    (rN3_CHIPLET_FIR, bit(3)) ? analyze(gN3_LFIR);

    /** N3_CHIPLET_FIR[4]
     *  Attention from MCFIR 0
     */
    (rN3_CHIPLET_FIR, bit(4)) ? analyzeConnectedMCS0;

    /** N3_CHIPLET_FIR[5]
     *  Attention from MCFIR 1
     */
    (rN3_CHIPLET_FIR, bit(5)) ? analyzeConnectedMCS1;

    /** N3_CHIPLET_FIR[6]
     *  Attention from PBWESTFIR
     */
    (rN3_CHIPLET_FIR, bit(6)) ? analyze(gPBWESTFIR);

    /** N3_CHIPLET_FIR[7]
     *  Attention from PBCENTFIR
     */
    (rN3_CHIPLET_FIR, bit(7)) ? analyze(gPBCENTFIR);

    /** N3_CHIPLET_FIR[8]
     *  Attention from PBEASTFIR
     */
    (rN3_CHIPLET_FIR, bit(8)) ? analyze(gPBEASTFIR);

    /** N3_CHIPLET_FIR[9]
     *  Attention from ENHCAFIR
     */
    (rN3_CHIPLET_FIR, bit(9)) ? analyze(gENHCAFIR);

    /** N3_CHIPLET_FIR[10]
     *  Attention from NPU0FIR
     */
    (rN3_CHIPLET_FIR, bit(10)) ? analyze(gNPU0FIR);

    /** N3_CHIPLET_FIR[11]
     *  Attention from NPU1FIR
     */
    (rN3_CHIPLET_FIR, bit(11)) ? analyze(gNPU1FIR);

    /** N3_CHIPLET_FIR[12]
     *  Attention from PBICQFIR
     */
    (rN3_CHIPLET_FIR, bit(12)) ? analyze(gPBICQFIR);

    /** N3_CHIPLET_FIR[13]
     *  Attention from NMMUFIR
     */
    (rN3_CHIPLET_FIR, bit(13)) ? analyze(gNMMUFIR);

    /** N3_CHIPLET_FIR[14]
     *  Attention from PBPPEFIR
     */
    (rN3_CHIPLET_FIR, bit(14)) ? analyze(gPBPPEFIR);

    /** N3_CHIPLET_FIR[15]
     *  Attention from PBIOEFIR
     */
    (rN3_CHIPLET_FIR, bit(15)) ? analyze(gPBIOEFIR);

    /** N3_CHIPLET_FIR[16]
     *  Attention from PBIOOFIR
     */
    (rN3_CHIPLET_FIR, bit(16)) ? analyze(gPBIOOFIR);

    /** N3_CHIPLET_FIR[17]
     *  Attention from INTCQFIR
     */
    (rN3_CHIPLET_FIR, bit(17)) ? analyze(gINTCQFIR);

    /** N3_CHIPLET_FIR[18]
     *  Attention from PBAFIR
     */
    (rN3_CHIPLET_FIR, bit(18)) ? analyze(gPBAFIR);

    /** N3_CHIPLET_FIR[19]
     *  Attention from PSIHBFIR
     */
    (rN3_CHIPLET_FIR, bit(19)) ? analyze(gPSIHBFIR);

    /** N3_CHIPLET_FIR[20]
     *  Attention from PBAMFIR
     */
    (rN3_CHIPLET_FIR, bit(20)) ? analyze(gPBAMFIR);

    /** N3_CHIPLET_FIR[21]
     *  Attention from EHHCAFIR
     */
    (rN3_CHIPLET_FIR, bit(21)) ? analyze(gEHHCAFIR);

    /** N3_CHIPLET_FIR[22]
     *  Attention from EHHCAFIR
     */
    (rN3_CHIPLET_FIR, bit(22)) ? analyze(gEHHCAFIR);

};

################################################################################
# N3 Chiplet Unit Checkstop FIR
################################################################################

rule rN3_CHIPLET_UCS_FIR
{
  UNIT_CS:
    N3_CHIPLET_UCS_FIR & ~N3_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gN3_CHIPLET_UCS_FIR filter singlebit
{
    /** N3_CHIPLET_UCS_FIR[1]
     *  Attention from MCFIR 0
     */
    (rN3_CHIPLET_UCS_FIR, bit(1)) ? analyzeConnectedMCS0;

    /** N3_CHIPLET_UCS_FIR[2]
     *  Attention from MCFIR 1
     */
    (rN3_CHIPLET_UCS_FIR, bit(2)) ? analyzeConnectedMCS1;

    /** N3_CHIPLET_UCS_FIR[7]
     *  Attention from NPU0FIR
     */
    (rN3_CHIPLET_UCS_FIR, bit(7)) ? analyze(gNPU0FIR);

    /** N3_CHIPLET_UCS_FIR[8]
     *  Attention from NPU1FIR
     */
    (rN3_CHIPLET_UCS_FIR, bit(8)) ? analyze(gNPU1FIR);

    /** N3_CHIPLET_UCS_FIR[9]
     *  Attention from PBICQFIR
     */
    (rN3_CHIPLET_UCS_FIR, bit(9)) ? analyze(gPBICQFIR);

    /** N3_CHIPLET_UCS_FIR[10]
     *  Attention from NMMUFIR
     */
    (rN3_CHIPLET_UCS_FIR, bit(10)) ? analyze(gNMMUFIR);

};

################################################################################
# N3 Chiplet Host Attention FIR
################################################################################

rule rN3_CHIPLET_HA_FIR
{
  HOST_ATTN:
    N3_CHIPLET_HA_FIR & ~N3_CHIPLET_HA_FIR_MASK & `7fffffffffffffff`;
};

group gN3_CHIPLET_HA_FIR filter singlebit
{
    /** N3_CHIPLET_HA_FIR[1]
     *  Attention from MCFIR 0
     */
    (rN3_CHIPLET_HA_FIR, bit(1)) ? analyzeConnectedMCS0;

    /** N3_CHIPLET_HA_FIR[2]
     *  Attention from MCFIR 1
     */
    (rN3_CHIPLET_HA_FIR, bit(2)) ? analyzeConnectedMCS1;

};

################################################################################
# P9 chip N3_LFIR
################################################################################

rule rN3_LFIR
{
  CHECK_STOP:
    N3_LFIR & ~N3_LFIR_MASK & ~N3_LFIR_ACT0 & ~N3_LFIR_ACT1;
  RECOVERABLE:
    N3_LFIR & ~N3_LFIR_MASK & ~N3_LFIR_ACT0 &  N3_LFIR_ACT1;
};

group gN3_LFIR filter singlebit
{
    /** N3_LFIR[0]
     *  
     */
    (rN3_LFIR, bit(0)) ? TBDDefaultCallout;

    /** N3_LFIR[1]
     *  
     */
    (rN3_LFIR, bit(1)) ? TBDDefaultCallout;

    /** N3_LFIR[2]
     *  
     */
    (rN3_LFIR, bit(2)) ? TBDDefaultCallout;

    /** N3_LFIR[3]
     *  
     */
    (rN3_LFIR, bit(3)) ? TBDDefaultCallout;

    /** N3_LFIR[4]
     *  
     */
    (rN3_LFIR, bit(4)) ? TBDDefaultCallout;

    /** N3_LFIR[5]
     *  
     */
    (rN3_LFIR, bit(5)) ? TBDDefaultCallout;

    /** N3_LFIR[6]
     *  
     */
    (rN3_LFIR, bit(6)) ? TBDDefaultCallout;

    /** N3_LFIR[7]
     *  
     */
    (rN3_LFIR, bit(7)) ? TBDDefaultCallout;

    /** N3_LFIR[8]
     *  
     */
    (rN3_LFIR, bit(8)) ? TBDDefaultCallout;

    /** N3_LFIR[9]
     *  
     */
    (rN3_LFIR, bit(9)) ? TBDDefaultCallout;

    /** N3_LFIR[10]
     *  
     */
    (rN3_LFIR, bit(10)) ? TBDDefaultCallout;

    /** N3_LFIR[11]
     *  
     */
    (rN3_LFIR, bit(11)) ? TBDDefaultCallout;

    /** N3_LFIR[12]
     *  
     */
    (rN3_LFIR, bit(12)) ? TBDDefaultCallout;

    /** N3_LFIR[13]
     *  
     */
    (rN3_LFIR, bit(13)) ? TBDDefaultCallout;

    /** N3_LFIR[14]
     *  
     */
    (rN3_LFIR, bit(14)) ? TBDDefaultCallout;

    /** N3_LFIR[15]
     *  
     */
    (rN3_LFIR, bit(15)) ? TBDDefaultCallout;

    /** N3_LFIR[16]
     *  
     */
    (rN3_LFIR, bit(16)) ? TBDDefaultCallout;

    /** N3_LFIR[17]
     *  
     */
    (rN3_LFIR, bit(17)) ? TBDDefaultCallout;

    /** N3_LFIR[18]
     *  
     */
    (rN3_LFIR, bit(18)) ? TBDDefaultCallout;

    /** N3_LFIR[19]
     *  
     */
    (rN3_LFIR, bit(19)) ? TBDDefaultCallout;

    /** N3_LFIR[20]
     *  
     */
    (rN3_LFIR, bit(20)) ? TBDDefaultCallout;

    /** N3_LFIR[21]
     *  
     */
    (rN3_LFIR, bit(21)) ? TBDDefaultCallout;

    /** N3_LFIR[22]
     *  
     */
    (rN3_LFIR, bit(22)) ? TBDDefaultCallout;

    /** N3_LFIR[23]
     *  
     */
    (rN3_LFIR, bit(23)) ? TBDDefaultCallout;

    /** N3_LFIR[24]
     *  
     */
    (rN3_LFIR, bit(24)) ? TBDDefaultCallout;

    /** N3_LFIR[25]
     *  
     */
    (rN3_LFIR, bit(25)) ? TBDDefaultCallout;

    /** N3_LFIR[26]
     *  
     */
    (rN3_LFIR, bit(26)) ? TBDDefaultCallout;

    /** N3_LFIR[27]
     *  
     */
    (rN3_LFIR, bit(27)) ? TBDDefaultCallout;

    /** N3_LFIR[28]
     *  
     */
    (rN3_LFIR, bit(28)) ? TBDDefaultCallout;

    /** N3_LFIR[29]
     *  
     */
    (rN3_LFIR, bit(29)) ? TBDDefaultCallout;

    /** N3_LFIR[30]
     *  
     */
    (rN3_LFIR, bit(30)) ? TBDDefaultCallout;

    /** N3_LFIR[31]
     *  
     */
    (rN3_LFIR, bit(31)) ? TBDDefaultCallout;

    /** N3_LFIR[32]
     *  
     */
    (rN3_LFIR, bit(32)) ? TBDDefaultCallout;

    /** N3_LFIR[33]
     *  
     */
    (rN3_LFIR, bit(33)) ? TBDDefaultCallout;

    /** N3_LFIR[34]
     *  
     */
    (rN3_LFIR, bit(34)) ? TBDDefaultCallout;

    /** N3_LFIR[35]
     *  
     */
    (rN3_LFIR, bit(35)) ? TBDDefaultCallout;

    /** N3_LFIR[36]
     *  
     */
    (rN3_LFIR, bit(36)) ? TBDDefaultCallout;

    /** N3_LFIR[37]
     *  
     */
    (rN3_LFIR, bit(37)) ? TBDDefaultCallout;

    /** N3_LFIR[38]
     *  
     */
    (rN3_LFIR, bit(38)) ? TBDDefaultCallout;

    /** N3_LFIR[39]
     *  
     */
    (rN3_LFIR, bit(39)) ? TBDDefaultCallout;

    /** N3_LFIR[40]
     *  
     */
    (rN3_LFIR, bit(40)) ? TBDDefaultCallout;

    /** N3_LFIR[41]
     *  
     */
    (rN3_LFIR, bit(41)) ? TBDDefaultCallout;

    /** N3_LFIR[42]
     *  
     */
    (rN3_LFIR, bit(42)) ? TBDDefaultCallout;

    /** N3_LFIR[43]
     *  
     */
    (rN3_LFIR, bit(43)) ? TBDDefaultCallout;

    /** N3_LFIR[44]
     *  
     */
    (rN3_LFIR, bit(44)) ? TBDDefaultCallout;

    /** N3_LFIR[45]
     *  
     */
    (rN3_LFIR, bit(45)) ? TBDDefaultCallout;

    /** N3_LFIR[46]
     *  
     */
    (rN3_LFIR, bit(46)) ? TBDDefaultCallout;

    /** N3_LFIR[47]
     *  
     */
    (rN3_LFIR, bit(47)) ? TBDDefaultCallout;

    /** N3_LFIR[48]
     *  
     */
    (rN3_LFIR, bit(48)) ? TBDDefaultCallout;

    /** N3_LFIR[49]
     *  
     */
    (rN3_LFIR, bit(49)) ? TBDDefaultCallout;

    /** N3_LFIR[50]
     *  
     */
    (rN3_LFIR, bit(50)) ? TBDDefaultCallout;

    /** N3_LFIR[51]
     *  
     */
    (rN3_LFIR, bit(51)) ? TBDDefaultCallout;

    /** N3_LFIR[52]
     *  
     */
    (rN3_LFIR, bit(52)) ? TBDDefaultCallout;

    /** N3_LFIR[53]
     *  
     */
    (rN3_LFIR, bit(53)) ? TBDDefaultCallout;

    /** N3_LFIR[54]
     *  
     */
    (rN3_LFIR, bit(54)) ? TBDDefaultCallout;

    /** N3_LFIR[55]
     *  
     */
    (rN3_LFIR, bit(55)) ? TBDDefaultCallout;

    /** N3_LFIR[56]
     *  
     */
    (rN3_LFIR, bit(56)) ? TBDDefaultCallout;

    /** N3_LFIR[57]
     *  
     */
    (rN3_LFIR, bit(57)) ? TBDDefaultCallout;

    /** N3_LFIR[58]
     *  
     */
    (rN3_LFIR, bit(58)) ? TBDDefaultCallout;

    /** N3_LFIR[59]
     *  
     */
    (rN3_LFIR, bit(59)) ? TBDDefaultCallout;

    /** N3_LFIR[60]
     *  
     */
    (rN3_LFIR, bit(60)) ? TBDDefaultCallout;

    /** N3_LFIR[61]
     *  
     */
    (rN3_LFIR, bit(61)) ? TBDDefaultCallout;

    /** N3_LFIR[62]
     *  
     */
    (rN3_LFIR, bit(62)) ? TBDDefaultCallout;

    /** N3_LFIR[63]
     *  
     */
    (rN3_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip NPU0FIR
################################################################################

rule rNPU0FIR
{
  CHECK_STOP:
    NPU0FIR & ~NPU0FIR_MASK & ~NPU0FIR_ACT0 & ~NPU0FIR_ACT1;
  RECOVERABLE:
    NPU0FIR & ~NPU0FIR_MASK & ~NPU0FIR_ACT0 &  NPU0FIR_ACT1;
  UNIT_CS:
    NPU0FIR & ~NPU0FIR_MASK &  NPU0FIR_ACT0 &  NPU0FIR_ACT1;
};

group gNPU0FIR filter singlebit
{
    /** NPU0FIR[0]
     *  
     */
    (rNPU0FIR, bit(0)) ? TBDDefaultCallout;

    /** NPU0FIR[1]
     *  
     */
    (rNPU0FIR, bit(1)) ? TBDDefaultCallout;

    /** NPU0FIR[2]
     *  
     */
    (rNPU0FIR, bit(2)) ? TBDDefaultCallout;

    /** NPU0FIR[3]
     *  
     */
    (rNPU0FIR, bit(3)) ? TBDDefaultCallout;

    /** NPU0FIR[4]
     *  
     */
    (rNPU0FIR, bit(4)) ? TBDDefaultCallout;

    /** NPU0FIR[5]
     *  
     */
    (rNPU0FIR, bit(5)) ? TBDDefaultCallout;

    /** NPU0FIR[6]
     *  
     */
    (rNPU0FIR, bit(6)) ? TBDDefaultCallout;

    /** NPU0FIR[7]
     *  
     */
    (rNPU0FIR, bit(7)) ? TBDDefaultCallout;

    /** NPU0FIR[8]
     *  
     */
    (rNPU0FIR, bit(8)) ? TBDDefaultCallout;

    /** NPU0FIR[9]
     *  
     */
    (rNPU0FIR, bit(9)) ? TBDDefaultCallout;

    /** NPU0FIR[10]
     *  
     */
    (rNPU0FIR, bit(10)) ? TBDDefaultCallout;

    /** NPU0FIR[11]
     *  
     */
    (rNPU0FIR, bit(11)) ? TBDDefaultCallout;

    /** NPU0FIR[12]
     *  
     */
    (rNPU0FIR, bit(12)) ? TBDDefaultCallout;

    /** NPU0FIR[13]
     *  
     */
    (rNPU0FIR, bit(13)) ? TBDDefaultCallout;

    /** NPU0FIR[14]
     *  
     */
    (rNPU0FIR, bit(14)) ? TBDDefaultCallout;

    /** NPU0FIR[15]
     *  
     */
    (rNPU0FIR, bit(15)) ? TBDDefaultCallout;

    /** NPU0FIR[16]
     *  
     */
    (rNPU0FIR, bit(16)) ? TBDDefaultCallout;

    /** NPU0FIR[17]
     *  
     */
    (rNPU0FIR, bit(17)) ? TBDDefaultCallout;

    /** NPU0FIR[18]
     *  
     */
    (rNPU0FIR, bit(18)) ? TBDDefaultCallout;

    /** NPU0FIR[19]
     *  
     */
    (rNPU0FIR, bit(19)) ? TBDDefaultCallout;

    /** NPU0FIR[20]
     *  
     */
    (rNPU0FIR, bit(20)) ? TBDDefaultCallout;

    /** NPU0FIR[21]
     *  
     */
    (rNPU0FIR, bit(21)) ? TBDDefaultCallout;

    /** NPU0FIR[22]
     *  
     */
    (rNPU0FIR, bit(22)) ? TBDDefaultCallout;

    /** NPU0FIR[23]
     *  
     */
    (rNPU0FIR, bit(23)) ? TBDDefaultCallout;

    /** NPU0FIR[24]
     *  
     */
    (rNPU0FIR, bit(24)) ? TBDDefaultCallout;

    /** NPU0FIR[25]
     *  
     */
    (rNPU0FIR, bit(25)) ? TBDDefaultCallout;

    /** NPU0FIR[26]
     *  
     */
    (rNPU0FIR, bit(26)) ? TBDDefaultCallout;

    /** NPU0FIR[27]
     *  
     */
    (rNPU0FIR, bit(27)) ? TBDDefaultCallout;

    /** NPU0FIR[28]
     *  
     */
    (rNPU0FIR, bit(28)) ? TBDDefaultCallout;

    /** NPU0FIR[29]
     *  
     */
    (rNPU0FIR, bit(29)) ? TBDDefaultCallout;

    /** NPU0FIR[30]
     *  
     */
    (rNPU0FIR, bit(30)) ? TBDDefaultCallout;

    /** NPU0FIR[31]
     *  
     */
    (rNPU0FIR, bit(31)) ? TBDDefaultCallout;

    /** NPU0FIR[32]
     *  
     */
    (rNPU0FIR, bit(32)) ? TBDDefaultCallout;

    /** NPU0FIR[33]
     *  
     */
    (rNPU0FIR, bit(33)) ? TBDDefaultCallout;

    /** NPU0FIR[34]
     *  
     */
    (rNPU0FIR, bit(34)) ? TBDDefaultCallout;

    /** NPU0FIR[35]
     *  
     */
    (rNPU0FIR, bit(35)) ? TBDDefaultCallout;

    /** NPU0FIR[36]
     *  
     */
    (rNPU0FIR, bit(36)) ? TBDDefaultCallout;

    /** NPU0FIR[37]
     *  
     */
    (rNPU0FIR, bit(37)) ? TBDDefaultCallout;

    /** NPU0FIR[38]
     *  
     */
    (rNPU0FIR, bit(38)) ? TBDDefaultCallout;

    /** NPU0FIR[39]
     *  
     */
    (rNPU0FIR, bit(39)) ? TBDDefaultCallout;

    /** NPU0FIR[40]
     *  
     */
    (rNPU0FIR, bit(40)) ? TBDDefaultCallout;

    /** NPU0FIR[41]
     *  
     */
    (rNPU0FIR, bit(41)) ? TBDDefaultCallout;

    /** NPU0FIR[42]
     *  
     */
    (rNPU0FIR, bit(42)) ? TBDDefaultCallout;

    /** NPU0FIR[43]
     *  
     */
    (rNPU0FIR, bit(43)) ? TBDDefaultCallout;

    /** NPU0FIR[44]
     *  
     */
    (rNPU0FIR, bit(44)) ? TBDDefaultCallout;

    /** NPU0FIR[45]
     *  
     */
    (rNPU0FIR, bit(45)) ? TBDDefaultCallout;

    /** NPU0FIR[46]
     *  
     */
    (rNPU0FIR, bit(46)) ? TBDDefaultCallout;

    /** NPU0FIR[47]
     *  
     */
    (rNPU0FIR, bit(47)) ? TBDDefaultCallout;

    /** NPU0FIR[48]
     *  
     */
    (rNPU0FIR, bit(48)) ? TBDDefaultCallout;

    /** NPU0FIR[49]
     *  
     */
    (rNPU0FIR, bit(49)) ? TBDDefaultCallout;

    /** NPU0FIR[50]
     *  
     */
    (rNPU0FIR, bit(50)) ? TBDDefaultCallout;

    /** NPU0FIR[51]
     *  
     */
    (rNPU0FIR, bit(51)) ? TBDDefaultCallout;

    /** NPU0FIR[52]
     *  
     */
    (rNPU0FIR, bit(52)) ? TBDDefaultCallout;

    /** NPU0FIR[53]
     *  
     */
    (rNPU0FIR, bit(53)) ? TBDDefaultCallout;

    /** NPU0FIR[54]
     *  
     */
    (rNPU0FIR, bit(54)) ? TBDDefaultCallout;

    /** NPU0FIR[55]
     *  
     */
    (rNPU0FIR, bit(55)) ? TBDDefaultCallout;

    /** NPU0FIR[56]
     *  
     */
    (rNPU0FIR, bit(56)) ? TBDDefaultCallout;

    /** NPU0FIR[57]
     *  
     */
    (rNPU0FIR, bit(57)) ? TBDDefaultCallout;

    /** NPU0FIR[58]
     *  
     */
    (rNPU0FIR, bit(58)) ? TBDDefaultCallout;

    /** NPU0FIR[59]
     *  
     */
    (rNPU0FIR, bit(59)) ? TBDDefaultCallout;

    /** NPU0FIR[60]
     *  
     */
    (rNPU0FIR, bit(60)) ? TBDDefaultCallout;

    /** NPU0FIR[61]
     *  
     */
    (rNPU0FIR, bit(61)) ? TBDDefaultCallout;

    /** NPU0FIR[62]
     *  
     */
    (rNPU0FIR, bit(62)) ? TBDDefaultCallout;

    /** NPU0FIR[63]
     *  
     */
    (rNPU0FIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip NPU1FIR
################################################################################

rule rNPU1FIR
{
  CHECK_STOP:
    NPU1FIR & ~NPU1FIR_MASK & ~NPU1FIR_ACT0 & ~NPU1FIR_ACT1;
  RECOVERABLE:
    NPU1FIR & ~NPU1FIR_MASK & ~NPU1FIR_ACT0 &  NPU1FIR_ACT1;
  UNIT_CS:
    NPU1FIR & ~NPU1FIR_MASK &  NPU1FIR_ACT0 &  NPU1FIR_ACT1;
};

group gNPU1FIR filter singlebit
{
    /** NPU1FIR[0]
     *  
     */
    (rNPU1FIR, bit(0)) ? TBDDefaultCallout;

    /** NPU1FIR[1]
     *  
     */
    (rNPU1FIR, bit(1)) ? TBDDefaultCallout;

    /** NPU1FIR[2]
     *  
     */
    (rNPU1FIR, bit(2)) ? TBDDefaultCallout;

    /** NPU1FIR[3]
     *  
     */
    (rNPU1FIR, bit(3)) ? TBDDefaultCallout;

    /** NPU1FIR[4]
     *  
     */
    (rNPU1FIR, bit(4)) ? TBDDefaultCallout;

    /** NPU1FIR[5]
     *  
     */
    (rNPU1FIR, bit(5)) ? TBDDefaultCallout;

    /** NPU1FIR[6]
     *  
     */
    (rNPU1FIR, bit(6)) ? TBDDefaultCallout;

    /** NPU1FIR[7]
     *  
     */
    (rNPU1FIR, bit(7)) ? TBDDefaultCallout;

    /** NPU1FIR[8]
     *  
     */
    (rNPU1FIR, bit(8)) ? TBDDefaultCallout;

    /** NPU1FIR[9]
     *  
     */
    (rNPU1FIR, bit(9)) ? TBDDefaultCallout;

    /** NPU1FIR[10]
     *  
     */
    (rNPU1FIR, bit(10)) ? TBDDefaultCallout;

    /** NPU1FIR[11]
     *  
     */
    (rNPU1FIR, bit(11)) ? TBDDefaultCallout;

    /** NPU1FIR[12]
     *  
     */
    (rNPU1FIR, bit(12)) ? TBDDefaultCallout;

    /** NPU1FIR[13]
     *  
     */
    (rNPU1FIR, bit(13)) ? TBDDefaultCallout;

    /** NPU1FIR[14]
     *  
     */
    (rNPU1FIR, bit(14)) ? TBDDefaultCallout;

    /** NPU1FIR[15]
     *  
     */
    (rNPU1FIR, bit(15)) ? TBDDefaultCallout;

    /** NPU1FIR[16]
     *  
     */
    (rNPU1FIR, bit(16)) ? TBDDefaultCallout;

    /** NPU1FIR[17]
     *  
     */
    (rNPU1FIR, bit(17)) ? TBDDefaultCallout;

    /** NPU1FIR[18]
     *  
     */
    (rNPU1FIR, bit(18)) ? TBDDefaultCallout;

    /** NPU1FIR[19]
     *  
     */
    (rNPU1FIR, bit(19)) ? TBDDefaultCallout;

    /** NPU1FIR[20]
     *  
     */
    (rNPU1FIR, bit(20)) ? TBDDefaultCallout;

    /** NPU1FIR[21]
     *  
     */
    (rNPU1FIR, bit(21)) ? TBDDefaultCallout;

    /** NPU1FIR[22]
     *  
     */
    (rNPU1FIR, bit(22)) ? TBDDefaultCallout;

    /** NPU1FIR[23]
     *  
     */
    (rNPU1FIR, bit(23)) ? TBDDefaultCallout;

    /** NPU1FIR[24]
     *  
     */
    (rNPU1FIR, bit(24)) ? TBDDefaultCallout;

    /** NPU1FIR[25]
     *  
     */
    (rNPU1FIR, bit(25)) ? TBDDefaultCallout;

    /** NPU1FIR[26]
     *  
     */
    (rNPU1FIR, bit(26)) ? TBDDefaultCallout;

    /** NPU1FIR[27]
     *  
     */
    (rNPU1FIR, bit(27)) ? TBDDefaultCallout;

    /** NPU1FIR[28]
     *  
     */
    (rNPU1FIR, bit(28)) ? TBDDefaultCallout;

    /** NPU1FIR[29]
     *  
     */
    (rNPU1FIR, bit(29)) ? TBDDefaultCallout;

    /** NPU1FIR[30]
     *  
     */
    (rNPU1FIR, bit(30)) ? TBDDefaultCallout;

    /** NPU1FIR[31]
     *  
     */
    (rNPU1FIR, bit(31)) ? TBDDefaultCallout;

    /** NPU1FIR[32]
     *  
     */
    (rNPU1FIR, bit(32)) ? TBDDefaultCallout;

    /** NPU1FIR[33]
     *  
     */
    (rNPU1FIR, bit(33)) ? TBDDefaultCallout;

    /** NPU1FIR[34]
     *  
     */
    (rNPU1FIR, bit(34)) ? TBDDefaultCallout;

    /** NPU1FIR[35]
     *  
     */
    (rNPU1FIR, bit(35)) ? TBDDefaultCallout;

    /** NPU1FIR[36]
     *  
     */
    (rNPU1FIR, bit(36)) ? TBDDefaultCallout;

    /** NPU1FIR[37]
     *  
     */
    (rNPU1FIR, bit(37)) ? TBDDefaultCallout;

    /** NPU1FIR[38]
     *  
     */
    (rNPU1FIR, bit(38)) ? TBDDefaultCallout;

    /** NPU1FIR[39]
     *  
     */
    (rNPU1FIR, bit(39)) ? TBDDefaultCallout;

    /** NPU1FIR[40]
     *  
     */
    (rNPU1FIR, bit(40)) ? TBDDefaultCallout;

    /** NPU1FIR[41]
     *  
     */
    (rNPU1FIR, bit(41)) ? TBDDefaultCallout;

    /** NPU1FIR[42]
     *  
     */
    (rNPU1FIR, bit(42)) ? TBDDefaultCallout;

    /** NPU1FIR[43]
     *  
     */
    (rNPU1FIR, bit(43)) ? TBDDefaultCallout;

    /** NPU1FIR[44]
     *  
     */
    (rNPU1FIR, bit(44)) ? TBDDefaultCallout;

    /** NPU1FIR[45]
     *  
     */
    (rNPU1FIR, bit(45)) ? TBDDefaultCallout;

    /** NPU1FIR[46]
     *  
     */
    (rNPU1FIR, bit(46)) ? TBDDefaultCallout;

    /** NPU1FIR[47]
     *  
     */
    (rNPU1FIR, bit(47)) ? TBDDefaultCallout;

    /** NPU1FIR[48]
     *  
     */
    (rNPU1FIR, bit(48)) ? TBDDefaultCallout;

    /** NPU1FIR[49]
     *  
     */
    (rNPU1FIR, bit(49)) ? TBDDefaultCallout;

    /** NPU1FIR[50]
     *  
     */
    (rNPU1FIR, bit(50)) ? TBDDefaultCallout;

    /** NPU1FIR[51]
     *  
     */
    (rNPU1FIR, bit(51)) ? TBDDefaultCallout;

    /** NPU1FIR[52]
     *  
     */
    (rNPU1FIR, bit(52)) ? TBDDefaultCallout;

    /** NPU1FIR[53]
     *  
     */
    (rNPU1FIR, bit(53)) ? TBDDefaultCallout;

    /** NPU1FIR[54]
     *  
     */
    (rNPU1FIR, bit(54)) ? TBDDefaultCallout;

    /** NPU1FIR[55]
     *  
     */
    (rNPU1FIR, bit(55)) ? TBDDefaultCallout;

    /** NPU1FIR[56]
     *  
     */
    (rNPU1FIR, bit(56)) ? TBDDefaultCallout;

    /** NPU1FIR[57]
     *  
     */
    (rNPU1FIR, bit(57)) ? TBDDefaultCallout;

    /** NPU1FIR[58]
     *  
     */
    (rNPU1FIR, bit(58)) ? TBDDefaultCallout;

    /** NPU1FIR[59]
     *  
     */
    (rNPU1FIR, bit(59)) ? TBDDefaultCallout;

    /** NPU1FIR[60]
     *  
     */
    (rNPU1FIR, bit(60)) ? TBDDefaultCallout;

    /** NPU1FIR[61]
     *  
     */
    (rNPU1FIR, bit(61)) ? TBDDefaultCallout;

    /** NPU1FIR[62]
     *  
     */
    (rNPU1FIR, bit(62)) ? TBDDefaultCallout;

    /** NPU1FIR[63]
     *  
     */
    (rNPU1FIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBWESTFIR
################################################################################

rule rPBWESTFIR
{
  CHECK_STOP:
    PBWESTFIR & ~PBWESTFIR_MASK & ~PBWESTFIR_ACT0 & ~PBWESTFIR_ACT1;
  RECOVERABLE:
    PBWESTFIR & ~PBWESTFIR_MASK & ~PBWESTFIR_ACT0 &  PBWESTFIR_ACT1;
};

group gPBWESTFIR filter singlebit
{
    /** PBWESTFIR[0]
     *  
     */
    (rPBWESTFIR, bit(0)) ? TBDDefaultCallout;

    /** PBWESTFIR[1]
     *  
     */
    (rPBWESTFIR, bit(1)) ? TBDDefaultCallout;

    /** PBWESTFIR[2]
     *  
     */
    (rPBWESTFIR, bit(2)) ? TBDDefaultCallout;

    /** PBWESTFIR[3]
     *  
     */
    (rPBWESTFIR, bit(3)) ? TBDDefaultCallout;

    /** PBWESTFIR[4]
     *  
     */
    (rPBWESTFIR, bit(4)) ? TBDDefaultCallout;

    /** PBWESTFIR[5]
     *  
     */
    (rPBWESTFIR, bit(5)) ? TBDDefaultCallout;

    /** PBWESTFIR[6]
     *  
     */
    (rPBWESTFIR, bit(6)) ? TBDDefaultCallout;

    /** PBWESTFIR[7]
     *  
     */
    (rPBWESTFIR, bit(7)) ? TBDDefaultCallout;

    /** PBWESTFIR[8]
     *  
     */
    (rPBWESTFIR, bit(8)) ? TBDDefaultCallout;

    /** PBWESTFIR[9]
     *  
     */
    (rPBWESTFIR, bit(9)) ? TBDDefaultCallout;

    /** PBWESTFIR[10]
     *  
     */
    (rPBWESTFIR, bit(10)) ? TBDDefaultCallout;

    /** PBWESTFIR[11]
     *  
     */
    (rPBWESTFIR, bit(11)) ? TBDDefaultCallout;

    /** PBWESTFIR[12]
     *  
     */
    (rPBWESTFIR, bit(12)) ? TBDDefaultCallout;

    /** PBWESTFIR[13]
     *  
     */
    (rPBWESTFIR, bit(13)) ? TBDDefaultCallout;

    /** PBWESTFIR[14]
     *  
     */
    (rPBWESTFIR, bit(14)) ? TBDDefaultCallout;

    /** PBWESTFIR[15]
     *  
     */
    (rPBWESTFIR, bit(15)) ? TBDDefaultCallout;

    /** PBWESTFIR[16]
     *  
     */
    (rPBWESTFIR, bit(16)) ? TBDDefaultCallout;

    /** PBWESTFIR[17]
     *  
     */
    (rPBWESTFIR, bit(17)) ? TBDDefaultCallout;

    /** PBWESTFIR[18]
     *  
     */
    (rPBWESTFIR, bit(18)) ? TBDDefaultCallout;

    /** PBWESTFIR[19]
     *  
     */
    (rPBWESTFIR, bit(19)) ? TBDDefaultCallout;

    /** PBWESTFIR[20]
     *  
     */
    (rPBWESTFIR, bit(20)) ? TBDDefaultCallout;

    /** PBWESTFIR[21]
     *  
     */
    (rPBWESTFIR, bit(21)) ? TBDDefaultCallout;

    /** PBWESTFIR[22]
     *  
     */
    (rPBWESTFIR, bit(22)) ? TBDDefaultCallout;

    /** PBWESTFIR[23]
     *  
     */
    (rPBWESTFIR, bit(23)) ? TBDDefaultCallout;

    /** PBWESTFIR[24]
     *  
     */
    (rPBWESTFIR, bit(24)) ? TBDDefaultCallout;

    /** PBWESTFIR[25]
     *  
     */
    (rPBWESTFIR, bit(25)) ? TBDDefaultCallout;

    /** PBWESTFIR[26]
     *  
     */
    (rPBWESTFIR, bit(26)) ? TBDDefaultCallout;

    /** PBWESTFIR[27]
     *  
     */
    (rPBWESTFIR, bit(27)) ? TBDDefaultCallout;

    /** PBWESTFIR[28]
     *  
     */
    (rPBWESTFIR, bit(28)) ? TBDDefaultCallout;

    /** PBWESTFIR[29]
     *  
     */
    (rPBWESTFIR, bit(29)) ? TBDDefaultCallout;

    /** PBWESTFIR[30]
     *  
     */
    (rPBWESTFIR, bit(30)) ? TBDDefaultCallout;

    /** PBWESTFIR[31]
     *  
     */
    (rPBWESTFIR, bit(31)) ? TBDDefaultCallout;

    /** PBWESTFIR[32]
     *  
     */
    (rPBWESTFIR, bit(32)) ? TBDDefaultCallout;

    /** PBWESTFIR[33]
     *  
     */
    (rPBWESTFIR, bit(33)) ? TBDDefaultCallout;

    /** PBWESTFIR[34]
     *  
     */
    (rPBWESTFIR, bit(34)) ? TBDDefaultCallout;

    /** PBWESTFIR[35]
     *  
     */
    (rPBWESTFIR, bit(35)) ? TBDDefaultCallout;

    /** PBWESTFIR[36]
     *  
     */
    (rPBWESTFIR, bit(36)) ? TBDDefaultCallout;

    /** PBWESTFIR[37]
     *  
     */
    (rPBWESTFIR, bit(37)) ? TBDDefaultCallout;

    /** PBWESTFIR[38]
     *  
     */
    (rPBWESTFIR, bit(38)) ? TBDDefaultCallout;

    /** PBWESTFIR[39]
     *  
     */
    (rPBWESTFIR, bit(39)) ? TBDDefaultCallout;

    /** PBWESTFIR[40]
     *  
     */
    (rPBWESTFIR, bit(40)) ? TBDDefaultCallout;

    /** PBWESTFIR[41]
     *  
     */
    (rPBWESTFIR, bit(41)) ? TBDDefaultCallout;

    /** PBWESTFIR[42]
     *  
     */
    (rPBWESTFIR, bit(42)) ? TBDDefaultCallout;

    /** PBWESTFIR[43]
     *  
     */
    (rPBWESTFIR, bit(43)) ? TBDDefaultCallout;

    /** PBWESTFIR[44]
     *  
     */
    (rPBWESTFIR, bit(44)) ? TBDDefaultCallout;

    /** PBWESTFIR[45]
     *  
     */
    (rPBWESTFIR, bit(45)) ? TBDDefaultCallout;

    /** PBWESTFIR[46]
     *  
     */
    (rPBWESTFIR, bit(46)) ? TBDDefaultCallout;

    /** PBWESTFIR[47]
     *  
     */
    (rPBWESTFIR, bit(47)) ? TBDDefaultCallout;

    /** PBWESTFIR[48]
     *  
     */
    (rPBWESTFIR, bit(48)) ? TBDDefaultCallout;

    /** PBWESTFIR[49]
     *  
     */
    (rPBWESTFIR, bit(49)) ? TBDDefaultCallout;

    /** PBWESTFIR[50]
     *  
     */
    (rPBWESTFIR, bit(50)) ? TBDDefaultCallout;

    /** PBWESTFIR[51]
     *  
     */
    (rPBWESTFIR, bit(51)) ? TBDDefaultCallout;

    /** PBWESTFIR[52]
     *  
     */
    (rPBWESTFIR, bit(52)) ? TBDDefaultCallout;

    /** PBWESTFIR[53]
     *  
     */
    (rPBWESTFIR, bit(53)) ? TBDDefaultCallout;

    /** PBWESTFIR[54]
     *  
     */
    (rPBWESTFIR, bit(54)) ? TBDDefaultCallout;

    /** PBWESTFIR[55]
     *  
     */
    (rPBWESTFIR, bit(55)) ? TBDDefaultCallout;

    /** PBWESTFIR[56]
     *  
     */
    (rPBWESTFIR, bit(56)) ? TBDDefaultCallout;

    /** PBWESTFIR[57]
     *  
     */
    (rPBWESTFIR, bit(57)) ? TBDDefaultCallout;

    /** PBWESTFIR[58]
     *  
     */
    (rPBWESTFIR, bit(58)) ? TBDDefaultCallout;

    /** PBWESTFIR[59]
     *  
     */
    (rPBWESTFIR, bit(59)) ? TBDDefaultCallout;

    /** PBWESTFIR[60]
     *  
     */
    (rPBWESTFIR, bit(60)) ? TBDDefaultCallout;

    /** PBWESTFIR[61]
     *  
     */
    (rPBWESTFIR, bit(61)) ? TBDDefaultCallout;

    /** PBWESTFIR[62]
     *  
     */
    (rPBWESTFIR, bit(62)) ? TBDDefaultCallout;

    /** PBWESTFIR[63]
     *  
     */
    (rPBWESTFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBCENTFIR
################################################################################

rule rPBCENTFIR
{
  CHECK_STOP:
    PBCENTFIR & ~PBCENTFIR_MASK & ~PBCENTFIR_ACT0 & ~PBCENTFIR_ACT1;
  RECOVERABLE:
    PBCENTFIR & ~PBCENTFIR_MASK & ~PBCENTFIR_ACT0 &  PBCENTFIR_ACT1;
};

group gPBCENTFIR filter singlebit
{
    /** PBCENTFIR[0]
     *  
     */
    (rPBCENTFIR, bit(0)) ? TBDDefaultCallout;

    /** PBCENTFIR[1]
     *  
     */
    (rPBCENTFIR, bit(1)) ? TBDDefaultCallout;

    /** PBCENTFIR[2]
     *  
     */
    (rPBCENTFIR, bit(2)) ? TBDDefaultCallout;

    /** PBCENTFIR[3]
     *  
     */
    (rPBCENTFIR, bit(3)) ? TBDDefaultCallout;

    /** PBCENTFIR[4]
     *  
     */
    (rPBCENTFIR, bit(4)) ? TBDDefaultCallout;

    /** PBCENTFIR[5]
     *  
     */
    (rPBCENTFIR, bit(5)) ? TBDDefaultCallout;

    /** PBCENTFIR[6]
     *  
     */
    (rPBCENTFIR, bit(6)) ? TBDDefaultCallout;

    /** PBCENTFIR[7]
     *  
     */
    (rPBCENTFIR, bit(7)) ? TBDDefaultCallout;

    /** PBCENTFIR[8]
     *  
     */
    (rPBCENTFIR, bit(8)) ? TBDDefaultCallout;

    /** PBCENTFIR[9]
     *  
     */
    (rPBCENTFIR, bit(9)) ? TBDDefaultCallout;

    /** PBCENTFIR[10]
     *  
     */
    (rPBCENTFIR, bit(10)) ? TBDDefaultCallout;

    /** PBCENTFIR[11]
     *  
     */
    (rPBCENTFIR, bit(11)) ? TBDDefaultCallout;

    /** PBCENTFIR[12]
     *  
     */
    (rPBCENTFIR, bit(12)) ? TBDDefaultCallout;

    /** PBCENTFIR[13]
     *  
     */
    (rPBCENTFIR, bit(13)) ? TBDDefaultCallout;

    /** PBCENTFIR[14]
     *  
     */
    (rPBCENTFIR, bit(14)) ? TBDDefaultCallout;

    /** PBCENTFIR[15]
     *  
     */
    (rPBCENTFIR, bit(15)) ? TBDDefaultCallout;

    /** PBCENTFIR[16]
     *  
     */
    (rPBCENTFIR, bit(16)) ? TBDDefaultCallout;

    /** PBCENTFIR[17]
     *  
     */
    (rPBCENTFIR, bit(17)) ? TBDDefaultCallout;

    /** PBCENTFIR[18]
     *  
     */
    (rPBCENTFIR, bit(18)) ? TBDDefaultCallout;

    /** PBCENTFIR[19]
     *  
     */
    (rPBCENTFIR, bit(19)) ? TBDDefaultCallout;

    /** PBCENTFIR[20]
     *  
     */
    (rPBCENTFIR, bit(20)) ? TBDDefaultCallout;

    /** PBCENTFIR[21]
     *  
     */
    (rPBCENTFIR, bit(21)) ? TBDDefaultCallout;

    /** PBCENTFIR[22]
     *  
     */
    (rPBCENTFIR, bit(22)) ? TBDDefaultCallout;

    /** PBCENTFIR[23]
     *  
     */
    (rPBCENTFIR, bit(23)) ? TBDDefaultCallout;

    /** PBCENTFIR[24]
     *  
     */
    (rPBCENTFIR, bit(24)) ? TBDDefaultCallout;

    /** PBCENTFIR[25]
     *  
     */
    (rPBCENTFIR, bit(25)) ? TBDDefaultCallout;

    /** PBCENTFIR[26]
     *  
     */
    (rPBCENTFIR, bit(26)) ? TBDDefaultCallout;

    /** PBCENTFIR[27]
     *  
     */
    (rPBCENTFIR, bit(27)) ? TBDDefaultCallout;

    /** PBCENTFIR[28]
     *  
     */
    (rPBCENTFIR, bit(28)) ? TBDDefaultCallout;

    /** PBCENTFIR[29]
     *  
     */
    (rPBCENTFIR, bit(29)) ? TBDDefaultCallout;

    /** PBCENTFIR[30]
     *  
     */
    (rPBCENTFIR, bit(30)) ? TBDDefaultCallout;

    /** PBCENTFIR[31]
     *  
     */
    (rPBCENTFIR, bit(31)) ? TBDDefaultCallout;

    /** PBCENTFIR[32]
     *  
     */
    (rPBCENTFIR, bit(32)) ? TBDDefaultCallout;

    /** PBCENTFIR[33]
     *  
     */
    (rPBCENTFIR, bit(33)) ? TBDDefaultCallout;

    /** PBCENTFIR[34]
     *  
     */
    (rPBCENTFIR, bit(34)) ? TBDDefaultCallout;

    /** PBCENTFIR[35]
     *  
     */
    (rPBCENTFIR, bit(35)) ? TBDDefaultCallout;

    /** PBCENTFIR[36]
     *  
     */
    (rPBCENTFIR, bit(36)) ? TBDDefaultCallout;

    /** PBCENTFIR[37]
     *  
     */
    (rPBCENTFIR, bit(37)) ? TBDDefaultCallout;

    /** PBCENTFIR[38]
     *  
     */
    (rPBCENTFIR, bit(38)) ? TBDDefaultCallout;

    /** PBCENTFIR[39]
     *  
     */
    (rPBCENTFIR, bit(39)) ? TBDDefaultCallout;

    /** PBCENTFIR[40]
     *  
     */
    (rPBCENTFIR, bit(40)) ? TBDDefaultCallout;

    /** PBCENTFIR[41]
     *  
     */
    (rPBCENTFIR, bit(41)) ? TBDDefaultCallout;

    /** PBCENTFIR[42]
     *  
     */
    (rPBCENTFIR, bit(42)) ? TBDDefaultCallout;

    /** PBCENTFIR[43]
     *  
     */
    (rPBCENTFIR, bit(43)) ? TBDDefaultCallout;

    /** PBCENTFIR[44]
     *  
     */
    (rPBCENTFIR, bit(44)) ? TBDDefaultCallout;

    /** PBCENTFIR[45]
     *  
     */
    (rPBCENTFIR, bit(45)) ? TBDDefaultCallout;

    /** PBCENTFIR[46]
     *  
     */
    (rPBCENTFIR, bit(46)) ? TBDDefaultCallout;

    /** PBCENTFIR[47]
     *  
     */
    (rPBCENTFIR, bit(47)) ? TBDDefaultCallout;

    /** PBCENTFIR[48]
     *  
     */
    (rPBCENTFIR, bit(48)) ? TBDDefaultCallout;

    /** PBCENTFIR[49]
     *  
     */
    (rPBCENTFIR, bit(49)) ? TBDDefaultCallout;

    /** PBCENTFIR[50]
     *  
     */
    (rPBCENTFIR, bit(50)) ? TBDDefaultCallout;

    /** PBCENTFIR[51]
     *  
     */
    (rPBCENTFIR, bit(51)) ? TBDDefaultCallout;

    /** PBCENTFIR[52]
     *  
     */
    (rPBCENTFIR, bit(52)) ? TBDDefaultCallout;

    /** PBCENTFIR[53]
     *  
     */
    (rPBCENTFIR, bit(53)) ? TBDDefaultCallout;

    /** PBCENTFIR[54]
     *  
     */
    (rPBCENTFIR, bit(54)) ? TBDDefaultCallout;

    /** PBCENTFIR[55]
     *  
     */
    (rPBCENTFIR, bit(55)) ? TBDDefaultCallout;

    /** PBCENTFIR[56]
     *  
     */
    (rPBCENTFIR, bit(56)) ? TBDDefaultCallout;

    /** PBCENTFIR[57]
     *  
     */
    (rPBCENTFIR, bit(57)) ? TBDDefaultCallout;

    /** PBCENTFIR[58]
     *  
     */
    (rPBCENTFIR, bit(58)) ? TBDDefaultCallout;

    /** PBCENTFIR[59]
     *  
     */
    (rPBCENTFIR, bit(59)) ? TBDDefaultCallout;

    /** PBCENTFIR[60]
     *  
     */
    (rPBCENTFIR, bit(60)) ? TBDDefaultCallout;

    /** PBCENTFIR[61]
     *  
     */
    (rPBCENTFIR, bit(61)) ? TBDDefaultCallout;

    /** PBCENTFIR[62]
     *  
     */
    (rPBCENTFIR, bit(62)) ? TBDDefaultCallout;

    /** PBCENTFIR[63]
     *  
     */
    (rPBCENTFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBEASTFIR
################################################################################

rule rPBEASTFIR
{
  CHECK_STOP:
    PBEASTFIR & ~PBEASTFIR_MASK & ~PBEASTFIR_ACT0 & ~PBEASTFIR_ACT1;
  RECOVERABLE:
    PBEASTFIR & ~PBEASTFIR_MASK & ~PBEASTFIR_ACT0 &  PBEASTFIR_ACT1;
};

group gPBEASTFIR filter singlebit
{
    /** PBEASTFIR[0]
     *  
     */
    (rPBEASTFIR, bit(0)) ? TBDDefaultCallout;

    /** PBEASTFIR[1]
     *  
     */
    (rPBEASTFIR, bit(1)) ? TBDDefaultCallout;

    /** PBEASTFIR[2]
     *  
     */
    (rPBEASTFIR, bit(2)) ? TBDDefaultCallout;

    /** PBEASTFIR[3]
     *  
     */
    (rPBEASTFIR, bit(3)) ? TBDDefaultCallout;

    /** PBEASTFIR[4]
     *  
     */
    (rPBEASTFIR, bit(4)) ? TBDDefaultCallout;

    /** PBEASTFIR[5]
     *  
     */
    (rPBEASTFIR, bit(5)) ? TBDDefaultCallout;

    /** PBEASTFIR[6]
     *  
     */
    (rPBEASTFIR, bit(6)) ? TBDDefaultCallout;

    /** PBEASTFIR[7]
     *  
     */
    (rPBEASTFIR, bit(7)) ? TBDDefaultCallout;

    /** PBEASTFIR[8]
     *  
     */
    (rPBEASTFIR, bit(8)) ? TBDDefaultCallout;

    /** PBEASTFIR[9]
     *  
     */
    (rPBEASTFIR, bit(9)) ? TBDDefaultCallout;

    /** PBEASTFIR[10]
     *  
     */
    (rPBEASTFIR, bit(10)) ? TBDDefaultCallout;

    /** PBEASTFIR[11]
     *  
     */
    (rPBEASTFIR, bit(11)) ? TBDDefaultCallout;

    /** PBEASTFIR[12]
     *  
     */
    (rPBEASTFIR, bit(12)) ? TBDDefaultCallout;

    /** PBEASTFIR[13]
     *  
     */
    (rPBEASTFIR, bit(13)) ? TBDDefaultCallout;

    /** PBEASTFIR[14]
     *  
     */
    (rPBEASTFIR, bit(14)) ? TBDDefaultCallout;

    /** PBEASTFIR[15]
     *  
     */
    (rPBEASTFIR, bit(15)) ? TBDDefaultCallout;

    /** PBEASTFIR[16]
     *  
     */
    (rPBEASTFIR, bit(16)) ? TBDDefaultCallout;

    /** PBEASTFIR[17]
     *  
     */
    (rPBEASTFIR, bit(17)) ? TBDDefaultCallout;

    /** PBEASTFIR[18]
     *  
     */
    (rPBEASTFIR, bit(18)) ? TBDDefaultCallout;

    /** PBEASTFIR[19]
     *  
     */
    (rPBEASTFIR, bit(19)) ? TBDDefaultCallout;

    /** PBEASTFIR[20]
     *  
     */
    (rPBEASTFIR, bit(20)) ? TBDDefaultCallout;

    /** PBEASTFIR[21]
     *  
     */
    (rPBEASTFIR, bit(21)) ? TBDDefaultCallout;

    /** PBEASTFIR[22]
     *  
     */
    (rPBEASTFIR, bit(22)) ? TBDDefaultCallout;

    /** PBEASTFIR[23]
     *  
     */
    (rPBEASTFIR, bit(23)) ? TBDDefaultCallout;

    /** PBEASTFIR[24]
     *  
     */
    (rPBEASTFIR, bit(24)) ? TBDDefaultCallout;

    /** PBEASTFIR[25]
     *  
     */
    (rPBEASTFIR, bit(25)) ? TBDDefaultCallout;

    /** PBEASTFIR[26]
     *  
     */
    (rPBEASTFIR, bit(26)) ? TBDDefaultCallout;

    /** PBEASTFIR[27]
     *  
     */
    (rPBEASTFIR, bit(27)) ? TBDDefaultCallout;

    /** PBEASTFIR[28]
     *  
     */
    (rPBEASTFIR, bit(28)) ? TBDDefaultCallout;

    /** PBEASTFIR[29]
     *  
     */
    (rPBEASTFIR, bit(29)) ? TBDDefaultCallout;

    /** PBEASTFIR[30]
     *  
     */
    (rPBEASTFIR, bit(30)) ? TBDDefaultCallout;

    /** PBEASTFIR[31]
     *  
     */
    (rPBEASTFIR, bit(31)) ? TBDDefaultCallout;

    /** PBEASTFIR[32]
     *  
     */
    (rPBEASTFIR, bit(32)) ? TBDDefaultCallout;

    /** PBEASTFIR[33]
     *  
     */
    (rPBEASTFIR, bit(33)) ? TBDDefaultCallout;

    /** PBEASTFIR[34]
     *  
     */
    (rPBEASTFIR, bit(34)) ? TBDDefaultCallout;

    /** PBEASTFIR[35]
     *  
     */
    (rPBEASTFIR, bit(35)) ? TBDDefaultCallout;

    /** PBEASTFIR[36]
     *  
     */
    (rPBEASTFIR, bit(36)) ? TBDDefaultCallout;

    /** PBEASTFIR[37]
     *  
     */
    (rPBEASTFIR, bit(37)) ? TBDDefaultCallout;

    /** PBEASTFIR[38]
     *  
     */
    (rPBEASTFIR, bit(38)) ? TBDDefaultCallout;

    /** PBEASTFIR[39]
     *  
     */
    (rPBEASTFIR, bit(39)) ? TBDDefaultCallout;

    /** PBEASTFIR[40]
     *  
     */
    (rPBEASTFIR, bit(40)) ? TBDDefaultCallout;

    /** PBEASTFIR[41]
     *  
     */
    (rPBEASTFIR, bit(41)) ? TBDDefaultCallout;

    /** PBEASTFIR[42]
     *  
     */
    (rPBEASTFIR, bit(42)) ? TBDDefaultCallout;

    /** PBEASTFIR[43]
     *  
     */
    (rPBEASTFIR, bit(43)) ? TBDDefaultCallout;

    /** PBEASTFIR[44]
     *  
     */
    (rPBEASTFIR, bit(44)) ? TBDDefaultCallout;

    /** PBEASTFIR[45]
     *  
     */
    (rPBEASTFIR, bit(45)) ? TBDDefaultCallout;

    /** PBEASTFIR[46]
     *  
     */
    (rPBEASTFIR, bit(46)) ? TBDDefaultCallout;

    /** PBEASTFIR[47]
     *  
     */
    (rPBEASTFIR, bit(47)) ? TBDDefaultCallout;

    /** PBEASTFIR[48]
     *  
     */
    (rPBEASTFIR, bit(48)) ? TBDDefaultCallout;

    /** PBEASTFIR[49]
     *  
     */
    (rPBEASTFIR, bit(49)) ? TBDDefaultCallout;

    /** PBEASTFIR[50]
     *  
     */
    (rPBEASTFIR, bit(50)) ? TBDDefaultCallout;

    /** PBEASTFIR[51]
     *  
     */
    (rPBEASTFIR, bit(51)) ? TBDDefaultCallout;

    /** PBEASTFIR[52]
     *  
     */
    (rPBEASTFIR, bit(52)) ? TBDDefaultCallout;

    /** PBEASTFIR[53]
     *  
     */
    (rPBEASTFIR, bit(53)) ? TBDDefaultCallout;

    /** PBEASTFIR[54]
     *  
     */
    (rPBEASTFIR, bit(54)) ? TBDDefaultCallout;

    /** PBEASTFIR[55]
     *  
     */
    (rPBEASTFIR, bit(55)) ? TBDDefaultCallout;

    /** PBEASTFIR[56]
     *  
     */
    (rPBEASTFIR, bit(56)) ? TBDDefaultCallout;

    /** PBEASTFIR[57]
     *  
     */
    (rPBEASTFIR, bit(57)) ? TBDDefaultCallout;

    /** PBEASTFIR[58]
     *  
     */
    (rPBEASTFIR, bit(58)) ? TBDDefaultCallout;

    /** PBEASTFIR[59]
     *  
     */
    (rPBEASTFIR, bit(59)) ? TBDDefaultCallout;

    /** PBEASTFIR[60]
     *  
     */
    (rPBEASTFIR, bit(60)) ? TBDDefaultCallout;

    /** PBEASTFIR[61]
     *  
     */
    (rPBEASTFIR, bit(61)) ? TBDDefaultCallout;

    /** PBEASTFIR[62]
     *  
     */
    (rPBEASTFIR, bit(62)) ? TBDDefaultCallout;

    /** PBEASTFIR[63]
     *  
     */
    (rPBEASTFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBPPEFIR
################################################################################

rule rPBPPEFIR
{
  CHECK_STOP:
    PBPPEFIR & ~PBPPEFIR_MASK & ~PBPPEFIR_ACT0 & ~PBPPEFIR_ACT1;
  RECOVERABLE:
    PBPPEFIR & ~PBPPEFIR_MASK & ~PBPPEFIR_ACT0 &  PBPPEFIR_ACT1;
};

group gPBPPEFIR filter singlebit
{
    /** PBPPEFIR[0]
     *  
     */
    (rPBPPEFIR, bit(0)) ? TBDDefaultCallout;

    /** PBPPEFIR[1]
     *  
     */
    (rPBPPEFIR, bit(1)) ? TBDDefaultCallout;

    /** PBPPEFIR[2]
     *  
     */
    (rPBPPEFIR, bit(2)) ? TBDDefaultCallout;

    /** PBPPEFIR[3]
     *  
     */
    (rPBPPEFIR, bit(3)) ? TBDDefaultCallout;

    /** PBPPEFIR[4]
     *  
     */
    (rPBPPEFIR, bit(4)) ? TBDDefaultCallout;

    /** PBPPEFIR[5]
     *  
     */
    (rPBPPEFIR, bit(5)) ? TBDDefaultCallout;

    /** PBPPEFIR[6]
     *  
     */
    (rPBPPEFIR, bit(6)) ? TBDDefaultCallout;

    /** PBPPEFIR[7]
     *  
     */
    (rPBPPEFIR, bit(7)) ? TBDDefaultCallout;

    /** PBPPEFIR[8]
     *  
     */
    (rPBPPEFIR, bit(8)) ? TBDDefaultCallout;

    /** PBPPEFIR[9]
     *  
     */
    (rPBPPEFIR, bit(9)) ? TBDDefaultCallout;

    /** PBPPEFIR[10]
     *  
     */
    (rPBPPEFIR, bit(10)) ? TBDDefaultCallout;

    /** PBPPEFIR[11]
     *  
     */
    (rPBPPEFIR, bit(11)) ? TBDDefaultCallout;

    /** PBPPEFIR[12]
     *  
     */
    (rPBPPEFIR, bit(12)) ? TBDDefaultCallout;

    /** PBPPEFIR[13]
     *  
     */
    (rPBPPEFIR, bit(13)) ? TBDDefaultCallout;

    /** PBPPEFIR[14]
     *  
     */
    (rPBPPEFIR, bit(14)) ? TBDDefaultCallout;

    /** PBPPEFIR[15]
     *  
     */
    (rPBPPEFIR, bit(15)) ? TBDDefaultCallout;

    /** PBPPEFIR[16]
     *  
     */
    (rPBPPEFIR, bit(16)) ? TBDDefaultCallout;

    /** PBPPEFIR[17]
     *  
     */
    (rPBPPEFIR, bit(17)) ? TBDDefaultCallout;

    /** PBPPEFIR[18]
     *  
     */
    (rPBPPEFIR, bit(18)) ? TBDDefaultCallout;

    /** PBPPEFIR[19]
     *  
     */
    (rPBPPEFIR, bit(19)) ? TBDDefaultCallout;

    /** PBPPEFIR[20]
     *  
     */
    (rPBPPEFIR, bit(20)) ? TBDDefaultCallout;

    /** PBPPEFIR[21]
     *  
     */
    (rPBPPEFIR, bit(21)) ? TBDDefaultCallout;

    /** PBPPEFIR[22]
     *  
     */
    (rPBPPEFIR, bit(22)) ? TBDDefaultCallout;

    /** PBPPEFIR[23]
     *  
     */
    (rPBPPEFIR, bit(23)) ? TBDDefaultCallout;

    /** PBPPEFIR[24]
     *  
     */
    (rPBPPEFIR, bit(24)) ? TBDDefaultCallout;

    /** PBPPEFIR[25]
     *  
     */
    (rPBPPEFIR, bit(25)) ? TBDDefaultCallout;

    /** PBPPEFIR[26]
     *  
     */
    (rPBPPEFIR, bit(26)) ? TBDDefaultCallout;

    /** PBPPEFIR[27]
     *  
     */
    (rPBPPEFIR, bit(27)) ? TBDDefaultCallout;

    /** PBPPEFIR[28]
     *  
     */
    (rPBPPEFIR, bit(28)) ? TBDDefaultCallout;

    /** PBPPEFIR[29]
     *  
     */
    (rPBPPEFIR, bit(29)) ? TBDDefaultCallout;

    /** PBPPEFIR[30]
     *  
     */
    (rPBPPEFIR, bit(30)) ? TBDDefaultCallout;

    /** PBPPEFIR[31]
     *  
     */
    (rPBPPEFIR, bit(31)) ? TBDDefaultCallout;

    /** PBPPEFIR[32]
     *  
     */
    (rPBPPEFIR, bit(32)) ? TBDDefaultCallout;

    /** PBPPEFIR[33]
     *  
     */
    (rPBPPEFIR, bit(33)) ? TBDDefaultCallout;

    /** PBPPEFIR[34]
     *  
     */
    (rPBPPEFIR, bit(34)) ? TBDDefaultCallout;

    /** PBPPEFIR[35]
     *  
     */
    (rPBPPEFIR, bit(35)) ? TBDDefaultCallout;

    /** PBPPEFIR[36]
     *  
     */
    (rPBPPEFIR, bit(36)) ? TBDDefaultCallout;

    /** PBPPEFIR[37]
     *  
     */
    (rPBPPEFIR, bit(37)) ? TBDDefaultCallout;

    /** PBPPEFIR[38]
     *  
     */
    (rPBPPEFIR, bit(38)) ? TBDDefaultCallout;

    /** PBPPEFIR[39]
     *  
     */
    (rPBPPEFIR, bit(39)) ? TBDDefaultCallout;

    /** PBPPEFIR[40]
     *  
     */
    (rPBPPEFIR, bit(40)) ? TBDDefaultCallout;

    /** PBPPEFIR[41]
     *  
     */
    (rPBPPEFIR, bit(41)) ? TBDDefaultCallout;

    /** PBPPEFIR[42]
     *  
     */
    (rPBPPEFIR, bit(42)) ? TBDDefaultCallout;

    /** PBPPEFIR[43]
     *  
     */
    (rPBPPEFIR, bit(43)) ? TBDDefaultCallout;

    /** PBPPEFIR[44]
     *  
     */
    (rPBPPEFIR, bit(44)) ? TBDDefaultCallout;

    /** PBPPEFIR[45]
     *  
     */
    (rPBPPEFIR, bit(45)) ? TBDDefaultCallout;

    /** PBPPEFIR[46]
     *  
     */
    (rPBPPEFIR, bit(46)) ? TBDDefaultCallout;

    /** PBPPEFIR[47]
     *  
     */
    (rPBPPEFIR, bit(47)) ? TBDDefaultCallout;

    /** PBPPEFIR[48]
     *  
     */
    (rPBPPEFIR, bit(48)) ? TBDDefaultCallout;

    /** PBPPEFIR[49]
     *  
     */
    (rPBPPEFIR, bit(49)) ? TBDDefaultCallout;

    /** PBPPEFIR[50]
     *  
     */
    (rPBPPEFIR, bit(50)) ? TBDDefaultCallout;

    /** PBPPEFIR[51]
     *  
     */
    (rPBPPEFIR, bit(51)) ? TBDDefaultCallout;

    /** PBPPEFIR[52]
     *  
     */
    (rPBPPEFIR, bit(52)) ? TBDDefaultCallout;

    /** PBPPEFIR[53]
     *  
     */
    (rPBPPEFIR, bit(53)) ? TBDDefaultCallout;

    /** PBPPEFIR[54]
     *  
     */
    (rPBPPEFIR, bit(54)) ? TBDDefaultCallout;

    /** PBPPEFIR[55]
     *  
     */
    (rPBPPEFIR, bit(55)) ? TBDDefaultCallout;

    /** PBPPEFIR[56]
     *  
     */
    (rPBPPEFIR, bit(56)) ? TBDDefaultCallout;

    /** PBPPEFIR[57]
     *  
     */
    (rPBPPEFIR, bit(57)) ? TBDDefaultCallout;

    /** PBPPEFIR[58]
     *  
     */
    (rPBPPEFIR, bit(58)) ? TBDDefaultCallout;

    /** PBPPEFIR[59]
     *  
     */
    (rPBPPEFIR, bit(59)) ? TBDDefaultCallout;

    /** PBPPEFIR[60]
     *  
     */
    (rPBPPEFIR, bit(60)) ? TBDDefaultCallout;

    /** PBPPEFIR[61]
     *  
     */
    (rPBPPEFIR, bit(61)) ? TBDDefaultCallout;

    /** PBPPEFIR[62]
     *  
     */
    (rPBPPEFIR, bit(62)) ? TBDDefaultCallout;

    /** PBPPEFIR[63]
     *  
     */
    (rPBPPEFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBAFIR
################################################################################

rule rPBAFIR
{
  CHECK_STOP:
    PBAFIR & ~PBAFIR_MASK & ~PBAFIR_ACT0 & ~PBAFIR_ACT1;
  RECOVERABLE:
    PBAFIR & ~PBAFIR_MASK & ~PBAFIR_ACT0 &  PBAFIR_ACT1;
};

group gPBAFIR filter singlebit
{
    /** PBAFIR[0]
     *  
     */
    (rPBAFIR, bit(0)) ? TBDDefaultCallout;

    /** PBAFIR[1]
     *  
     */
    (rPBAFIR, bit(1)) ? TBDDefaultCallout;

    /** PBAFIR[2]
     *  
     */
    (rPBAFIR, bit(2)) ? TBDDefaultCallout;

    /** PBAFIR[3]
     *  
     */
    (rPBAFIR, bit(3)) ? TBDDefaultCallout;

    /** PBAFIR[4]
     *  
     */
    (rPBAFIR, bit(4)) ? TBDDefaultCallout;

    /** PBAFIR[5]
     *  
     */
    (rPBAFIR, bit(5)) ? TBDDefaultCallout;

    /** PBAFIR[6]
     *  
     */
    (rPBAFIR, bit(6)) ? TBDDefaultCallout;

    /** PBAFIR[7]
     *  
     */
    (rPBAFIR, bit(7)) ? TBDDefaultCallout;

    /** PBAFIR[8]
     *  
     */
    (rPBAFIR, bit(8)) ? TBDDefaultCallout;

    /** PBAFIR[9]
     *  
     */
    (rPBAFIR, bit(9)) ? TBDDefaultCallout;

    /** PBAFIR[10]
     *  
     */
    (rPBAFIR, bit(10)) ? TBDDefaultCallout;

    /** PBAFIR[11]
     *  
     */
    (rPBAFIR, bit(11)) ? TBDDefaultCallout;

    /** PBAFIR[12]
     *  
     */
    (rPBAFIR, bit(12)) ? TBDDefaultCallout;

    /** PBAFIR[13]
     *  
     */
    (rPBAFIR, bit(13)) ? TBDDefaultCallout;

    /** PBAFIR[14]
     *  
     */
    (rPBAFIR, bit(14)) ? TBDDefaultCallout;

    /** PBAFIR[15]
     *  
     */
    (rPBAFIR, bit(15)) ? TBDDefaultCallout;

    /** PBAFIR[16]
     *  
     */
    (rPBAFIR, bit(16)) ? TBDDefaultCallout;

    /** PBAFIR[17]
     *  
     */
    (rPBAFIR, bit(17)) ? TBDDefaultCallout;

    /** PBAFIR[18]
     *  
     */
    (rPBAFIR, bit(18)) ? TBDDefaultCallout;

    /** PBAFIR[19]
     *  
     */
    (rPBAFIR, bit(19)) ? TBDDefaultCallout;

    /** PBAFIR[20]
     *  
     */
    (rPBAFIR, bit(20)) ? TBDDefaultCallout;

    /** PBAFIR[21]
     *  
     */
    (rPBAFIR, bit(21)) ? TBDDefaultCallout;

    /** PBAFIR[22]
     *  
     */
    (rPBAFIR, bit(22)) ? TBDDefaultCallout;

    /** PBAFIR[23]
     *  
     */
    (rPBAFIR, bit(23)) ? TBDDefaultCallout;

    /** PBAFIR[24]
     *  
     */
    (rPBAFIR, bit(24)) ? TBDDefaultCallout;

    /** PBAFIR[25]
     *  
     */
    (rPBAFIR, bit(25)) ? TBDDefaultCallout;

    /** PBAFIR[26]
     *  
     */
    (rPBAFIR, bit(26)) ? TBDDefaultCallout;

    /** PBAFIR[27]
     *  
     */
    (rPBAFIR, bit(27)) ? TBDDefaultCallout;

    /** PBAFIR[28]
     *  
     */
    (rPBAFIR, bit(28)) ? TBDDefaultCallout;

    /** PBAFIR[29]
     *  
     */
    (rPBAFIR, bit(29)) ? TBDDefaultCallout;

    /** PBAFIR[30]
     *  
     */
    (rPBAFIR, bit(30)) ? TBDDefaultCallout;

    /** PBAFIR[31]
     *  
     */
    (rPBAFIR, bit(31)) ? TBDDefaultCallout;

    /** PBAFIR[32]
     *  
     */
    (rPBAFIR, bit(32)) ? TBDDefaultCallout;

    /** PBAFIR[33]
     *  
     */
    (rPBAFIR, bit(33)) ? TBDDefaultCallout;

    /** PBAFIR[34]
     *  
     */
    (rPBAFIR, bit(34)) ? TBDDefaultCallout;

    /** PBAFIR[35]
     *  
     */
    (rPBAFIR, bit(35)) ? TBDDefaultCallout;

    /** PBAFIR[36]
     *  
     */
    (rPBAFIR, bit(36)) ? TBDDefaultCallout;

    /** PBAFIR[37]
     *  
     */
    (rPBAFIR, bit(37)) ? TBDDefaultCallout;

    /** PBAFIR[38]
     *  
     */
    (rPBAFIR, bit(38)) ? TBDDefaultCallout;

    /** PBAFIR[39]
     *  
     */
    (rPBAFIR, bit(39)) ? TBDDefaultCallout;

    /** PBAFIR[40]
     *  
     */
    (rPBAFIR, bit(40)) ? TBDDefaultCallout;

    /** PBAFIR[41]
     *  
     */
    (rPBAFIR, bit(41)) ? TBDDefaultCallout;

    /** PBAFIR[42]
     *  
     */
    (rPBAFIR, bit(42)) ? TBDDefaultCallout;

    /** PBAFIR[43]
     *  
     */
    (rPBAFIR, bit(43)) ? TBDDefaultCallout;

    /** PBAFIR[44]
     *  
     */
    (rPBAFIR, bit(44)) ? TBDDefaultCallout;

    /** PBAFIR[45]
     *  
     */
    (rPBAFIR, bit(45)) ? TBDDefaultCallout;

    /** PBAFIR[46]
     *  
     */
    (rPBAFIR, bit(46)) ? TBDDefaultCallout;

    /** PBAFIR[47]
     *  
     */
    (rPBAFIR, bit(47)) ? TBDDefaultCallout;

    /** PBAFIR[48]
     *  
     */
    (rPBAFIR, bit(48)) ? TBDDefaultCallout;

    /** PBAFIR[49]
     *  
     */
    (rPBAFIR, bit(49)) ? TBDDefaultCallout;

    /** PBAFIR[50]
     *  
     */
    (rPBAFIR, bit(50)) ? TBDDefaultCallout;

    /** PBAFIR[51]
     *  
     */
    (rPBAFIR, bit(51)) ? TBDDefaultCallout;

    /** PBAFIR[52]
     *  
     */
    (rPBAFIR, bit(52)) ? TBDDefaultCallout;

    /** PBAFIR[53]
     *  
     */
    (rPBAFIR, bit(53)) ? TBDDefaultCallout;

    /** PBAFIR[54]
     *  
     */
    (rPBAFIR, bit(54)) ? TBDDefaultCallout;

    /** PBAFIR[55]
     *  
     */
    (rPBAFIR, bit(55)) ? TBDDefaultCallout;

    /** PBAFIR[56]
     *  
     */
    (rPBAFIR, bit(56)) ? TBDDefaultCallout;

    /** PBAFIR[57]
     *  
     */
    (rPBAFIR, bit(57)) ? TBDDefaultCallout;

    /** PBAFIR[58]
     *  
     */
    (rPBAFIR, bit(58)) ? TBDDefaultCallout;

    /** PBAFIR[59]
     *  
     */
    (rPBAFIR, bit(59)) ? TBDDefaultCallout;

    /** PBAFIR[60]
     *  
     */
    (rPBAFIR, bit(60)) ? TBDDefaultCallout;

    /** PBAFIR[61]
     *  
     */
    (rPBAFIR, bit(61)) ? TBDDefaultCallout;

    /** PBAFIR[62]
     *  
     */
    (rPBAFIR, bit(62)) ? TBDDefaultCallout;

    /** PBAFIR[63]
     *  
     */
    (rPBAFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PSIHBFIR
################################################################################

rule rPSIHBFIR
{
  CHECK_STOP:
    PSIHBFIR & ~PSIHBFIR_MASK & ~PSIHBFIR_ACT0 & ~PSIHBFIR_ACT1;
  RECOVERABLE:
    PSIHBFIR & ~PSIHBFIR_MASK & ~PSIHBFIR_ACT0 &  PSIHBFIR_ACT1;
};

group gPSIHBFIR filter singlebit
{
    /** PSIHBFIR[0]
     *  
     */
    (rPSIHBFIR, bit(0)) ? TBDDefaultCallout;

    /** PSIHBFIR[1]
     *  
     */
    (rPSIHBFIR, bit(1)) ? TBDDefaultCallout;

    /** PSIHBFIR[2]
     *  
     */
    (rPSIHBFIR, bit(2)) ? TBDDefaultCallout;

    /** PSIHBFIR[3]
     *  
     */
    (rPSIHBFIR, bit(3)) ? TBDDefaultCallout;

    /** PSIHBFIR[4]
     *  
     */
    (rPSIHBFIR, bit(4)) ? TBDDefaultCallout;

    /** PSIHBFIR[5]
     *  
     */
    (rPSIHBFIR, bit(5)) ? TBDDefaultCallout;

    /** PSIHBFIR[6]
     *  
     */
    (rPSIHBFIR, bit(6)) ? TBDDefaultCallout;

    /** PSIHBFIR[7]
     *  
     */
    (rPSIHBFIR, bit(7)) ? TBDDefaultCallout;

    /** PSIHBFIR[8]
     *  
     */
    (rPSIHBFIR, bit(8)) ? TBDDefaultCallout;

    /** PSIHBFIR[9]
     *  
     */
    (rPSIHBFIR, bit(9)) ? TBDDefaultCallout;

    /** PSIHBFIR[10]
     *  
     */
    (rPSIHBFIR, bit(10)) ? TBDDefaultCallout;

    /** PSIHBFIR[11]
     *  
     */
    (rPSIHBFIR, bit(11)) ? TBDDefaultCallout;

    /** PSIHBFIR[12]
     *  
     */
    (rPSIHBFIR, bit(12)) ? TBDDefaultCallout;

    /** PSIHBFIR[13]
     *  
     */
    (rPSIHBFIR, bit(13)) ? TBDDefaultCallout;

    /** PSIHBFIR[14]
     *  
     */
    (rPSIHBFIR, bit(14)) ? TBDDefaultCallout;

    /** PSIHBFIR[15]
     *  
     */
    (rPSIHBFIR, bit(15)) ? TBDDefaultCallout;

    /** PSIHBFIR[16]
     *  
     */
    (rPSIHBFIR, bit(16)) ? TBDDefaultCallout;

    /** PSIHBFIR[17]
     *  
     */
    (rPSIHBFIR, bit(17)) ? TBDDefaultCallout;

    /** PSIHBFIR[18]
     *  
     */
    (rPSIHBFIR, bit(18)) ? TBDDefaultCallout;

    /** PSIHBFIR[19]
     *  
     */
    (rPSIHBFIR, bit(19)) ? TBDDefaultCallout;

    /** PSIHBFIR[20]
     *  
     */
    (rPSIHBFIR, bit(20)) ? TBDDefaultCallout;

    /** PSIHBFIR[21]
     *  
     */
    (rPSIHBFIR, bit(21)) ? TBDDefaultCallout;

    /** PSIHBFIR[22]
     *  
     */
    (rPSIHBFIR, bit(22)) ? TBDDefaultCallout;

    /** PSIHBFIR[23]
     *  
     */
    (rPSIHBFIR, bit(23)) ? TBDDefaultCallout;

    /** PSIHBFIR[24]
     *  
     */
    (rPSIHBFIR, bit(24)) ? TBDDefaultCallout;

    /** PSIHBFIR[25]
     *  
     */
    (rPSIHBFIR, bit(25)) ? TBDDefaultCallout;

    /** PSIHBFIR[26]
     *  
     */
    (rPSIHBFIR, bit(26)) ? TBDDefaultCallout;

    /** PSIHBFIR[27]
     *  
     */
    (rPSIHBFIR, bit(27)) ? TBDDefaultCallout;

    /** PSIHBFIR[28]
     *  
     */
    (rPSIHBFIR, bit(28)) ? TBDDefaultCallout;

    /** PSIHBFIR[29]
     *  
     */
    (rPSIHBFIR, bit(29)) ? TBDDefaultCallout;

    /** PSIHBFIR[30]
     *  
     */
    (rPSIHBFIR, bit(30)) ? TBDDefaultCallout;

    /** PSIHBFIR[31]
     *  
     */
    (rPSIHBFIR, bit(31)) ? TBDDefaultCallout;

    /** PSIHBFIR[32]
     *  
     */
    (rPSIHBFIR, bit(32)) ? TBDDefaultCallout;

    /** PSIHBFIR[33]
     *  
     */
    (rPSIHBFIR, bit(33)) ? TBDDefaultCallout;

    /** PSIHBFIR[34]
     *  
     */
    (rPSIHBFIR, bit(34)) ? TBDDefaultCallout;

    /** PSIHBFIR[35]
     *  
     */
    (rPSIHBFIR, bit(35)) ? TBDDefaultCallout;

    /** PSIHBFIR[36]
     *  
     */
    (rPSIHBFIR, bit(36)) ? TBDDefaultCallout;

    /** PSIHBFIR[37]
     *  
     */
    (rPSIHBFIR, bit(37)) ? TBDDefaultCallout;

    /** PSIHBFIR[38]
     *  
     */
    (rPSIHBFIR, bit(38)) ? TBDDefaultCallout;

    /** PSIHBFIR[39]
     *  
     */
    (rPSIHBFIR, bit(39)) ? TBDDefaultCallout;

    /** PSIHBFIR[40]
     *  
     */
    (rPSIHBFIR, bit(40)) ? TBDDefaultCallout;

    /** PSIHBFIR[41]
     *  
     */
    (rPSIHBFIR, bit(41)) ? TBDDefaultCallout;

    /** PSIHBFIR[42]
     *  
     */
    (rPSIHBFIR, bit(42)) ? TBDDefaultCallout;

    /** PSIHBFIR[43]
     *  
     */
    (rPSIHBFIR, bit(43)) ? TBDDefaultCallout;

    /** PSIHBFIR[44]
     *  
     */
    (rPSIHBFIR, bit(44)) ? TBDDefaultCallout;

    /** PSIHBFIR[45]
     *  
     */
    (rPSIHBFIR, bit(45)) ? TBDDefaultCallout;

    /** PSIHBFIR[46]
     *  
     */
    (rPSIHBFIR, bit(46)) ? TBDDefaultCallout;

    /** PSIHBFIR[47]
     *  
     */
    (rPSIHBFIR, bit(47)) ? TBDDefaultCallout;

    /** PSIHBFIR[48]
     *  
     */
    (rPSIHBFIR, bit(48)) ? TBDDefaultCallout;

    /** PSIHBFIR[49]
     *  
     */
    (rPSIHBFIR, bit(49)) ? TBDDefaultCallout;

    /** PSIHBFIR[50]
     *  
     */
    (rPSIHBFIR, bit(50)) ? TBDDefaultCallout;

    /** PSIHBFIR[51]
     *  
     */
    (rPSIHBFIR, bit(51)) ? TBDDefaultCallout;

    /** PSIHBFIR[52]
     *  
     */
    (rPSIHBFIR, bit(52)) ? TBDDefaultCallout;

    /** PSIHBFIR[53]
     *  
     */
    (rPSIHBFIR, bit(53)) ? TBDDefaultCallout;

    /** PSIHBFIR[54]
     *  
     */
    (rPSIHBFIR, bit(54)) ? TBDDefaultCallout;

    /** PSIHBFIR[55]
     *  
     */
    (rPSIHBFIR, bit(55)) ? TBDDefaultCallout;

    /** PSIHBFIR[56]
     *  
     */
    (rPSIHBFIR, bit(56)) ? TBDDefaultCallout;

    /** PSIHBFIR[57]
     *  
     */
    (rPSIHBFIR, bit(57)) ? TBDDefaultCallout;

    /** PSIHBFIR[58]
     *  
     */
    (rPSIHBFIR, bit(58)) ? TBDDefaultCallout;

    /** PSIHBFIR[59]
     *  
     */
    (rPSIHBFIR, bit(59)) ? TBDDefaultCallout;

    /** PSIHBFIR[60]
     *  
     */
    (rPSIHBFIR, bit(60)) ? TBDDefaultCallout;

    /** PSIHBFIR[61]
     *  
     */
    (rPSIHBFIR, bit(61)) ? TBDDefaultCallout;

    /** PSIHBFIR[62]
     *  
     */
    (rPSIHBFIR, bit(62)) ? TBDDefaultCallout;

    /** PSIHBFIR[63]
     *  
     */
    (rPSIHBFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip ENHCAFIR
################################################################################

rule rENHCAFIR
{
  CHECK_STOP:
    ENHCAFIR & ~ENHCAFIR_MASK & ~ENHCAFIR_ACT0 & ~ENHCAFIR_ACT1;
  RECOVERABLE:
    ENHCAFIR & ~ENHCAFIR_MASK & ~ENHCAFIR_ACT0 &  ENHCAFIR_ACT1;
};

group gENHCAFIR filter singlebit
{
    /** ENHCAFIR[0]
     *  
     */
    (rENHCAFIR, bit(0)) ? TBDDefaultCallout;

    /** ENHCAFIR[1]
     *  
     */
    (rENHCAFIR, bit(1)) ? TBDDefaultCallout;

    /** ENHCAFIR[2]
     *  
     */
    (rENHCAFIR, bit(2)) ? TBDDefaultCallout;

    /** ENHCAFIR[3]
     *  
     */
    (rENHCAFIR, bit(3)) ? TBDDefaultCallout;

    /** ENHCAFIR[4]
     *  
     */
    (rENHCAFIR, bit(4)) ? TBDDefaultCallout;

    /** ENHCAFIR[5]
     *  
     */
    (rENHCAFIR, bit(5)) ? TBDDefaultCallout;

    /** ENHCAFIR[6]
     *  
     */
    (rENHCAFIR, bit(6)) ? TBDDefaultCallout;

    /** ENHCAFIR[7]
     *  
     */
    (rENHCAFIR, bit(7)) ? TBDDefaultCallout;

    /** ENHCAFIR[8]
     *  
     */
    (rENHCAFIR, bit(8)) ? TBDDefaultCallout;

    /** ENHCAFIR[9]
     *  
     */
    (rENHCAFIR, bit(9)) ? TBDDefaultCallout;

    /** ENHCAFIR[10]
     *  
     */
    (rENHCAFIR, bit(10)) ? TBDDefaultCallout;

    /** ENHCAFIR[11]
     *  
     */
    (rENHCAFIR, bit(11)) ? TBDDefaultCallout;

    /** ENHCAFIR[12]
     *  
     */
    (rENHCAFIR, bit(12)) ? TBDDefaultCallout;

    /** ENHCAFIR[13]
     *  
     */
    (rENHCAFIR, bit(13)) ? TBDDefaultCallout;

    /** ENHCAFIR[14]
     *  
     */
    (rENHCAFIR, bit(14)) ? TBDDefaultCallout;

    /** ENHCAFIR[15]
     *  
     */
    (rENHCAFIR, bit(15)) ? TBDDefaultCallout;

    /** ENHCAFIR[16]
     *  
     */
    (rENHCAFIR, bit(16)) ? TBDDefaultCallout;

    /** ENHCAFIR[17]
     *  
     */
    (rENHCAFIR, bit(17)) ? TBDDefaultCallout;

    /** ENHCAFIR[18]
     *  
     */
    (rENHCAFIR, bit(18)) ? TBDDefaultCallout;

    /** ENHCAFIR[19]
     *  
     */
    (rENHCAFIR, bit(19)) ? TBDDefaultCallout;

    /** ENHCAFIR[20]
     *  
     */
    (rENHCAFIR, bit(20)) ? TBDDefaultCallout;

    /** ENHCAFIR[21]
     *  
     */
    (rENHCAFIR, bit(21)) ? TBDDefaultCallout;

    /** ENHCAFIR[22]
     *  
     */
    (rENHCAFIR, bit(22)) ? TBDDefaultCallout;

    /** ENHCAFIR[23]
     *  
     */
    (rENHCAFIR, bit(23)) ? TBDDefaultCallout;

    /** ENHCAFIR[24]
     *  
     */
    (rENHCAFIR, bit(24)) ? TBDDefaultCallout;

    /** ENHCAFIR[25]
     *  
     */
    (rENHCAFIR, bit(25)) ? TBDDefaultCallout;

    /** ENHCAFIR[26]
     *  
     */
    (rENHCAFIR, bit(26)) ? TBDDefaultCallout;

    /** ENHCAFIR[27]
     *  
     */
    (rENHCAFIR, bit(27)) ? TBDDefaultCallout;

    /** ENHCAFIR[28]
     *  
     */
    (rENHCAFIR, bit(28)) ? TBDDefaultCallout;

    /** ENHCAFIR[29]
     *  
     */
    (rENHCAFIR, bit(29)) ? TBDDefaultCallout;

    /** ENHCAFIR[30]
     *  
     */
    (rENHCAFIR, bit(30)) ? TBDDefaultCallout;

    /** ENHCAFIR[31]
     *  
     */
    (rENHCAFIR, bit(31)) ? TBDDefaultCallout;

    /** ENHCAFIR[32]
     *  
     */
    (rENHCAFIR, bit(32)) ? TBDDefaultCallout;

    /** ENHCAFIR[33]
     *  
     */
    (rENHCAFIR, bit(33)) ? TBDDefaultCallout;

    /** ENHCAFIR[34]
     *  
     */
    (rENHCAFIR, bit(34)) ? TBDDefaultCallout;

    /** ENHCAFIR[35]
     *  
     */
    (rENHCAFIR, bit(35)) ? TBDDefaultCallout;

    /** ENHCAFIR[36]
     *  
     */
    (rENHCAFIR, bit(36)) ? TBDDefaultCallout;

    /** ENHCAFIR[37]
     *  
     */
    (rENHCAFIR, bit(37)) ? TBDDefaultCallout;

    /** ENHCAFIR[38]
     *  
     */
    (rENHCAFIR, bit(38)) ? TBDDefaultCallout;

    /** ENHCAFIR[39]
     *  
     */
    (rENHCAFIR, bit(39)) ? TBDDefaultCallout;

    /** ENHCAFIR[40]
     *  
     */
    (rENHCAFIR, bit(40)) ? TBDDefaultCallout;

    /** ENHCAFIR[41]
     *  
     */
    (rENHCAFIR, bit(41)) ? TBDDefaultCallout;

    /** ENHCAFIR[42]
     *  
     */
    (rENHCAFIR, bit(42)) ? TBDDefaultCallout;

    /** ENHCAFIR[43]
     *  
     */
    (rENHCAFIR, bit(43)) ? TBDDefaultCallout;

    /** ENHCAFIR[44]
     *  
     */
    (rENHCAFIR, bit(44)) ? TBDDefaultCallout;

    /** ENHCAFIR[45]
     *  
     */
    (rENHCAFIR, bit(45)) ? TBDDefaultCallout;

    /** ENHCAFIR[46]
     *  
     */
    (rENHCAFIR, bit(46)) ? TBDDefaultCallout;

    /** ENHCAFIR[47]
     *  
     */
    (rENHCAFIR, bit(47)) ? TBDDefaultCallout;

    /** ENHCAFIR[48]
     *  
     */
    (rENHCAFIR, bit(48)) ? TBDDefaultCallout;

    /** ENHCAFIR[49]
     *  
     */
    (rENHCAFIR, bit(49)) ? TBDDefaultCallout;

    /** ENHCAFIR[50]
     *  
     */
    (rENHCAFIR, bit(50)) ? TBDDefaultCallout;

    /** ENHCAFIR[51]
     *  
     */
    (rENHCAFIR, bit(51)) ? TBDDefaultCallout;

    /** ENHCAFIR[52]
     *  
     */
    (rENHCAFIR, bit(52)) ? TBDDefaultCallout;

    /** ENHCAFIR[53]
     *  
     */
    (rENHCAFIR, bit(53)) ? TBDDefaultCallout;

    /** ENHCAFIR[54]
     *  
     */
    (rENHCAFIR, bit(54)) ? TBDDefaultCallout;

    /** ENHCAFIR[55]
     *  
     */
    (rENHCAFIR, bit(55)) ? TBDDefaultCallout;

    /** ENHCAFIR[56]
     *  
     */
    (rENHCAFIR, bit(56)) ? TBDDefaultCallout;

    /** ENHCAFIR[57]
     *  
     */
    (rENHCAFIR, bit(57)) ? TBDDefaultCallout;

    /** ENHCAFIR[58]
     *  
     */
    (rENHCAFIR, bit(58)) ? TBDDefaultCallout;

    /** ENHCAFIR[59]
     *  
     */
    (rENHCAFIR, bit(59)) ? TBDDefaultCallout;

    /** ENHCAFIR[60]
     *  
     */
    (rENHCAFIR, bit(60)) ? TBDDefaultCallout;

    /** ENHCAFIR[61]
     *  
     */
    (rENHCAFIR, bit(61)) ? TBDDefaultCallout;

    /** ENHCAFIR[62]
     *  
     */
    (rENHCAFIR, bit(62)) ? TBDDefaultCallout;

    /** ENHCAFIR[63]
     *  
     */
    (rENHCAFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip EHHCAFIR
################################################################################

rule rEHHCAFIR
{
  CHECK_STOP:
    EHHCAFIR & ~EHHCAFIR_MASK & ~EHHCAFIR_ACT0 & ~EHHCAFIR_ACT1;
  RECOVERABLE:
    EHHCAFIR & ~EHHCAFIR_MASK & ~EHHCAFIR_ACT0 &  EHHCAFIR_ACT1;
};

group gEHHCAFIR filter singlebit
{
    /** EHHCAFIR[0]
     *  
     */
    (rEHHCAFIR, bit(0)) ? TBDDefaultCallout;

    /** EHHCAFIR[1]
     *  
     */
    (rEHHCAFIR, bit(1)) ? TBDDefaultCallout;

    /** EHHCAFIR[2]
     *  
     */
    (rEHHCAFIR, bit(2)) ? TBDDefaultCallout;

    /** EHHCAFIR[3]
     *  
     */
    (rEHHCAFIR, bit(3)) ? TBDDefaultCallout;

    /** EHHCAFIR[4]
     *  
     */
    (rEHHCAFIR, bit(4)) ? TBDDefaultCallout;

    /** EHHCAFIR[5]
     *  
     */
    (rEHHCAFIR, bit(5)) ? TBDDefaultCallout;

    /** EHHCAFIR[6]
     *  
     */
    (rEHHCAFIR, bit(6)) ? TBDDefaultCallout;

    /** EHHCAFIR[7]
     *  
     */
    (rEHHCAFIR, bit(7)) ? TBDDefaultCallout;

    /** EHHCAFIR[8]
     *  
     */
    (rEHHCAFIR, bit(8)) ? TBDDefaultCallout;

    /** EHHCAFIR[9]
     *  
     */
    (rEHHCAFIR, bit(9)) ? TBDDefaultCallout;

    /** EHHCAFIR[10]
     *  
     */
    (rEHHCAFIR, bit(10)) ? TBDDefaultCallout;

    /** EHHCAFIR[11]
     *  
     */
    (rEHHCAFIR, bit(11)) ? TBDDefaultCallout;

    /** EHHCAFIR[12]
     *  
     */
    (rEHHCAFIR, bit(12)) ? TBDDefaultCallout;

    /** EHHCAFIR[13]
     *  
     */
    (rEHHCAFIR, bit(13)) ? TBDDefaultCallout;

    /** EHHCAFIR[14]
     *  
     */
    (rEHHCAFIR, bit(14)) ? TBDDefaultCallout;

    /** EHHCAFIR[15]
     *  
     */
    (rEHHCAFIR, bit(15)) ? TBDDefaultCallout;

    /** EHHCAFIR[16]
     *  
     */
    (rEHHCAFIR, bit(16)) ? TBDDefaultCallout;

    /** EHHCAFIR[17]
     *  
     */
    (rEHHCAFIR, bit(17)) ? TBDDefaultCallout;

    /** EHHCAFIR[18]
     *  
     */
    (rEHHCAFIR, bit(18)) ? TBDDefaultCallout;

    /** EHHCAFIR[19]
     *  
     */
    (rEHHCAFIR, bit(19)) ? TBDDefaultCallout;

    /** EHHCAFIR[20]
     *  
     */
    (rEHHCAFIR, bit(20)) ? TBDDefaultCallout;

    /** EHHCAFIR[21]
     *  
     */
    (rEHHCAFIR, bit(21)) ? TBDDefaultCallout;

    /** EHHCAFIR[22]
     *  
     */
    (rEHHCAFIR, bit(22)) ? TBDDefaultCallout;

    /** EHHCAFIR[23]
     *  
     */
    (rEHHCAFIR, bit(23)) ? TBDDefaultCallout;

    /** EHHCAFIR[24]
     *  
     */
    (rEHHCAFIR, bit(24)) ? TBDDefaultCallout;

    /** EHHCAFIR[25]
     *  
     */
    (rEHHCAFIR, bit(25)) ? TBDDefaultCallout;

    /** EHHCAFIR[26]
     *  
     */
    (rEHHCAFIR, bit(26)) ? TBDDefaultCallout;

    /** EHHCAFIR[27]
     *  
     */
    (rEHHCAFIR, bit(27)) ? TBDDefaultCallout;

    /** EHHCAFIR[28]
     *  
     */
    (rEHHCAFIR, bit(28)) ? TBDDefaultCallout;

    /** EHHCAFIR[29]
     *  
     */
    (rEHHCAFIR, bit(29)) ? TBDDefaultCallout;

    /** EHHCAFIR[30]
     *  
     */
    (rEHHCAFIR, bit(30)) ? TBDDefaultCallout;

    /** EHHCAFIR[31]
     *  
     */
    (rEHHCAFIR, bit(31)) ? TBDDefaultCallout;

    /** EHHCAFIR[32]
     *  
     */
    (rEHHCAFIR, bit(32)) ? TBDDefaultCallout;

    /** EHHCAFIR[33]
     *  
     */
    (rEHHCAFIR, bit(33)) ? TBDDefaultCallout;

    /** EHHCAFIR[34]
     *  
     */
    (rEHHCAFIR, bit(34)) ? TBDDefaultCallout;

    /** EHHCAFIR[35]
     *  
     */
    (rEHHCAFIR, bit(35)) ? TBDDefaultCallout;

    /** EHHCAFIR[36]
     *  
     */
    (rEHHCAFIR, bit(36)) ? TBDDefaultCallout;

    /** EHHCAFIR[37]
     *  
     */
    (rEHHCAFIR, bit(37)) ? TBDDefaultCallout;

    /** EHHCAFIR[38]
     *  
     */
    (rEHHCAFIR, bit(38)) ? TBDDefaultCallout;

    /** EHHCAFIR[39]
     *  
     */
    (rEHHCAFIR, bit(39)) ? TBDDefaultCallout;

    /** EHHCAFIR[40]
     *  
     */
    (rEHHCAFIR, bit(40)) ? TBDDefaultCallout;

    /** EHHCAFIR[41]
     *  
     */
    (rEHHCAFIR, bit(41)) ? TBDDefaultCallout;

    /** EHHCAFIR[42]
     *  
     */
    (rEHHCAFIR, bit(42)) ? TBDDefaultCallout;

    /** EHHCAFIR[43]
     *  
     */
    (rEHHCAFIR, bit(43)) ? TBDDefaultCallout;

    /** EHHCAFIR[44]
     *  
     */
    (rEHHCAFIR, bit(44)) ? TBDDefaultCallout;

    /** EHHCAFIR[45]
     *  
     */
    (rEHHCAFIR, bit(45)) ? TBDDefaultCallout;

    /** EHHCAFIR[46]
     *  
     */
    (rEHHCAFIR, bit(46)) ? TBDDefaultCallout;

    /** EHHCAFIR[47]
     *  
     */
    (rEHHCAFIR, bit(47)) ? TBDDefaultCallout;

    /** EHHCAFIR[48]
     *  
     */
    (rEHHCAFIR, bit(48)) ? TBDDefaultCallout;

    /** EHHCAFIR[49]
     *  
     */
    (rEHHCAFIR, bit(49)) ? TBDDefaultCallout;

    /** EHHCAFIR[50]
     *  
     */
    (rEHHCAFIR, bit(50)) ? TBDDefaultCallout;

    /** EHHCAFIR[51]
     *  
     */
    (rEHHCAFIR, bit(51)) ? TBDDefaultCallout;

    /** EHHCAFIR[52]
     *  
     */
    (rEHHCAFIR, bit(52)) ? TBDDefaultCallout;

    /** EHHCAFIR[53]
     *  
     */
    (rEHHCAFIR, bit(53)) ? TBDDefaultCallout;

    /** EHHCAFIR[54]
     *  
     */
    (rEHHCAFIR, bit(54)) ? TBDDefaultCallout;

    /** EHHCAFIR[55]
     *  
     */
    (rEHHCAFIR, bit(55)) ? TBDDefaultCallout;

    /** EHHCAFIR[56]
     *  
     */
    (rEHHCAFIR, bit(56)) ? TBDDefaultCallout;

    /** EHHCAFIR[57]
     *  
     */
    (rEHHCAFIR, bit(57)) ? TBDDefaultCallout;

    /** EHHCAFIR[58]
     *  
     */
    (rEHHCAFIR, bit(58)) ? TBDDefaultCallout;

    /** EHHCAFIR[59]
     *  
     */
    (rEHHCAFIR, bit(59)) ? TBDDefaultCallout;

    /** EHHCAFIR[60]
     *  
     */
    (rEHHCAFIR, bit(60)) ? TBDDefaultCallout;

    /** EHHCAFIR[61]
     *  
     */
    (rEHHCAFIR, bit(61)) ? TBDDefaultCallout;

    /** EHHCAFIR[62]
     *  
     */
    (rEHHCAFIR, bit(62)) ? TBDDefaultCallout;

    /** EHHCAFIR[63]
     *  
     */
    (rEHHCAFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBAMFIR
################################################################################

rule rPBAMFIR
{
  CHECK_STOP:
    PBAMFIR & ~PBAMFIR_MASK & ~PBAMFIR_ACT0 & ~PBAMFIR_ACT1;
  RECOVERABLE:
    PBAMFIR & ~PBAMFIR_MASK & ~PBAMFIR_ACT0 &  PBAMFIR_ACT1;
};

group gPBAMFIR filter singlebit
{
    /** PBAMFIR[0]
     *  
     */
    (rPBAMFIR, bit(0)) ? TBDDefaultCallout;

    /** PBAMFIR[1]
     *  
     */
    (rPBAMFIR, bit(1)) ? TBDDefaultCallout;

    /** PBAMFIR[2]
     *  
     */
    (rPBAMFIR, bit(2)) ? TBDDefaultCallout;

    /** PBAMFIR[3]
     *  
     */
    (rPBAMFIR, bit(3)) ? TBDDefaultCallout;

    /** PBAMFIR[4]
     *  
     */
    (rPBAMFIR, bit(4)) ? TBDDefaultCallout;

    /** PBAMFIR[5]
     *  
     */
    (rPBAMFIR, bit(5)) ? TBDDefaultCallout;

    /** PBAMFIR[6]
     *  
     */
    (rPBAMFIR, bit(6)) ? TBDDefaultCallout;

    /** PBAMFIR[7]
     *  
     */
    (rPBAMFIR, bit(7)) ? TBDDefaultCallout;

    /** PBAMFIR[8]
     *  
     */
    (rPBAMFIR, bit(8)) ? TBDDefaultCallout;

    /** PBAMFIR[9]
     *  
     */
    (rPBAMFIR, bit(9)) ? TBDDefaultCallout;

    /** PBAMFIR[10]
     *  
     */
    (rPBAMFIR, bit(10)) ? TBDDefaultCallout;

    /** PBAMFIR[11]
     *  
     */
    (rPBAMFIR, bit(11)) ? TBDDefaultCallout;

    /** PBAMFIR[12]
     *  
     */
    (rPBAMFIR, bit(12)) ? TBDDefaultCallout;

    /** PBAMFIR[13]
     *  
     */
    (rPBAMFIR, bit(13)) ? TBDDefaultCallout;

    /** PBAMFIR[14]
     *  
     */
    (rPBAMFIR, bit(14)) ? TBDDefaultCallout;

    /** PBAMFIR[15]
     *  
     */
    (rPBAMFIR, bit(15)) ? TBDDefaultCallout;

    /** PBAMFIR[16]
     *  
     */
    (rPBAMFIR, bit(16)) ? TBDDefaultCallout;

    /** PBAMFIR[17]
     *  
     */
    (rPBAMFIR, bit(17)) ? TBDDefaultCallout;

    /** PBAMFIR[18]
     *  
     */
    (rPBAMFIR, bit(18)) ? TBDDefaultCallout;

    /** PBAMFIR[19]
     *  
     */
    (rPBAMFIR, bit(19)) ? TBDDefaultCallout;

    /** PBAMFIR[20]
     *  
     */
    (rPBAMFIR, bit(20)) ? TBDDefaultCallout;

    /** PBAMFIR[21]
     *  
     */
    (rPBAMFIR, bit(21)) ? TBDDefaultCallout;

    /** PBAMFIR[22]
     *  
     */
    (rPBAMFIR, bit(22)) ? TBDDefaultCallout;

    /** PBAMFIR[23]
     *  
     */
    (rPBAMFIR, bit(23)) ? TBDDefaultCallout;

    /** PBAMFIR[24]
     *  
     */
    (rPBAMFIR, bit(24)) ? TBDDefaultCallout;

    /** PBAMFIR[25]
     *  
     */
    (rPBAMFIR, bit(25)) ? TBDDefaultCallout;

    /** PBAMFIR[26]
     *  
     */
    (rPBAMFIR, bit(26)) ? TBDDefaultCallout;

    /** PBAMFIR[27]
     *  
     */
    (rPBAMFIR, bit(27)) ? TBDDefaultCallout;

    /** PBAMFIR[28]
     *  
     */
    (rPBAMFIR, bit(28)) ? TBDDefaultCallout;

    /** PBAMFIR[29]
     *  
     */
    (rPBAMFIR, bit(29)) ? TBDDefaultCallout;

    /** PBAMFIR[30]
     *  
     */
    (rPBAMFIR, bit(30)) ? TBDDefaultCallout;

    /** PBAMFIR[31]
     *  
     */
    (rPBAMFIR, bit(31)) ? TBDDefaultCallout;

    /** PBAMFIR[32]
     *  
     */
    (rPBAMFIR, bit(32)) ? TBDDefaultCallout;

    /** PBAMFIR[33]
     *  
     */
    (rPBAMFIR, bit(33)) ? TBDDefaultCallout;

    /** PBAMFIR[34]
     *  
     */
    (rPBAMFIR, bit(34)) ? TBDDefaultCallout;

    /** PBAMFIR[35]
     *  
     */
    (rPBAMFIR, bit(35)) ? TBDDefaultCallout;

    /** PBAMFIR[36]
     *  
     */
    (rPBAMFIR, bit(36)) ? TBDDefaultCallout;

    /** PBAMFIR[37]
     *  
     */
    (rPBAMFIR, bit(37)) ? TBDDefaultCallout;

    /** PBAMFIR[38]
     *  
     */
    (rPBAMFIR, bit(38)) ? TBDDefaultCallout;

    /** PBAMFIR[39]
     *  
     */
    (rPBAMFIR, bit(39)) ? TBDDefaultCallout;

    /** PBAMFIR[40]
     *  
     */
    (rPBAMFIR, bit(40)) ? TBDDefaultCallout;

    /** PBAMFIR[41]
     *  
     */
    (rPBAMFIR, bit(41)) ? TBDDefaultCallout;

    /** PBAMFIR[42]
     *  
     */
    (rPBAMFIR, bit(42)) ? TBDDefaultCallout;

    /** PBAMFIR[43]
     *  
     */
    (rPBAMFIR, bit(43)) ? TBDDefaultCallout;

    /** PBAMFIR[44]
     *  
     */
    (rPBAMFIR, bit(44)) ? TBDDefaultCallout;

    /** PBAMFIR[45]
     *  
     */
    (rPBAMFIR, bit(45)) ? TBDDefaultCallout;

    /** PBAMFIR[46]
     *  
     */
    (rPBAMFIR, bit(46)) ? TBDDefaultCallout;

    /** PBAMFIR[47]
     *  
     */
    (rPBAMFIR, bit(47)) ? TBDDefaultCallout;

    /** PBAMFIR[48]
     *  
     */
    (rPBAMFIR, bit(48)) ? TBDDefaultCallout;

    /** PBAMFIR[49]
     *  
     */
    (rPBAMFIR, bit(49)) ? TBDDefaultCallout;

    /** PBAMFIR[50]
     *  
     */
    (rPBAMFIR, bit(50)) ? TBDDefaultCallout;

    /** PBAMFIR[51]
     *  
     */
    (rPBAMFIR, bit(51)) ? TBDDefaultCallout;

    /** PBAMFIR[52]
     *  
     */
    (rPBAMFIR, bit(52)) ? TBDDefaultCallout;

    /** PBAMFIR[53]
     *  
     */
    (rPBAMFIR, bit(53)) ? TBDDefaultCallout;

    /** PBAMFIR[54]
     *  
     */
    (rPBAMFIR, bit(54)) ? TBDDefaultCallout;

    /** PBAMFIR[55]
     *  
     */
    (rPBAMFIR, bit(55)) ? TBDDefaultCallout;

    /** PBAMFIR[56]
     *  
     */
    (rPBAMFIR, bit(56)) ? TBDDefaultCallout;

    /** PBAMFIR[57]
     *  
     */
    (rPBAMFIR, bit(57)) ? TBDDefaultCallout;

    /** PBAMFIR[58]
     *  
     */
    (rPBAMFIR, bit(58)) ? TBDDefaultCallout;

    /** PBAMFIR[59]
     *  
     */
    (rPBAMFIR, bit(59)) ? TBDDefaultCallout;

    /** PBAMFIR[60]
     *  
     */
    (rPBAMFIR, bit(60)) ? TBDDefaultCallout;

    /** PBAMFIR[61]
     *  
     */
    (rPBAMFIR, bit(61)) ? TBDDefaultCallout;

    /** PBAMFIR[62]
     *  
     */
    (rPBAMFIR, bit(62)) ? TBDDefaultCallout;

    /** PBAMFIR[63]
     *  
     */
    (rPBAMFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBICQFIR
################################################################################

rule rPBICQFIR
{
  CHECK_STOP:
    PBICQFIR & ~PBICQFIR_MASK & ~PBICQFIR_ACT0 & ~PBICQFIR_ACT1;
  RECOVERABLE:
    PBICQFIR & ~PBICQFIR_MASK & ~PBICQFIR_ACT0 &  PBICQFIR_ACT1;
  UNIT_CS:
    PBICQFIR & ~PBICQFIR_MASK &  PBICQFIR_ACT0 &  PBICQFIR_ACT1;
};

group gPBICQFIR filter singlebit
{
    /** PBICQFIR[0]
     *  
     */
    (rPBICQFIR, bit(0)) ? TBDDefaultCallout;

    /** PBICQFIR[1]
     *  
     */
    (rPBICQFIR, bit(1)) ? TBDDefaultCallout;

    /** PBICQFIR[2]
     *  
     */
    (rPBICQFIR, bit(2)) ? TBDDefaultCallout;

    /** PBICQFIR[3]
     *  
     */
    (rPBICQFIR, bit(3)) ? TBDDefaultCallout;

    /** PBICQFIR[4]
     *  
     */
    (rPBICQFIR, bit(4)) ? TBDDefaultCallout;

    /** PBICQFIR[5]
     *  
     */
    (rPBICQFIR, bit(5)) ? TBDDefaultCallout;

    /** PBICQFIR[6]
     *  
     */
    (rPBICQFIR, bit(6)) ? TBDDefaultCallout;

    /** PBICQFIR[7]
     *  
     */
    (rPBICQFIR, bit(7)) ? TBDDefaultCallout;

    /** PBICQFIR[8]
     *  
     */
    (rPBICQFIR, bit(8)) ? TBDDefaultCallout;

    /** PBICQFIR[9]
     *  
     */
    (rPBICQFIR, bit(9)) ? TBDDefaultCallout;

    /** PBICQFIR[10]
     *  
     */
    (rPBICQFIR, bit(10)) ? TBDDefaultCallout;

    /** PBICQFIR[11]
     *  
     */
    (rPBICQFIR, bit(11)) ? TBDDefaultCallout;

    /** PBICQFIR[12]
     *  
     */
    (rPBICQFIR, bit(12)) ? TBDDefaultCallout;

    /** PBICQFIR[13]
     *  
     */
    (rPBICQFIR, bit(13)) ? TBDDefaultCallout;

    /** PBICQFIR[14]
     *  
     */
    (rPBICQFIR, bit(14)) ? TBDDefaultCallout;

    /** PBICQFIR[15]
     *  
     */
    (rPBICQFIR, bit(15)) ? TBDDefaultCallout;

    /** PBICQFIR[16]
     *  
     */
    (rPBICQFIR, bit(16)) ? TBDDefaultCallout;

    /** PBICQFIR[17]
     *  
     */
    (rPBICQFIR, bit(17)) ? TBDDefaultCallout;

    /** PBICQFIR[18]
     *  
     */
    (rPBICQFIR, bit(18)) ? TBDDefaultCallout;

    /** PBICQFIR[19]
     *  
     */
    (rPBICQFIR, bit(19)) ? TBDDefaultCallout;

    /** PBICQFIR[20]
     *  
     */
    (rPBICQFIR, bit(20)) ? TBDDefaultCallout;

    /** PBICQFIR[21]
     *  
     */
    (rPBICQFIR, bit(21)) ? TBDDefaultCallout;

    /** PBICQFIR[22]
     *  
     */
    (rPBICQFIR, bit(22)) ? TBDDefaultCallout;

    /** PBICQFIR[23]
     *  
     */
    (rPBICQFIR, bit(23)) ? TBDDefaultCallout;

    /** PBICQFIR[24]
     *  
     */
    (rPBICQFIR, bit(24)) ? TBDDefaultCallout;

    /** PBICQFIR[25]
     *  
     */
    (rPBICQFIR, bit(25)) ? TBDDefaultCallout;

    /** PBICQFIR[26]
     *  
     */
    (rPBICQFIR, bit(26)) ? TBDDefaultCallout;

    /** PBICQFIR[27]
     *  
     */
    (rPBICQFIR, bit(27)) ? TBDDefaultCallout;

    /** PBICQFIR[28]
     *  
     */
    (rPBICQFIR, bit(28)) ? TBDDefaultCallout;

    /** PBICQFIR[29]
     *  
     */
    (rPBICQFIR, bit(29)) ? TBDDefaultCallout;

    /** PBICQFIR[30]
     *  
     */
    (rPBICQFIR, bit(30)) ? TBDDefaultCallout;

    /** PBICQFIR[31]
     *  
     */
    (rPBICQFIR, bit(31)) ? TBDDefaultCallout;

    /** PBICQFIR[32]
     *  
     */
    (rPBICQFIR, bit(32)) ? TBDDefaultCallout;

    /** PBICQFIR[33]
     *  
     */
    (rPBICQFIR, bit(33)) ? TBDDefaultCallout;

    /** PBICQFIR[34]
     *  
     */
    (rPBICQFIR, bit(34)) ? TBDDefaultCallout;

    /** PBICQFIR[35]
     *  
     */
    (rPBICQFIR, bit(35)) ? TBDDefaultCallout;

    /** PBICQFIR[36]
     *  
     */
    (rPBICQFIR, bit(36)) ? TBDDefaultCallout;

    /** PBICQFIR[37]
     *  
     */
    (rPBICQFIR, bit(37)) ? TBDDefaultCallout;

    /** PBICQFIR[38]
     *  
     */
    (rPBICQFIR, bit(38)) ? TBDDefaultCallout;

    /** PBICQFIR[39]
     *  
     */
    (rPBICQFIR, bit(39)) ? TBDDefaultCallout;

    /** PBICQFIR[40]
     *  
     */
    (rPBICQFIR, bit(40)) ? TBDDefaultCallout;

    /** PBICQFIR[41]
     *  
     */
    (rPBICQFIR, bit(41)) ? TBDDefaultCallout;

    /** PBICQFIR[42]
     *  
     */
    (rPBICQFIR, bit(42)) ? TBDDefaultCallout;

    /** PBICQFIR[43]
     *  
     */
    (rPBICQFIR, bit(43)) ? TBDDefaultCallout;

    /** PBICQFIR[44]
     *  
     */
    (rPBICQFIR, bit(44)) ? TBDDefaultCallout;

    /** PBICQFIR[45]
     *  
     */
    (rPBICQFIR, bit(45)) ? TBDDefaultCallout;

    /** PBICQFIR[46]
     *  
     */
    (rPBICQFIR, bit(46)) ? TBDDefaultCallout;

    /** PBICQFIR[47]
     *  
     */
    (rPBICQFIR, bit(47)) ? TBDDefaultCallout;

    /** PBICQFIR[48]
     *  
     */
    (rPBICQFIR, bit(48)) ? TBDDefaultCallout;

    /** PBICQFIR[49]
     *  
     */
    (rPBICQFIR, bit(49)) ? TBDDefaultCallout;

    /** PBICQFIR[50]
     *  
     */
    (rPBICQFIR, bit(50)) ? TBDDefaultCallout;

    /** PBICQFIR[51]
     *  
     */
    (rPBICQFIR, bit(51)) ? TBDDefaultCallout;

    /** PBICQFIR[52]
     *  
     */
    (rPBICQFIR, bit(52)) ? TBDDefaultCallout;

    /** PBICQFIR[53]
     *  
     */
    (rPBICQFIR, bit(53)) ? TBDDefaultCallout;

    /** PBICQFIR[54]
     *  
     */
    (rPBICQFIR, bit(54)) ? TBDDefaultCallout;

    /** PBICQFIR[55]
     *  
     */
    (rPBICQFIR, bit(55)) ? TBDDefaultCallout;

    /** PBICQFIR[56]
     *  
     */
    (rPBICQFIR, bit(56)) ? TBDDefaultCallout;

    /** PBICQFIR[57]
     *  
     */
    (rPBICQFIR, bit(57)) ? TBDDefaultCallout;

    /** PBICQFIR[58]
     *  
     */
    (rPBICQFIR, bit(58)) ? TBDDefaultCallout;

    /** PBICQFIR[59]
     *  
     */
    (rPBICQFIR, bit(59)) ? TBDDefaultCallout;

    /** PBICQFIR[60]
     *  
     */
    (rPBICQFIR, bit(60)) ? TBDDefaultCallout;

    /** PBICQFIR[61]
     *  
     */
    (rPBICQFIR, bit(61)) ? TBDDefaultCallout;

    /** PBICQFIR[62]
     *  
     */
    (rPBICQFIR, bit(62)) ? TBDDefaultCallout;

    /** PBICQFIR[63]
     *  
     */
    (rPBICQFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip NMMUFIR
################################################################################

rule rNMMUFIR
{
  CHECK_STOP:
    NMMUFIR & ~NMMUFIR_MASK & ~NMMUFIR_ACT0 & ~NMMUFIR_ACT1;
  RECOVERABLE:
    NMMUFIR & ~NMMUFIR_MASK & ~NMMUFIR_ACT0 &  NMMUFIR_ACT1;
  UNIT_CS:
    NMMUFIR & ~NMMUFIR_MASK &  NMMUFIR_ACT0 &  NMMUFIR_ACT1;
};

group gNMMUFIR filter singlebit
{
    /** NMMUFIR[0]
     *  
     */
    (rNMMUFIR, bit(0)) ? TBDDefaultCallout;

    /** NMMUFIR[1]
     *  
     */
    (rNMMUFIR, bit(1)) ? TBDDefaultCallout;

    /** NMMUFIR[2]
     *  
     */
    (rNMMUFIR, bit(2)) ? TBDDefaultCallout;

    /** NMMUFIR[3]
     *  
     */
    (rNMMUFIR, bit(3)) ? TBDDefaultCallout;

    /** NMMUFIR[4]
     *  
     */
    (rNMMUFIR, bit(4)) ? TBDDefaultCallout;

    /** NMMUFIR[5]
     *  
     */
    (rNMMUFIR, bit(5)) ? TBDDefaultCallout;

    /** NMMUFIR[6]
     *  
     */
    (rNMMUFIR, bit(6)) ? TBDDefaultCallout;

    /** NMMUFIR[7]
     *  
     */
    (rNMMUFIR, bit(7)) ? TBDDefaultCallout;

    /** NMMUFIR[8]
     *  
     */
    (rNMMUFIR, bit(8)) ? TBDDefaultCallout;

    /** NMMUFIR[9]
     *  
     */
    (rNMMUFIR, bit(9)) ? TBDDefaultCallout;

    /** NMMUFIR[10]
     *  
     */
    (rNMMUFIR, bit(10)) ? TBDDefaultCallout;

    /** NMMUFIR[11]
     *  
     */
    (rNMMUFIR, bit(11)) ? TBDDefaultCallout;

    /** NMMUFIR[12]
     *  
     */
    (rNMMUFIR, bit(12)) ? TBDDefaultCallout;

    /** NMMUFIR[13]
     *  
     */
    (rNMMUFIR, bit(13)) ? TBDDefaultCallout;

    /** NMMUFIR[14]
     *  
     */
    (rNMMUFIR, bit(14)) ? TBDDefaultCallout;

    /** NMMUFIR[15]
     *  
     */
    (rNMMUFIR, bit(15)) ? TBDDefaultCallout;

    /** NMMUFIR[16]
     *  
     */
    (rNMMUFIR, bit(16)) ? TBDDefaultCallout;

    /** NMMUFIR[17]
     *  
     */
    (rNMMUFIR, bit(17)) ? TBDDefaultCallout;

    /** NMMUFIR[18]
     *  
     */
    (rNMMUFIR, bit(18)) ? TBDDefaultCallout;

    /** NMMUFIR[19]
     *  
     */
    (rNMMUFIR, bit(19)) ? TBDDefaultCallout;

    /** NMMUFIR[20]
     *  
     */
    (rNMMUFIR, bit(20)) ? TBDDefaultCallout;

    /** NMMUFIR[21]
     *  
     */
    (rNMMUFIR, bit(21)) ? TBDDefaultCallout;

    /** NMMUFIR[22]
     *  
     */
    (rNMMUFIR, bit(22)) ? TBDDefaultCallout;

    /** NMMUFIR[23]
     *  
     */
    (rNMMUFIR, bit(23)) ? TBDDefaultCallout;

    /** NMMUFIR[24]
     *  
     */
    (rNMMUFIR, bit(24)) ? TBDDefaultCallout;

    /** NMMUFIR[25]
     *  
     */
    (rNMMUFIR, bit(25)) ? TBDDefaultCallout;

    /** NMMUFIR[26]
     *  
     */
    (rNMMUFIR, bit(26)) ? TBDDefaultCallout;

    /** NMMUFIR[27]
     *  
     */
    (rNMMUFIR, bit(27)) ? TBDDefaultCallout;

    /** NMMUFIR[28]
     *  
     */
    (rNMMUFIR, bit(28)) ? TBDDefaultCallout;

    /** NMMUFIR[29]
     *  
     */
    (rNMMUFIR, bit(29)) ? TBDDefaultCallout;

    /** NMMUFIR[30]
     *  
     */
    (rNMMUFIR, bit(30)) ? TBDDefaultCallout;

    /** NMMUFIR[31]
     *  
     */
    (rNMMUFIR, bit(31)) ? TBDDefaultCallout;

    /** NMMUFIR[32]
     *  
     */
    (rNMMUFIR, bit(32)) ? TBDDefaultCallout;

    /** NMMUFIR[33]
     *  
     */
    (rNMMUFIR, bit(33)) ? TBDDefaultCallout;

    /** NMMUFIR[34]
     *  
     */
    (rNMMUFIR, bit(34)) ? TBDDefaultCallout;

    /** NMMUFIR[35]
     *  
     */
    (rNMMUFIR, bit(35)) ? TBDDefaultCallout;

    /** NMMUFIR[36]
     *  
     */
    (rNMMUFIR, bit(36)) ? TBDDefaultCallout;

    /** NMMUFIR[37]
     *  
     */
    (rNMMUFIR, bit(37)) ? TBDDefaultCallout;

    /** NMMUFIR[38]
     *  
     */
    (rNMMUFIR, bit(38)) ? TBDDefaultCallout;

    /** NMMUFIR[39]
     *  
     */
    (rNMMUFIR, bit(39)) ? TBDDefaultCallout;

    /** NMMUFIR[40]
     *  
     */
    (rNMMUFIR, bit(40)) ? TBDDefaultCallout;

    /** NMMUFIR[41]
     *  
     */
    (rNMMUFIR, bit(41)) ? TBDDefaultCallout;

    /** NMMUFIR[42]
     *  
     */
    (rNMMUFIR, bit(42)) ? TBDDefaultCallout;

    /** NMMUFIR[43]
     *  
     */
    (rNMMUFIR, bit(43)) ? TBDDefaultCallout;

    /** NMMUFIR[44]
     *  
     */
    (rNMMUFIR, bit(44)) ? TBDDefaultCallout;

    /** NMMUFIR[45]
     *  
     */
    (rNMMUFIR, bit(45)) ? TBDDefaultCallout;

    /** NMMUFIR[46]
     *  
     */
    (rNMMUFIR, bit(46)) ? TBDDefaultCallout;

    /** NMMUFIR[47]
     *  
     */
    (rNMMUFIR, bit(47)) ? TBDDefaultCallout;

    /** NMMUFIR[48]
     *  
     */
    (rNMMUFIR, bit(48)) ? TBDDefaultCallout;

    /** NMMUFIR[49]
     *  
     */
    (rNMMUFIR, bit(49)) ? TBDDefaultCallout;

    /** NMMUFIR[50]
     *  
     */
    (rNMMUFIR, bit(50)) ? TBDDefaultCallout;

    /** NMMUFIR[51]
     *  
     */
    (rNMMUFIR, bit(51)) ? TBDDefaultCallout;

    /** NMMUFIR[52]
     *  
     */
    (rNMMUFIR, bit(52)) ? TBDDefaultCallout;

    /** NMMUFIR[53]
     *  
     */
    (rNMMUFIR, bit(53)) ? TBDDefaultCallout;

    /** NMMUFIR[54]
     *  
     */
    (rNMMUFIR, bit(54)) ? TBDDefaultCallout;

    /** NMMUFIR[55]
     *  
     */
    (rNMMUFIR, bit(55)) ? TBDDefaultCallout;

    /** NMMUFIR[56]
     *  
     */
    (rNMMUFIR, bit(56)) ? TBDDefaultCallout;

    /** NMMUFIR[57]
     *  
     */
    (rNMMUFIR, bit(57)) ? TBDDefaultCallout;

    /** NMMUFIR[58]
     *  
     */
    (rNMMUFIR, bit(58)) ? TBDDefaultCallout;

    /** NMMUFIR[59]
     *  
     */
    (rNMMUFIR, bit(59)) ? TBDDefaultCallout;

    /** NMMUFIR[60]
     *  
     */
    (rNMMUFIR, bit(60)) ? TBDDefaultCallout;

    /** NMMUFIR[61]
     *  
     */
    (rNMMUFIR, bit(61)) ? TBDDefaultCallout;

    /** NMMUFIR[62]
     *  
     */
    (rNMMUFIR, bit(62)) ? TBDDefaultCallout;

    /** NMMUFIR[63]
     *  
     */
    (rNMMUFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip INTCQFIR
################################################################################

rule rINTCQFIR
{
  CHECK_STOP:
    INTCQFIR & ~INTCQFIR_MASK & ~INTCQFIR_ACT0 & ~INTCQFIR_ACT1;
  RECOVERABLE:
    INTCQFIR & ~INTCQFIR_MASK & ~INTCQFIR_ACT0 &  INTCQFIR_ACT1;
};

group gINTCQFIR filter singlebit
{
    /** INTCQFIR[0]
     *  
     */
    (rINTCQFIR, bit(0)) ? TBDDefaultCallout;

    /** INTCQFIR[1]
     *  
     */
    (rINTCQFIR, bit(1)) ? TBDDefaultCallout;

    /** INTCQFIR[2]
     *  
     */
    (rINTCQFIR, bit(2)) ? TBDDefaultCallout;

    /** INTCQFIR[3]
     *  
     */
    (rINTCQFIR, bit(3)) ? TBDDefaultCallout;

    /** INTCQFIR[4]
     *  
     */
    (rINTCQFIR, bit(4)) ? TBDDefaultCallout;

    /** INTCQFIR[5]
     *  
     */
    (rINTCQFIR, bit(5)) ? TBDDefaultCallout;

    /** INTCQFIR[6]
     *  
     */
    (rINTCQFIR, bit(6)) ? TBDDefaultCallout;

    /** INTCQFIR[7]
     *  
     */
    (rINTCQFIR, bit(7)) ? TBDDefaultCallout;

    /** INTCQFIR[8]
     *  
     */
    (rINTCQFIR, bit(8)) ? TBDDefaultCallout;

    /** INTCQFIR[9]
     *  
     */
    (rINTCQFIR, bit(9)) ? TBDDefaultCallout;

    /** INTCQFIR[10]
     *  
     */
    (rINTCQFIR, bit(10)) ? TBDDefaultCallout;

    /** INTCQFIR[11]
     *  
     */
    (rINTCQFIR, bit(11)) ? TBDDefaultCallout;

    /** INTCQFIR[12]
     *  
     */
    (rINTCQFIR, bit(12)) ? TBDDefaultCallout;

    /** INTCQFIR[13]
     *  
     */
    (rINTCQFIR, bit(13)) ? TBDDefaultCallout;

    /** INTCQFIR[14]
     *  
     */
    (rINTCQFIR, bit(14)) ? TBDDefaultCallout;

    /** INTCQFIR[15]
     *  
     */
    (rINTCQFIR, bit(15)) ? TBDDefaultCallout;

    /** INTCQFIR[16]
     *  
     */
    (rINTCQFIR, bit(16)) ? TBDDefaultCallout;

    /** INTCQFIR[17]
     *  
     */
    (rINTCQFIR, bit(17)) ? TBDDefaultCallout;

    /** INTCQFIR[18]
     *  
     */
    (rINTCQFIR, bit(18)) ? TBDDefaultCallout;

    /** INTCQFIR[19]
     *  
     */
    (rINTCQFIR, bit(19)) ? TBDDefaultCallout;

    /** INTCQFIR[20]
     *  
     */
    (rINTCQFIR, bit(20)) ? TBDDefaultCallout;

    /** INTCQFIR[21]
     *  
     */
    (rINTCQFIR, bit(21)) ? TBDDefaultCallout;

    /** INTCQFIR[22]
     *  
     */
    (rINTCQFIR, bit(22)) ? TBDDefaultCallout;

    /** INTCQFIR[23]
     *  
     */
    (rINTCQFIR, bit(23)) ? TBDDefaultCallout;

    /** INTCQFIR[24]
     *  
     */
    (rINTCQFIR, bit(24)) ? TBDDefaultCallout;

    /** INTCQFIR[25]
     *  
     */
    (rINTCQFIR, bit(25)) ? TBDDefaultCallout;

    /** INTCQFIR[26]
     *  
     */
    (rINTCQFIR, bit(26)) ? TBDDefaultCallout;

    /** INTCQFIR[27]
     *  
     */
    (rINTCQFIR, bit(27)) ? TBDDefaultCallout;

    /** INTCQFIR[28]
     *  
     */
    (rINTCQFIR, bit(28)) ? TBDDefaultCallout;

    /** INTCQFIR[29]
     *  
     */
    (rINTCQFIR, bit(29)) ? TBDDefaultCallout;

    /** INTCQFIR[30]
     *  
     */
    (rINTCQFIR, bit(30)) ? TBDDefaultCallout;

    /** INTCQFIR[31]
     *  
     */
    (rINTCQFIR, bit(31)) ? TBDDefaultCallout;

    /** INTCQFIR[32]
     *  
     */
    (rINTCQFIR, bit(32)) ? TBDDefaultCallout;

    /** INTCQFIR[33]
     *  
     */
    (rINTCQFIR, bit(33)) ? TBDDefaultCallout;

    /** INTCQFIR[34]
     *  
     */
    (rINTCQFIR, bit(34)) ? TBDDefaultCallout;

    /** INTCQFIR[35]
     *  
     */
    (rINTCQFIR, bit(35)) ? TBDDefaultCallout;

    /** INTCQFIR[36]
     *  
     */
    (rINTCQFIR, bit(36)) ? TBDDefaultCallout;

    /** INTCQFIR[37]
     *  
     */
    (rINTCQFIR, bit(37)) ? TBDDefaultCallout;

    /** INTCQFIR[38]
     *  
     */
    (rINTCQFIR, bit(38)) ? TBDDefaultCallout;

    /** INTCQFIR[39]
     *  
     */
    (rINTCQFIR, bit(39)) ? TBDDefaultCallout;

    /** INTCQFIR[40]
     *  
     */
    (rINTCQFIR, bit(40)) ? TBDDefaultCallout;

    /** INTCQFIR[41]
     *  
     */
    (rINTCQFIR, bit(41)) ? TBDDefaultCallout;

    /** INTCQFIR[42]
     *  
     */
    (rINTCQFIR, bit(42)) ? TBDDefaultCallout;

    /** INTCQFIR[43]
     *  
     */
    (rINTCQFIR, bit(43)) ? TBDDefaultCallout;

    /** INTCQFIR[44]
     *  
     */
    (rINTCQFIR, bit(44)) ? TBDDefaultCallout;

    /** INTCQFIR[45]
     *  
     */
    (rINTCQFIR, bit(45)) ? TBDDefaultCallout;

    /** INTCQFIR[46]
     *  
     */
    (rINTCQFIR, bit(46)) ? TBDDefaultCallout;

    /** INTCQFIR[47]
     *  
     */
    (rINTCQFIR, bit(47)) ? TBDDefaultCallout;

    /** INTCQFIR[48]
     *  
     */
    (rINTCQFIR, bit(48)) ? TBDDefaultCallout;

    /** INTCQFIR[49]
     *  
     */
    (rINTCQFIR, bit(49)) ? TBDDefaultCallout;

    /** INTCQFIR[50]
     *  
     */
    (rINTCQFIR, bit(50)) ? TBDDefaultCallout;

    /** INTCQFIR[51]
     *  
     */
    (rINTCQFIR, bit(51)) ? TBDDefaultCallout;

    /** INTCQFIR[52]
     *  
     */
    (rINTCQFIR, bit(52)) ? TBDDefaultCallout;

    /** INTCQFIR[53]
     *  
     */
    (rINTCQFIR, bit(53)) ? TBDDefaultCallout;

    /** INTCQFIR[54]
     *  
     */
    (rINTCQFIR, bit(54)) ? TBDDefaultCallout;

    /** INTCQFIR[55]
     *  
     */
    (rINTCQFIR, bit(55)) ? TBDDefaultCallout;

    /** INTCQFIR[56]
     *  
     */
    (rINTCQFIR, bit(56)) ? TBDDefaultCallout;

    /** INTCQFIR[57]
     *  
     */
    (rINTCQFIR, bit(57)) ? TBDDefaultCallout;

    /** INTCQFIR[58]
     *  
     */
    (rINTCQFIR, bit(58)) ? TBDDefaultCallout;

    /** INTCQFIR[59]
     *  
     */
    (rINTCQFIR, bit(59)) ? TBDDefaultCallout;

    /** INTCQFIR[60]
     *  
     */
    (rINTCQFIR, bit(60)) ? TBDDefaultCallout;

    /** INTCQFIR[61]
     *  
     */
    (rINTCQFIR, bit(61)) ? TBDDefaultCallout;

    /** INTCQFIR[62]
     *  
     */
    (rINTCQFIR, bit(62)) ? TBDDefaultCallout;

    /** INTCQFIR[63]
     *  
     */
    (rINTCQFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBIOEFIR
################################################################################

rule rPBIOEFIR
{
  CHECK_STOP:
    PBIOEFIR & ~PBIOEFIR_MASK & ~PBIOEFIR_ACT0 & ~PBIOEFIR_ACT1;
  RECOVERABLE:
    PBIOEFIR & ~PBIOEFIR_MASK & ~PBIOEFIR_ACT0 &  PBIOEFIR_ACT1;
};

group gPBIOEFIR filter singlebit
{
    /** PBIOEFIR[0]
     *  
     */
    (rPBIOEFIR, bit(0)) ? TBDDefaultCallout;

    /** PBIOEFIR[1]
     *  
     */
    (rPBIOEFIR, bit(1)) ? TBDDefaultCallout;

    /** PBIOEFIR[2]
     *  
     */
    (rPBIOEFIR, bit(2)) ? TBDDefaultCallout;

    /** PBIOEFIR[3]
     *  
     */
    (rPBIOEFIR, bit(3)) ? TBDDefaultCallout;

    /** PBIOEFIR[4]
     *  
     */
    (rPBIOEFIR, bit(4)) ? TBDDefaultCallout;

    /** PBIOEFIR[5]
     *  
     */
    (rPBIOEFIR, bit(5)) ? TBDDefaultCallout;

    /** PBIOEFIR[6]
     *  
     */
    (rPBIOEFIR, bit(6)) ? TBDDefaultCallout;

    /** PBIOEFIR[7]
     *  
     */
    (rPBIOEFIR, bit(7)) ? TBDDefaultCallout;

    /** PBIOEFIR[8]
     *  
     */
    (rPBIOEFIR, bit(8)) ? TBDDefaultCallout;

    /** PBIOEFIR[9]
     *  
     */
    (rPBIOEFIR, bit(9)) ? TBDDefaultCallout;

    /** PBIOEFIR[10]
     *  
     */
    (rPBIOEFIR, bit(10)) ? TBDDefaultCallout;

    /** PBIOEFIR[11]
     *  
     */
    (rPBIOEFIR, bit(11)) ? TBDDefaultCallout;

    /** PBIOEFIR[12]
     *  
     */
    (rPBIOEFIR, bit(12)) ? TBDDefaultCallout;

    /** PBIOEFIR[13]
     *  
     */
    (rPBIOEFIR, bit(13)) ? TBDDefaultCallout;

    /** PBIOEFIR[14]
     *  
     */
    (rPBIOEFIR, bit(14)) ? TBDDefaultCallout;

    /** PBIOEFIR[15]
     *  
     */
    (rPBIOEFIR, bit(15)) ? TBDDefaultCallout;

    /** PBIOEFIR[16]
     *  
     */
    (rPBIOEFIR, bit(16)) ? TBDDefaultCallout;

    /** PBIOEFIR[17]
     *  
     */
    (rPBIOEFIR, bit(17)) ? TBDDefaultCallout;

    /** PBIOEFIR[18]
     *  
     */
    (rPBIOEFIR, bit(18)) ? TBDDefaultCallout;

    /** PBIOEFIR[19]
     *  
     */
    (rPBIOEFIR, bit(19)) ? TBDDefaultCallout;

    /** PBIOEFIR[20]
     *  
     */
    (rPBIOEFIR, bit(20)) ? TBDDefaultCallout;

    /** PBIOEFIR[21]
     *  
     */
    (rPBIOEFIR, bit(21)) ? TBDDefaultCallout;

    /** PBIOEFIR[22]
     *  
     */
    (rPBIOEFIR, bit(22)) ? TBDDefaultCallout;

    /** PBIOEFIR[23]
     *  
     */
    (rPBIOEFIR, bit(23)) ? TBDDefaultCallout;

    /** PBIOEFIR[24]
     *  
     */
    (rPBIOEFIR, bit(24)) ? TBDDefaultCallout;

    /** PBIOEFIR[25]
     *  
     */
    (rPBIOEFIR, bit(25)) ? TBDDefaultCallout;

    /** PBIOEFIR[26]
     *  
     */
    (rPBIOEFIR, bit(26)) ? TBDDefaultCallout;

    /** PBIOEFIR[27]
     *  
     */
    (rPBIOEFIR, bit(27)) ? TBDDefaultCallout;

    /** PBIOEFIR[28]
     *  
     */
    (rPBIOEFIR, bit(28)) ? TBDDefaultCallout;

    /** PBIOEFIR[29]
     *  
     */
    (rPBIOEFIR, bit(29)) ? TBDDefaultCallout;

    /** PBIOEFIR[30]
     *  
     */
    (rPBIOEFIR, bit(30)) ? TBDDefaultCallout;

    /** PBIOEFIR[31]
     *  
     */
    (rPBIOEFIR, bit(31)) ? TBDDefaultCallout;

    /** PBIOEFIR[32]
     *  
     */
    (rPBIOEFIR, bit(32)) ? TBDDefaultCallout;

    /** PBIOEFIR[33]
     *  
     */
    (rPBIOEFIR, bit(33)) ? TBDDefaultCallout;

    /** PBIOEFIR[34]
     *  
     */
    (rPBIOEFIR, bit(34)) ? TBDDefaultCallout;

    /** PBIOEFIR[35]
     *  
     */
    (rPBIOEFIR, bit(35)) ? TBDDefaultCallout;

    /** PBIOEFIR[36]
     *  
     */
    (rPBIOEFIR, bit(36)) ? TBDDefaultCallout;

    /** PBIOEFIR[37]
     *  
     */
    (rPBIOEFIR, bit(37)) ? TBDDefaultCallout;

    /** PBIOEFIR[38]
     *  
     */
    (rPBIOEFIR, bit(38)) ? TBDDefaultCallout;

    /** PBIOEFIR[39]
     *  
     */
    (rPBIOEFIR, bit(39)) ? TBDDefaultCallout;

    /** PBIOEFIR[40]
     *  
     */
    (rPBIOEFIR, bit(40)) ? TBDDefaultCallout;

    /** PBIOEFIR[41]
     *  
     */
    (rPBIOEFIR, bit(41)) ? TBDDefaultCallout;

    /** PBIOEFIR[42]
     *  
     */
    (rPBIOEFIR, bit(42)) ? TBDDefaultCallout;

    /** PBIOEFIR[43]
     *  
     */
    (rPBIOEFIR, bit(43)) ? TBDDefaultCallout;

    /** PBIOEFIR[44]
     *  
     */
    (rPBIOEFIR, bit(44)) ? TBDDefaultCallout;

    /** PBIOEFIR[45]
     *  
     */
    (rPBIOEFIR, bit(45)) ? TBDDefaultCallout;

    /** PBIOEFIR[46]
     *  
     */
    (rPBIOEFIR, bit(46)) ? TBDDefaultCallout;

    /** PBIOEFIR[47]
     *  
     */
    (rPBIOEFIR, bit(47)) ? TBDDefaultCallout;

    /** PBIOEFIR[48]
     *  
     */
    (rPBIOEFIR, bit(48)) ? TBDDefaultCallout;

    /** PBIOEFIR[49]
     *  
     */
    (rPBIOEFIR, bit(49)) ? TBDDefaultCallout;

    /** PBIOEFIR[50]
     *  
     */
    (rPBIOEFIR, bit(50)) ? TBDDefaultCallout;

    /** PBIOEFIR[51]
     *  
     */
    (rPBIOEFIR, bit(51)) ? TBDDefaultCallout;

    /** PBIOEFIR[52]
     *  
     */
    (rPBIOEFIR, bit(52)) ? TBDDefaultCallout;

    /** PBIOEFIR[53]
     *  
     */
    (rPBIOEFIR, bit(53)) ? TBDDefaultCallout;

    /** PBIOEFIR[54]
     *  
     */
    (rPBIOEFIR, bit(54)) ? TBDDefaultCallout;

    /** PBIOEFIR[55]
     *  
     */
    (rPBIOEFIR, bit(55)) ? TBDDefaultCallout;

    /** PBIOEFIR[56]
     *  
     */
    (rPBIOEFIR, bit(56)) ? TBDDefaultCallout;

    /** PBIOEFIR[57]
     *  
     */
    (rPBIOEFIR, bit(57)) ? TBDDefaultCallout;

    /** PBIOEFIR[58]
     *  
     */
    (rPBIOEFIR, bit(58)) ? TBDDefaultCallout;

    /** PBIOEFIR[59]
     *  
     */
    (rPBIOEFIR, bit(59)) ? TBDDefaultCallout;

    /** PBIOEFIR[60]
     *  
     */
    (rPBIOEFIR, bit(60)) ? TBDDefaultCallout;

    /** PBIOEFIR[61]
     *  
     */
    (rPBIOEFIR, bit(61)) ? TBDDefaultCallout;

    /** PBIOEFIR[62]
     *  
     */
    (rPBIOEFIR, bit(62)) ? TBDDefaultCallout;

    /** PBIOEFIR[63]
     *  
     */
    (rPBIOEFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip PBIOOFIR
################################################################################

rule rPBIOOFIR
{
  CHECK_STOP:
    PBIOOFIR & ~PBIOOFIR_MASK & ~PBIOOFIR_ACT0 & ~PBIOOFIR_ACT1;
  RECOVERABLE:
    PBIOOFIR & ~PBIOOFIR_MASK & ~PBIOOFIR_ACT0 &  PBIOOFIR_ACT1;
};

group gPBIOOFIR filter singlebit
{
    /** PBIOOFIR[0]
     *  
     */
    (rPBIOOFIR, bit(0)) ? TBDDefaultCallout;

    /** PBIOOFIR[1]
     *  
     */
    (rPBIOOFIR, bit(1)) ? TBDDefaultCallout;

    /** PBIOOFIR[2]
     *  
     */
    (rPBIOOFIR, bit(2)) ? TBDDefaultCallout;

    /** PBIOOFIR[3]
     *  
     */
    (rPBIOOFIR, bit(3)) ? TBDDefaultCallout;

    /** PBIOOFIR[4]
     *  
     */
    (rPBIOOFIR, bit(4)) ? TBDDefaultCallout;

    /** PBIOOFIR[5]
     *  
     */
    (rPBIOOFIR, bit(5)) ? TBDDefaultCallout;

    /** PBIOOFIR[6]
     *  
     */
    (rPBIOOFIR, bit(6)) ? TBDDefaultCallout;

    /** PBIOOFIR[7]
     *  
     */
    (rPBIOOFIR, bit(7)) ? TBDDefaultCallout;

    /** PBIOOFIR[8]
     *  
     */
    (rPBIOOFIR, bit(8)) ? TBDDefaultCallout;

    /** PBIOOFIR[9]
     *  
     */
    (rPBIOOFIR, bit(9)) ? TBDDefaultCallout;

    /** PBIOOFIR[10]
     *  
     */
    (rPBIOOFIR, bit(10)) ? TBDDefaultCallout;

    /** PBIOOFIR[11]
     *  
     */
    (rPBIOOFIR, bit(11)) ? TBDDefaultCallout;

    /** PBIOOFIR[12]
     *  
     */
    (rPBIOOFIR, bit(12)) ? TBDDefaultCallout;

    /** PBIOOFIR[13]
     *  
     */
    (rPBIOOFIR, bit(13)) ? TBDDefaultCallout;

    /** PBIOOFIR[14]
     *  
     */
    (rPBIOOFIR, bit(14)) ? TBDDefaultCallout;

    /** PBIOOFIR[15]
     *  
     */
    (rPBIOOFIR, bit(15)) ? TBDDefaultCallout;

    /** PBIOOFIR[16]
     *  
     */
    (rPBIOOFIR, bit(16)) ? TBDDefaultCallout;

    /** PBIOOFIR[17]
     *  
     */
    (rPBIOOFIR, bit(17)) ? TBDDefaultCallout;

    /** PBIOOFIR[18]
     *  
     */
    (rPBIOOFIR, bit(18)) ? TBDDefaultCallout;

    /** PBIOOFIR[19]
     *  
     */
    (rPBIOOFIR, bit(19)) ? TBDDefaultCallout;

    /** PBIOOFIR[20]
     *  
     */
    (rPBIOOFIR, bit(20)) ? TBDDefaultCallout;

    /** PBIOOFIR[21]
     *  
     */
    (rPBIOOFIR, bit(21)) ? TBDDefaultCallout;

    /** PBIOOFIR[22]
     *  
     */
    (rPBIOOFIR, bit(22)) ? TBDDefaultCallout;

    /** PBIOOFIR[23]
     *  
     */
    (rPBIOOFIR, bit(23)) ? TBDDefaultCallout;

    /** PBIOOFIR[24]
     *  
     */
    (rPBIOOFIR, bit(24)) ? TBDDefaultCallout;

    /** PBIOOFIR[25]
     *  
     */
    (rPBIOOFIR, bit(25)) ? TBDDefaultCallout;

    /** PBIOOFIR[26]
     *  
     */
    (rPBIOOFIR, bit(26)) ? TBDDefaultCallout;

    /** PBIOOFIR[27]
     *  
     */
    (rPBIOOFIR, bit(27)) ? TBDDefaultCallout;

    /** PBIOOFIR[28]
     *  
     */
    (rPBIOOFIR, bit(28)) ? TBDDefaultCallout;

    /** PBIOOFIR[29]
     *  
     */
    (rPBIOOFIR, bit(29)) ? TBDDefaultCallout;

    /** PBIOOFIR[30]
     *  
     */
    (rPBIOOFIR, bit(30)) ? TBDDefaultCallout;

    /** PBIOOFIR[31]
     *  
     */
    (rPBIOOFIR, bit(31)) ? TBDDefaultCallout;

    /** PBIOOFIR[32]
     *  
     */
    (rPBIOOFIR, bit(32)) ? TBDDefaultCallout;

    /** PBIOOFIR[33]
     *  
     */
    (rPBIOOFIR, bit(33)) ? TBDDefaultCallout;

    /** PBIOOFIR[34]
     *  
     */
    (rPBIOOFIR, bit(34)) ? TBDDefaultCallout;

    /** PBIOOFIR[35]
     *  
     */
    (rPBIOOFIR, bit(35)) ? TBDDefaultCallout;

    /** PBIOOFIR[36]
     *  
     */
    (rPBIOOFIR, bit(36)) ? TBDDefaultCallout;

    /** PBIOOFIR[37]
     *  
     */
    (rPBIOOFIR, bit(37)) ? TBDDefaultCallout;

    /** PBIOOFIR[38]
     *  
     */
    (rPBIOOFIR, bit(38)) ? TBDDefaultCallout;

    /** PBIOOFIR[39]
     *  
     */
    (rPBIOOFIR, bit(39)) ? TBDDefaultCallout;

    /** PBIOOFIR[40]
     *  
     */
    (rPBIOOFIR, bit(40)) ? TBDDefaultCallout;

    /** PBIOOFIR[41]
     *  
     */
    (rPBIOOFIR, bit(41)) ? TBDDefaultCallout;

    /** PBIOOFIR[42]
     *  
     */
    (rPBIOOFIR, bit(42)) ? TBDDefaultCallout;

    /** PBIOOFIR[43]
     *  
     */
    (rPBIOOFIR, bit(43)) ? TBDDefaultCallout;

    /** PBIOOFIR[44]
     *  
     */
    (rPBIOOFIR, bit(44)) ? TBDDefaultCallout;

    /** PBIOOFIR[45]
     *  
     */
    (rPBIOOFIR, bit(45)) ? TBDDefaultCallout;

    /** PBIOOFIR[46]
     *  
     */
    (rPBIOOFIR, bit(46)) ? TBDDefaultCallout;

    /** PBIOOFIR[47]
     *  
     */
    (rPBIOOFIR, bit(47)) ? TBDDefaultCallout;

    /** PBIOOFIR[48]
     *  
     */
    (rPBIOOFIR, bit(48)) ? TBDDefaultCallout;

    /** PBIOOFIR[49]
     *  
     */
    (rPBIOOFIR, bit(49)) ? TBDDefaultCallout;

    /** PBIOOFIR[50]
     *  
     */
    (rPBIOOFIR, bit(50)) ? TBDDefaultCallout;

    /** PBIOOFIR[51]
     *  
     */
    (rPBIOOFIR, bit(51)) ? TBDDefaultCallout;

    /** PBIOOFIR[52]
     *  
     */
    (rPBIOOFIR, bit(52)) ? TBDDefaultCallout;

    /** PBIOOFIR[53]
     *  
     */
    (rPBIOOFIR, bit(53)) ? TBDDefaultCallout;

    /** PBIOOFIR[54]
     *  
     */
    (rPBIOOFIR, bit(54)) ? TBDDefaultCallout;

    /** PBIOOFIR[55]
     *  
     */
    (rPBIOOFIR, bit(55)) ? TBDDefaultCallout;

    /** PBIOOFIR[56]
     *  
     */
    (rPBIOOFIR, bit(56)) ? TBDDefaultCallout;

    /** PBIOOFIR[57]
     *  
     */
    (rPBIOOFIR, bit(57)) ? TBDDefaultCallout;

    /** PBIOOFIR[58]
     *  
     */
    (rPBIOOFIR, bit(58)) ? TBDDefaultCallout;

    /** PBIOOFIR[59]
     *  
     */
    (rPBIOOFIR, bit(59)) ? TBDDefaultCallout;

    /** PBIOOFIR[60]
     *  
     */
    (rPBIOOFIR, bit(60)) ? TBDDefaultCallout;

    /** PBIOOFIR[61]
     *  
     */
    (rPBIOOFIR, bit(61)) ? TBDDefaultCallout;

    /** PBIOOFIR[62]
     *  
     */
    (rPBIOOFIR, bit(62)) ? TBDDefaultCallout;

    /** PBIOOFIR[63]
     *  
     */
    (rPBIOOFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# XB Chiplet FIR
################################################################################

rule rXB_CHIPLET_FIR
{
  CHECK_STOP:
     XB_CHIPLET_CS_FIR       & ~XB_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (XB_CHIPLET_RE_FIR >> 2) & ~XB_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gXB_CHIPLET_FIR filter singlebit
{
    /** XB_CHIPLET_FIR[3]
     *  Attention from XB_LFIR
     */
    (rXB_CHIPLET_FIR, bit(3)) ? analyze(gXB_LFIR);

    /** XB_CHIPLET_FIR[5]
     *  Attention from IOELFIR 1
     */
    (rXB_CHIPLET_FIR, bit(5)) ? analyzeConnectedXBUS1;

    /** XB_CHIPLET_FIR[6]
     *  Attention from IOELFIR 2
     */
    (rXB_CHIPLET_FIR, bit(6)) ? analyzeConnectedXBUS2;

    /** XB_CHIPLET_FIR[9]
     *  Attention from IOXBFIR 1
     */
    (rXB_CHIPLET_FIR, bit(9)) ? analyzeConnectedXBUS1;

    /** XB_CHIPLET_FIR[10]
     *  Attention from IOXBFIR 2
     */
    (rXB_CHIPLET_FIR, bit(10)) ? analyzeConnectedXBUS2;

    /** XB_CHIPLET_FIR[11]
     *  Attention from XBPPEFIR
     */
    (rXB_CHIPLET_FIR, bit(11)) ? analyze(gXBPPEFIR);

};

################################################################################
# XB Chiplet Unit Checkstop FIR
################################################################################

rule rXB_CHIPLET_UCS_FIR
{
  UNIT_CS:
    XB_CHIPLET_UCS_FIR & ~XB_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gXB_CHIPLET_UCS_FIR filter singlebit
{
    /** XB_CHIPLET_UCS_FIR[2]
     *  Attention from IOELFIR 1
     */
    (rXB_CHIPLET_UCS_FIR, bit(2)) ? analyzeConnectedXBUS1;

    /** XB_CHIPLET_UCS_FIR[3]
     *  Attention from IOELFIR 2
     */
    (rXB_CHIPLET_UCS_FIR, bit(3)) ? analyzeConnectedXBUS2;

    /** XB_CHIPLET_UCS_FIR[6]
     *  Attention from IOXBFIR 1
     */
    (rXB_CHIPLET_UCS_FIR, bit(6)) ? analyzeConnectedXBUS1;

    /** XB_CHIPLET_UCS_FIR[7]
     *  Attention from IOXBFIR 2
     */
    (rXB_CHIPLET_UCS_FIR, bit(7)) ? analyzeConnectedXBUS2;

    /** XB_CHIPLET_UCS_FIR[8]
     *  Attention from XBPPEFIR
     */
    (rXB_CHIPLET_UCS_FIR, bit(8)) ? analyze(gXBPPEFIR);

};

################################################################################
# P9 chip XB_LFIR
################################################################################

rule rXB_LFIR
{
  CHECK_STOP:
    XB_LFIR & ~XB_LFIR_MASK & ~XB_LFIR_ACT0 & ~XB_LFIR_ACT1;
  RECOVERABLE:
    XB_LFIR & ~XB_LFIR_MASK & ~XB_LFIR_ACT0 &  XB_LFIR_ACT1;
};

group gXB_LFIR filter singlebit
{
    /** XB_LFIR[0]
     *  
     */
    (rXB_LFIR, bit(0)) ? TBDDefaultCallout;

    /** XB_LFIR[1]
     *  
     */
    (rXB_LFIR, bit(1)) ? TBDDefaultCallout;

    /** XB_LFIR[2]
     *  
     */
    (rXB_LFIR, bit(2)) ? TBDDefaultCallout;

    /** XB_LFIR[3]
     *  
     */
    (rXB_LFIR, bit(3)) ? TBDDefaultCallout;

    /** XB_LFIR[4]
     *  
     */
    (rXB_LFIR, bit(4)) ? TBDDefaultCallout;

    /** XB_LFIR[5]
     *  
     */
    (rXB_LFIR, bit(5)) ? TBDDefaultCallout;

    /** XB_LFIR[6]
     *  
     */
    (rXB_LFIR, bit(6)) ? TBDDefaultCallout;

    /** XB_LFIR[7]
     *  
     */
    (rXB_LFIR, bit(7)) ? TBDDefaultCallout;

    /** XB_LFIR[8]
     *  
     */
    (rXB_LFIR, bit(8)) ? TBDDefaultCallout;

    /** XB_LFIR[9]
     *  
     */
    (rXB_LFIR, bit(9)) ? TBDDefaultCallout;

    /** XB_LFIR[10]
     *  
     */
    (rXB_LFIR, bit(10)) ? TBDDefaultCallout;

    /** XB_LFIR[11]
     *  
     */
    (rXB_LFIR, bit(11)) ? TBDDefaultCallout;

    /** XB_LFIR[12]
     *  
     */
    (rXB_LFIR, bit(12)) ? TBDDefaultCallout;

    /** XB_LFIR[13]
     *  
     */
    (rXB_LFIR, bit(13)) ? TBDDefaultCallout;

    /** XB_LFIR[14]
     *  
     */
    (rXB_LFIR, bit(14)) ? TBDDefaultCallout;

    /** XB_LFIR[15]
     *  
     */
    (rXB_LFIR, bit(15)) ? TBDDefaultCallout;

    /** XB_LFIR[16]
     *  
     */
    (rXB_LFIR, bit(16)) ? TBDDefaultCallout;

    /** XB_LFIR[17]
     *  
     */
    (rXB_LFIR, bit(17)) ? TBDDefaultCallout;

    /** XB_LFIR[18]
     *  
     */
    (rXB_LFIR, bit(18)) ? TBDDefaultCallout;

    /** XB_LFIR[19]
     *  
     */
    (rXB_LFIR, bit(19)) ? TBDDefaultCallout;

    /** XB_LFIR[20]
     *  
     */
    (rXB_LFIR, bit(20)) ? TBDDefaultCallout;

    /** XB_LFIR[21]
     *  
     */
    (rXB_LFIR, bit(21)) ? TBDDefaultCallout;

    /** XB_LFIR[22]
     *  
     */
    (rXB_LFIR, bit(22)) ? TBDDefaultCallout;

    /** XB_LFIR[23]
     *  
     */
    (rXB_LFIR, bit(23)) ? TBDDefaultCallout;

    /** XB_LFIR[24]
     *  
     */
    (rXB_LFIR, bit(24)) ? TBDDefaultCallout;

    /** XB_LFIR[25]
     *  
     */
    (rXB_LFIR, bit(25)) ? TBDDefaultCallout;

    /** XB_LFIR[26]
     *  
     */
    (rXB_LFIR, bit(26)) ? TBDDefaultCallout;

    /** XB_LFIR[27]
     *  
     */
    (rXB_LFIR, bit(27)) ? TBDDefaultCallout;

    /** XB_LFIR[28]
     *  
     */
    (rXB_LFIR, bit(28)) ? TBDDefaultCallout;

    /** XB_LFIR[29]
     *  
     */
    (rXB_LFIR, bit(29)) ? TBDDefaultCallout;

    /** XB_LFIR[30]
     *  
     */
    (rXB_LFIR, bit(30)) ? TBDDefaultCallout;

    /** XB_LFIR[31]
     *  
     */
    (rXB_LFIR, bit(31)) ? TBDDefaultCallout;

    /** XB_LFIR[32]
     *  
     */
    (rXB_LFIR, bit(32)) ? TBDDefaultCallout;

    /** XB_LFIR[33]
     *  
     */
    (rXB_LFIR, bit(33)) ? TBDDefaultCallout;

    /** XB_LFIR[34]
     *  
     */
    (rXB_LFIR, bit(34)) ? TBDDefaultCallout;

    /** XB_LFIR[35]
     *  
     */
    (rXB_LFIR, bit(35)) ? TBDDefaultCallout;

    /** XB_LFIR[36]
     *  
     */
    (rXB_LFIR, bit(36)) ? TBDDefaultCallout;

    /** XB_LFIR[37]
     *  
     */
    (rXB_LFIR, bit(37)) ? TBDDefaultCallout;

    /** XB_LFIR[38]
     *  
     */
    (rXB_LFIR, bit(38)) ? TBDDefaultCallout;

    /** XB_LFIR[39]
     *  
     */
    (rXB_LFIR, bit(39)) ? TBDDefaultCallout;

    /** XB_LFIR[40]
     *  
     */
    (rXB_LFIR, bit(40)) ? TBDDefaultCallout;

    /** XB_LFIR[41]
     *  
     */
    (rXB_LFIR, bit(41)) ? TBDDefaultCallout;

    /** XB_LFIR[42]
     *  
     */
    (rXB_LFIR, bit(42)) ? TBDDefaultCallout;

    /** XB_LFIR[43]
     *  
     */
    (rXB_LFIR, bit(43)) ? TBDDefaultCallout;

    /** XB_LFIR[44]
     *  
     */
    (rXB_LFIR, bit(44)) ? TBDDefaultCallout;

    /** XB_LFIR[45]
     *  
     */
    (rXB_LFIR, bit(45)) ? TBDDefaultCallout;

    /** XB_LFIR[46]
     *  
     */
    (rXB_LFIR, bit(46)) ? TBDDefaultCallout;

    /** XB_LFIR[47]
     *  
     */
    (rXB_LFIR, bit(47)) ? TBDDefaultCallout;

    /** XB_LFIR[48]
     *  
     */
    (rXB_LFIR, bit(48)) ? TBDDefaultCallout;

    /** XB_LFIR[49]
     *  
     */
    (rXB_LFIR, bit(49)) ? TBDDefaultCallout;

    /** XB_LFIR[50]
     *  
     */
    (rXB_LFIR, bit(50)) ? TBDDefaultCallout;

    /** XB_LFIR[51]
     *  
     */
    (rXB_LFIR, bit(51)) ? TBDDefaultCallout;

    /** XB_LFIR[52]
     *  
     */
    (rXB_LFIR, bit(52)) ? TBDDefaultCallout;

    /** XB_LFIR[53]
     *  
     */
    (rXB_LFIR, bit(53)) ? TBDDefaultCallout;

    /** XB_LFIR[54]
     *  
     */
    (rXB_LFIR, bit(54)) ? TBDDefaultCallout;

    /** XB_LFIR[55]
     *  
     */
    (rXB_LFIR, bit(55)) ? TBDDefaultCallout;

    /** XB_LFIR[56]
     *  
     */
    (rXB_LFIR, bit(56)) ? TBDDefaultCallout;

    /** XB_LFIR[57]
     *  
     */
    (rXB_LFIR, bit(57)) ? TBDDefaultCallout;

    /** XB_LFIR[58]
     *  
     */
    (rXB_LFIR, bit(58)) ? TBDDefaultCallout;

    /** XB_LFIR[59]
     *  
     */
    (rXB_LFIR, bit(59)) ? TBDDefaultCallout;

    /** XB_LFIR[60]
     *  
     */
    (rXB_LFIR, bit(60)) ? TBDDefaultCallout;

    /** XB_LFIR[61]
     *  
     */
    (rXB_LFIR, bit(61)) ? TBDDefaultCallout;

    /** XB_LFIR[62]
     *  
     */
    (rXB_LFIR, bit(62)) ? TBDDefaultCallout;

    /** XB_LFIR[63]
     *  
     */
    (rXB_LFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 chip XBPPEFIR
################################################################################

rule rXBPPEFIR
{
  CHECK_STOP:
    XBPPEFIR & ~XBPPEFIR_MASK & ~XBPPEFIR_ACT0 & ~XBPPEFIR_ACT1;
  RECOVERABLE:
    XBPPEFIR & ~XBPPEFIR_MASK & ~XBPPEFIR_ACT0 &  XBPPEFIR_ACT1;
  UNIT_CS:
    XBPPEFIR & ~XBPPEFIR_MASK &  XBPPEFIR_ACT0 &  XBPPEFIR_ACT1;
};

group gXBPPEFIR filter singlebit
{
    /** XBPPEFIR[0]
     *  
     */
    (rXBPPEFIR, bit(0)) ? TBDDefaultCallout;

    /** XBPPEFIR[1]
     *  
     */
    (rXBPPEFIR, bit(1)) ? TBDDefaultCallout;

    /** XBPPEFIR[2]
     *  
     */
    (rXBPPEFIR, bit(2)) ? TBDDefaultCallout;

    /** XBPPEFIR[3]
     *  
     */
    (rXBPPEFIR, bit(3)) ? TBDDefaultCallout;

    /** XBPPEFIR[4]
     *  
     */
    (rXBPPEFIR, bit(4)) ? TBDDefaultCallout;

    /** XBPPEFIR[5]
     *  
     */
    (rXBPPEFIR, bit(5)) ? TBDDefaultCallout;

    /** XBPPEFIR[6]
     *  
     */
    (rXBPPEFIR, bit(6)) ? TBDDefaultCallout;

    /** XBPPEFIR[7]
     *  
     */
    (rXBPPEFIR, bit(7)) ? TBDDefaultCallout;

    /** XBPPEFIR[8]
     *  
     */
    (rXBPPEFIR, bit(8)) ? TBDDefaultCallout;

    /** XBPPEFIR[9]
     *  
     */
    (rXBPPEFIR, bit(9)) ? TBDDefaultCallout;

    /** XBPPEFIR[10]
     *  
     */
    (rXBPPEFIR, bit(10)) ? TBDDefaultCallout;

    /** XBPPEFIR[11]
     *  
     */
    (rXBPPEFIR, bit(11)) ? TBDDefaultCallout;

    /** XBPPEFIR[12]
     *  
     */
    (rXBPPEFIR, bit(12)) ? TBDDefaultCallout;

    /** XBPPEFIR[13]
     *  
     */
    (rXBPPEFIR, bit(13)) ? TBDDefaultCallout;

    /** XBPPEFIR[14]
     *  
     */
    (rXBPPEFIR, bit(14)) ? TBDDefaultCallout;

    /** XBPPEFIR[15]
     *  
     */
    (rXBPPEFIR, bit(15)) ? TBDDefaultCallout;

    /** XBPPEFIR[16]
     *  
     */
    (rXBPPEFIR, bit(16)) ? TBDDefaultCallout;

    /** XBPPEFIR[17]
     *  
     */
    (rXBPPEFIR, bit(17)) ? TBDDefaultCallout;

    /** XBPPEFIR[18]
     *  
     */
    (rXBPPEFIR, bit(18)) ? TBDDefaultCallout;

    /** XBPPEFIR[19]
     *  
     */
    (rXBPPEFIR, bit(19)) ? TBDDefaultCallout;

    /** XBPPEFIR[20]
     *  
     */
    (rXBPPEFIR, bit(20)) ? TBDDefaultCallout;

    /** XBPPEFIR[21]
     *  
     */
    (rXBPPEFIR, bit(21)) ? TBDDefaultCallout;

    /** XBPPEFIR[22]
     *  
     */
    (rXBPPEFIR, bit(22)) ? TBDDefaultCallout;

    /** XBPPEFIR[23]
     *  
     */
    (rXBPPEFIR, bit(23)) ? TBDDefaultCallout;

    /** XBPPEFIR[24]
     *  
     */
    (rXBPPEFIR, bit(24)) ? TBDDefaultCallout;

    /** XBPPEFIR[25]
     *  
     */
    (rXBPPEFIR, bit(25)) ? TBDDefaultCallout;

    /** XBPPEFIR[26]
     *  
     */
    (rXBPPEFIR, bit(26)) ? TBDDefaultCallout;

    /** XBPPEFIR[27]
     *  
     */
    (rXBPPEFIR, bit(27)) ? TBDDefaultCallout;

    /** XBPPEFIR[28]
     *  
     */
    (rXBPPEFIR, bit(28)) ? TBDDefaultCallout;

    /** XBPPEFIR[29]
     *  
     */
    (rXBPPEFIR, bit(29)) ? TBDDefaultCallout;

    /** XBPPEFIR[30]
     *  
     */
    (rXBPPEFIR, bit(30)) ? TBDDefaultCallout;

    /** XBPPEFIR[31]
     *  
     */
    (rXBPPEFIR, bit(31)) ? TBDDefaultCallout;

    /** XBPPEFIR[32]
     *  
     */
    (rXBPPEFIR, bit(32)) ? TBDDefaultCallout;

    /** XBPPEFIR[33]
     *  
     */
    (rXBPPEFIR, bit(33)) ? TBDDefaultCallout;

    /** XBPPEFIR[34]
     *  
     */
    (rXBPPEFIR, bit(34)) ? TBDDefaultCallout;

    /** XBPPEFIR[35]
     *  
     */
    (rXBPPEFIR, bit(35)) ? TBDDefaultCallout;

    /** XBPPEFIR[36]
     *  
     */
    (rXBPPEFIR, bit(36)) ? TBDDefaultCallout;

    /** XBPPEFIR[37]
     *  
     */
    (rXBPPEFIR, bit(37)) ? TBDDefaultCallout;

    /** XBPPEFIR[38]
     *  
     */
    (rXBPPEFIR, bit(38)) ? TBDDefaultCallout;

    /** XBPPEFIR[39]
     *  
     */
    (rXBPPEFIR, bit(39)) ? TBDDefaultCallout;

    /** XBPPEFIR[40]
     *  
     */
    (rXBPPEFIR, bit(40)) ? TBDDefaultCallout;

    /** XBPPEFIR[41]
     *  
     */
    (rXBPPEFIR, bit(41)) ? TBDDefaultCallout;

    /** XBPPEFIR[42]
     *  
     */
    (rXBPPEFIR, bit(42)) ? TBDDefaultCallout;

    /** XBPPEFIR[43]
     *  
     */
    (rXBPPEFIR, bit(43)) ? TBDDefaultCallout;

    /** XBPPEFIR[44]
     *  
     */
    (rXBPPEFIR, bit(44)) ? TBDDefaultCallout;

    /** XBPPEFIR[45]
     *  
     */
    (rXBPPEFIR, bit(45)) ? TBDDefaultCallout;

    /** XBPPEFIR[46]
     *  
     */
    (rXBPPEFIR, bit(46)) ? TBDDefaultCallout;

    /** XBPPEFIR[47]
     *  
     */
    (rXBPPEFIR, bit(47)) ? TBDDefaultCallout;

    /** XBPPEFIR[48]
     *  
     */
    (rXBPPEFIR, bit(48)) ? TBDDefaultCallout;

    /** XBPPEFIR[49]
     *  
     */
    (rXBPPEFIR, bit(49)) ? TBDDefaultCallout;

    /** XBPPEFIR[50]
     *  
     */
    (rXBPPEFIR, bit(50)) ? TBDDefaultCallout;

    /** XBPPEFIR[51]
     *  
     */
    (rXBPPEFIR, bit(51)) ? TBDDefaultCallout;

    /** XBPPEFIR[52]
     *  
     */
    (rXBPPEFIR, bit(52)) ? TBDDefaultCallout;

    /** XBPPEFIR[53]
     *  
     */
    (rXBPPEFIR, bit(53)) ? TBDDefaultCallout;

    /** XBPPEFIR[54]
     *  
     */
    (rXBPPEFIR, bit(54)) ? TBDDefaultCallout;

    /** XBPPEFIR[55]
     *  
     */
    (rXBPPEFIR, bit(55)) ? TBDDefaultCallout;

    /** XBPPEFIR[56]
     *  
     */
    (rXBPPEFIR, bit(56)) ? TBDDefaultCallout;

    /** XBPPEFIR[57]
     *  
     */
    (rXBPPEFIR, bit(57)) ? TBDDefaultCallout;

    /** XBPPEFIR[58]
     *  
     */
    (rXBPPEFIR, bit(58)) ? TBDDefaultCallout;

    /** XBPPEFIR[59]
     *  
     */
    (rXBPPEFIR, bit(59)) ? TBDDefaultCallout;

    /** XBPPEFIR[60]
     *  
     */
    (rXBPPEFIR, bit(60)) ? TBDDefaultCallout;

    /** XBPPEFIR[61]
     *  
     */
    (rXBPPEFIR, bit(61)) ? TBDDefaultCallout;

    /** XBPPEFIR[62]
     *  
     */
    (rXBPPEFIR, bit(62)) ? TBDDefaultCallout;

    /** XBPPEFIR[63]
     *  
     */
    (rXBPPEFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# MC0 Chiplet FIR
################################################################################

rule rMC0_CHIPLET_FIR
{
  CHECK_STOP:
     MC0_CHIPLET_CS_FIR       & ~MC0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (MC0_CHIPLET_RE_FIR >> 2) & ~MC0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gMC0_CHIPLET_FIR filter singlebit
{
    /** MC0_CHIPLET_FIR[3]
     *  Attention from MC_LFIR
     */
    (rMC0_CHIPLET_FIR, bit(3)) ? analyze(gMC_LFIR_0);

    /** MC0_CHIPLET_FIR[4]
     *  Attention from MCAECCFIR 0
     */
    (rMC0_CHIPLET_FIR, bit(4)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_FIR[5]
     *  Attention from MCACALFIR 0
     */
    (rMC0_CHIPLET_FIR, bit(5)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_FIR[6]
     *  Attention from MCAECCFIR 1
     */
    (rMC0_CHIPLET_FIR, bit(6)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_FIR[7]
     *  Attention from MCACALFIR 1
     */
    (rMC0_CHIPLET_FIR, bit(7)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_FIR[8]
     *  Attention from MCAECCFIR 2
     */
    (rMC0_CHIPLET_FIR, bit(8)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_FIR[9]
     *  Attention from MCACALFIR 2
     */
    (rMC0_CHIPLET_FIR, bit(9)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_FIR[10]
     *  Attention from MCAECCFIR 3
     */
    (rMC0_CHIPLET_FIR, bit(10)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_FIR[11]
     *  Attention from MCACALFIR 3
     */
    (rMC0_CHIPLET_FIR, bit(11)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_FIR[12]
     *  Attention from MCBISTFIR 0
     */
    (rMC0_CHIPLET_FIR, bit(12)) ? analyzeConnectedMCBIST0;

    /** MC0_CHIPLET_FIR[13]
     *  Attention from DDRPHYFIR 0
     */
    (rMC0_CHIPLET_FIR, bit(13)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_FIR[14]
     *  Attention from DDRPHYFIR 1
     */
    (rMC0_CHIPLET_FIR, bit(14)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_FIR[15]
     *  Attention from DDRPHYFIR 2
     */
    (rMC0_CHIPLET_FIR, bit(15)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_FIR[16]
     *  Attention from DDRPHYFIR 3
     */
    (rMC0_CHIPLET_FIR, bit(16)) ? analyzeConnectedMCA3;

};

################################################################################
# MC0 Chiplet Unit Checkstop FIR
################################################################################

rule rMC0_CHIPLET_UCS_FIR
{
  UNIT_CS:
    MC0_CHIPLET_UCS_FIR & ~MC0_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gMC0_CHIPLET_UCS_FIR filter singlebit
{
    /** MC0_CHIPLET_UCS_FIR[1]
     *  Attention from MCAECCFIR 0
     */
    (rMC0_CHIPLET_UCS_FIR, bit(1)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_UCS_FIR[2]
     *  Attention from MCACALFIR 0
     */
    (rMC0_CHIPLET_UCS_FIR, bit(2)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_UCS_FIR[3]
     *  Attention from MCAECCFIR 1
     */
    (rMC0_CHIPLET_UCS_FIR, bit(3)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_UCS_FIR[4]
     *  Attention from MCACALFIR 1
     */
    (rMC0_CHIPLET_UCS_FIR, bit(4)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_UCS_FIR[5]
     *  Attention from MCAECCFIR 2
     */
    (rMC0_CHIPLET_UCS_FIR, bit(5)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_UCS_FIR[6]
     *  Attention from MCACALFIR 2
     */
    (rMC0_CHIPLET_UCS_FIR, bit(6)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_UCS_FIR[7]
     *  Attention from MCAECCFIR 3
     */
    (rMC0_CHIPLET_UCS_FIR, bit(7)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_UCS_FIR[8]
     *  Attention from MCACALFIR 3
     */
    (rMC0_CHIPLET_UCS_FIR, bit(8)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_UCS_FIR[9]
     *  Attention from MCBISTFIR 0
     */
    (rMC0_CHIPLET_UCS_FIR, bit(9)) ? analyzeConnectedMCBIST0;

};

################################################################################
# MC0 Chiplet Host Attention FIR
################################################################################

rule rMC0_CHIPLET_HA_FIR
{
  HOST_ATTN:
    MC0_CHIPLET_HA_FIR & ~MC0_CHIPLET_HA_FIR_MASK & `7fffffffffffffff`;
};

group gMC0_CHIPLET_HA_FIR filter singlebit
{
    /** MC0_CHIPLET_HA_FIR[1]
     *  Attention from MCAECCFIR 0
     */
    (rMC0_CHIPLET_HA_FIR, bit(1)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_HA_FIR[2]
     *  Attention from MCACALFIR 0
     */
    (rMC0_CHIPLET_HA_FIR, bit(2)) ? analyzeConnectedMCA0;

    /** MC0_CHIPLET_HA_FIR[3]
     *  Attention from MCAECCFIR 1
     */
    (rMC0_CHIPLET_HA_FIR, bit(3)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_HA_FIR[4]
     *  Attention from MCACALFIR 1
     */
    (rMC0_CHIPLET_HA_FIR, bit(4)) ? analyzeConnectedMCA1;

    /** MC0_CHIPLET_HA_FIR[5]
     *  Attention from MCAECCFIR 2
     */
    (rMC0_CHIPLET_HA_FIR, bit(5)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_HA_FIR[6]
     *  Attention from MCACALFIR 2
     */
    (rMC0_CHIPLET_HA_FIR, bit(6)) ? analyzeConnectedMCA2;

    /** MC0_CHIPLET_HA_FIR[7]
     *  Attention from MCAECCFIR 3
     */
    (rMC0_CHIPLET_HA_FIR, bit(7)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_HA_FIR[8]
     *  Attention from MCACALFIR 3
     */
    (rMC0_CHIPLET_HA_FIR, bit(8)) ? analyzeConnectedMCA3;

    /** MC0_CHIPLET_HA_FIR[9]
     *  Attention from MCBISTFIR 0
     */
    (rMC0_CHIPLET_HA_FIR, bit(9)) ? analyzeConnectedMCBIST0;

};

################################################################################
# P9 chip MC_LFIR 0
################################################################################

rule rMC_LFIR_0
{
  CHECK_STOP:
    MC_LFIR_0 & ~MC_LFIR_0_MASK & ~MC_LFIR_0_ACT0 & ~MC_LFIR_0_ACT1;
  RECOVERABLE:
    MC_LFIR_0 & ~MC_LFIR_0_MASK & ~MC_LFIR_0_ACT0 &  MC_LFIR_0_ACT1;
};

group gMC_LFIR_0 filter singlebit
{
    /** MC_LFIR_0[0]
     *  
     */
    (rMC_LFIR_0, bit(0)) ? TBDDefaultCallout;

    /** MC_LFIR_0[1]
     *  
     */
    (rMC_LFIR_0, bit(1)) ? TBDDefaultCallout;

    /** MC_LFIR_0[2]
     *  
     */
    (rMC_LFIR_0, bit(2)) ? TBDDefaultCallout;

    /** MC_LFIR_0[3]
     *  
     */
    (rMC_LFIR_0, bit(3)) ? TBDDefaultCallout;

    /** MC_LFIR_0[4]
     *  
     */
    (rMC_LFIR_0, bit(4)) ? TBDDefaultCallout;

    /** MC_LFIR_0[5]
     *  
     */
    (rMC_LFIR_0, bit(5)) ? TBDDefaultCallout;

    /** MC_LFIR_0[6]
     *  
     */
    (rMC_LFIR_0, bit(6)) ? TBDDefaultCallout;

    /** MC_LFIR_0[7]
     *  
     */
    (rMC_LFIR_0, bit(7)) ? TBDDefaultCallout;

    /** MC_LFIR_0[8]
     *  
     */
    (rMC_LFIR_0, bit(8)) ? TBDDefaultCallout;

    /** MC_LFIR_0[9]
     *  
     */
    (rMC_LFIR_0, bit(9)) ? TBDDefaultCallout;

    /** MC_LFIR_0[10]
     *  
     */
    (rMC_LFIR_0, bit(10)) ? TBDDefaultCallout;

    /** MC_LFIR_0[11]
     *  
     */
    (rMC_LFIR_0, bit(11)) ? TBDDefaultCallout;

    /** MC_LFIR_0[12]
     *  
     */
    (rMC_LFIR_0, bit(12)) ? TBDDefaultCallout;

    /** MC_LFIR_0[13]
     *  
     */
    (rMC_LFIR_0, bit(13)) ? TBDDefaultCallout;

    /** MC_LFIR_0[14]
     *  
     */
    (rMC_LFIR_0, bit(14)) ? TBDDefaultCallout;

    /** MC_LFIR_0[15]
     *  
     */
    (rMC_LFIR_0, bit(15)) ? TBDDefaultCallout;

    /** MC_LFIR_0[16]
     *  
     */
    (rMC_LFIR_0, bit(16)) ? TBDDefaultCallout;

    /** MC_LFIR_0[17]
     *  
     */
    (rMC_LFIR_0, bit(17)) ? TBDDefaultCallout;

    /** MC_LFIR_0[18]
     *  
     */
    (rMC_LFIR_0, bit(18)) ? TBDDefaultCallout;

    /** MC_LFIR_0[19]
     *  
     */
    (rMC_LFIR_0, bit(19)) ? TBDDefaultCallout;

    /** MC_LFIR_0[20]
     *  
     */
    (rMC_LFIR_0, bit(20)) ? TBDDefaultCallout;

    /** MC_LFIR_0[21]
     *  
     */
    (rMC_LFIR_0, bit(21)) ? TBDDefaultCallout;

    /** MC_LFIR_0[22]
     *  
     */
    (rMC_LFIR_0, bit(22)) ? TBDDefaultCallout;

    /** MC_LFIR_0[23]
     *  
     */
    (rMC_LFIR_0, bit(23)) ? TBDDefaultCallout;

    /** MC_LFIR_0[24]
     *  
     */
    (rMC_LFIR_0, bit(24)) ? TBDDefaultCallout;

    /** MC_LFIR_0[25]
     *  
     */
    (rMC_LFIR_0, bit(25)) ? TBDDefaultCallout;

    /** MC_LFIR_0[26]
     *  
     */
    (rMC_LFIR_0, bit(26)) ? TBDDefaultCallout;

    /** MC_LFIR_0[27]
     *  
     */
    (rMC_LFIR_0, bit(27)) ? TBDDefaultCallout;

    /** MC_LFIR_0[28]
     *  
     */
    (rMC_LFIR_0, bit(28)) ? TBDDefaultCallout;

    /** MC_LFIR_0[29]
     *  
     */
    (rMC_LFIR_0, bit(29)) ? TBDDefaultCallout;

    /** MC_LFIR_0[30]
     *  
     */
    (rMC_LFIR_0, bit(30)) ? TBDDefaultCallout;

    /** MC_LFIR_0[31]
     *  
     */
    (rMC_LFIR_0, bit(31)) ? TBDDefaultCallout;

    /** MC_LFIR_0[32]
     *  
     */
    (rMC_LFIR_0, bit(32)) ? TBDDefaultCallout;

    /** MC_LFIR_0[33]
     *  
     */
    (rMC_LFIR_0, bit(33)) ? TBDDefaultCallout;

    /** MC_LFIR_0[34]
     *  
     */
    (rMC_LFIR_0, bit(34)) ? TBDDefaultCallout;

    /** MC_LFIR_0[35]
     *  
     */
    (rMC_LFIR_0, bit(35)) ? TBDDefaultCallout;

    /** MC_LFIR_0[36]
     *  
     */
    (rMC_LFIR_0, bit(36)) ? TBDDefaultCallout;

    /** MC_LFIR_0[37]
     *  
     */
    (rMC_LFIR_0, bit(37)) ? TBDDefaultCallout;

    /** MC_LFIR_0[38]
     *  
     */
    (rMC_LFIR_0, bit(38)) ? TBDDefaultCallout;

    /** MC_LFIR_0[39]
     *  
     */
    (rMC_LFIR_0, bit(39)) ? TBDDefaultCallout;

    /** MC_LFIR_0[40]
     *  
     */
    (rMC_LFIR_0, bit(40)) ? TBDDefaultCallout;

    /** MC_LFIR_0[41]
     *  
     */
    (rMC_LFIR_0, bit(41)) ? TBDDefaultCallout;

    /** MC_LFIR_0[42]
     *  
     */
    (rMC_LFIR_0, bit(42)) ? TBDDefaultCallout;

    /** MC_LFIR_0[43]
     *  
     */
    (rMC_LFIR_0, bit(43)) ? TBDDefaultCallout;

    /** MC_LFIR_0[44]
     *  
     */
    (rMC_LFIR_0, bit(44)) ? TBDDefaultCallout;

    /** MC_LFIR_0[45]
     *  
     */
    (rMC_LFIR_0, bit(45)) ? TBDDefaultCallout;

    /** MC_LFIR_0[46]
     *  
     */
    (rMC_LFIR_0, bit(46)) ? TBDDefaultCallout;

    /** MC_LFIR_0[47]
     *  
     */
    (rMC_LFIR_0, bit(47)) ? TBDDefaultCallout;

    /** MC_LFIR_0[48]
     *  
     */
    (rMC_LFIR_0, bit(48)) ? TBDDefaultCallout;

    /** MC_LFIR_0[49]
     *  
     */
    (rMC_LFIR_0, bit(49)) ? TBDDefaultCallout;

    /** MC_LFIR_0[50]
     *  
     */
    (rMC_LFIR_0, bit(50)) ? TBDDefaultCallout;

    /** MC_LFIR_0[51]
     *  
     */
    (rMC_LFIR_0, bit(51)) ? TBDDefaultCallout;

    /** MC_LFIR_0[52]
     *  
     */
    (rMC_LFIR_0, bit(52)) ? TBDDefaultCallout;

    /** MC_LFIR_0[53]
     *  
     */
    (rMC_LFIR_0, bit(53)) ? TBDDefaultCallout;

    /** MC_LFIR_0[54]
     *  
     */
    (rMC_LFIR_0, bit(54)) ? TBDDefaultCallout;

    /** MC_LFIR_0[55]
     *  
     */
    (rMC_LFIR_0, bit(55)) ? TBDDefaultCallout;

    /** MC_LFIR_0[56]
     *  
     */
    (rMC_LFIR_0, bit(56)) ? TBDDefaultCallout;

    /** MC_LFIR_0[57]
     *  
     */
    (rMC_LFIR_0, bit(57)) ? TBDDefaultCallout;

    /** MC_LFIR_0[58]
     *  
     */
    (rMC_LFIR_0, bit(58)) ? TBDDefaultCallout;

    /** MC_LFIR_0[59]
     *  
     */
    (rMC_LFIR_0, bit(59)) ? TBDDefaultCallout;

    /** MC_LFIR_0[60]
     *  
     */
    (rMC_LFIR_0, bit(60)) ? TBDDefaultCallout;

    /** MC_LFIR_0[61]
     *  
     */
    (rMC_LFIR_0, bit(61)) ? TBDDefaultCallout;

    /** MC_LFIR_0[62]
     *  
     */
    (rMC_LFIR_0, bit(62)) ? TBDDefaultCallout;

    /** MC_LFIR_0[63]
     *  
     */
    (rMC_LFIR_0, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# MC1 Chiplet FIR
################################################################################

rule rMC1_CHIPLET_FIR
{
  CHECK_STOP:
     MC1_CHIPLET_CS_FIR       & ~MC1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (MC1_CHIPLET_RE_FIR >> 2) & ~MC1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gMC1_CHIPLET_FIR filter singlebit
{
    /** MC1_CHIPLET_FIR[3]
     *  Attention from MC_LFIR
     */
    (rMC1_CHIPLET_FIR, bit(3)) ? analyze(gMC_LFIR_1);

    /** MC1_CHIPLET_FIR[4]
     *  Attention from MCAECCFIR 4
     */
    (rMC1_CHIPLET_FIR, bit(4)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_FIR[5]
     *  Attention from MCACALFIR 4
     */
    (rMC1_CHIPLET_FIR, bit(5)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_FIR[6]
     *  Attention from MCAECCFIR 5
     */
    (rMC1_CHIPLET_FIR, bit(6)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_FIR[7]
     *  Attention from MCACALFIR 5
     */
    (rMC1_CHIPLET_FIR, bit(7)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_FIR[8]
     *  Attention from MCAECCFIR 6
     */
    (rMC1_CHIPLET_FIR, bit(8)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_FIR[9]
     *  Attention from MCACALFIR 6
     */
    (rMC1_CHIPLET_FIR, bit(9)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_FIR[10]
     *  Attention from MCAECCFIR 7
     */
    (rMC1_CHIPLET_FIR, bit(10)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_FIR[11]
     *  Attention from MCACALFIR 7
     */
    (rMC1_CHIPLET_FIR, bit(11)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_FIR[12]
     *  Attention from MCBISTFIR 1
     */
    (rMC1_CHIPLET_FIR, bit(12)) ? analyzeConnectedMCBIST1;

    /** MC1_CHIPLET_FIR[13]
     *  Attention from DDRPHYFIR 4
     */
    (rMC1_CHIPLET_FIR, bit(13)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_FIR[14]
     *  Attention from DDRPHYFIR 5
     */
    (rMC1_CHIPLET_FIR, bit(14)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_FIR[15]
     *  Attention from DDRPHYFIR 6
     */
    (rMC1_CHIPLET_FIR, bit(15)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_FIR[16]
     *  Attention from DDRPHYFIR 7
     */
    (rMC1_CHIPLET_FIR, bit(16)) ? analyzeConnectedMCA7;

};

################################################################################
# MC1 Chiplet Unit Checkstop FIR
################################################################################

rule rMC1_CHIPLET_UCS_FIR
{
  UNIT_CS:
    MC1_CHIPLET_UCS_FIR & ~MC1_CHIPLET_UCS_FIR_MASK & `7fffffffffffffff`;
};

group gMC1_CHIPLET_UCS_FIR filter singlebit
{
    /** MC1_CHIPLET_UCS_FIR[1]
     *  Attention from MCAECCFIR 4
     */
    (rMC1_CHIPLET_UCS_FIR, bit(1)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_UCS_FIR[2]
     *  Attention from MCACALFIR 4
     */
    (rMC1_CHIPLET_UCS_FIR, bit(2)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_UCS_FIR[3]
     *  Attention from MCAECCFIR 5
     */
    (rMC1_CHIPLET_UCS_FIR, bit(3)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_UCS_FIR[4]
     *  Attention from MCACALFIR 5
     */
    (rMC1_CHIPLET_UCS_FIR, bit(4)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_UCS_FIR[5]
     *  Attention from MCAECCFIR 6
     */
    (rMC1_CHIPLET_UCS_FIR, bit(5)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_UCS_FIR[6]
     *  Attention from MCACALFIR 6
     */
    (rMC1_CHIPLET_UCS_FIR, bit(6)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_UCS_FIR[7]
     *  Attention from MCAECCFIR 7
     */
    (rMC1_CHIPLET_UCS_FIR, bit(7)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_UCS_FIR[8]
     *  Attention from MCACALFIR 7
     */
    (rMC1_CHIPLET_UCS_FIR, bit(8)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_UCS_FIR[9]
     *  Attention from MCBISTFIR 1
     */
    (rMC1_CHIPLET_UCS_FIR, bit(9)) ? analyzeConnectedMCBIST1;

};

################################################################################
# MC1 Chiplet Host Attention FIR
################################################################################

rule rMC1_CHIPLET_HA_FIR
{
  HOST_ATTN:
    MC1_CHIPLET_HA_FIR & ~MC1_CHIPLET_HA_FIR_MASK & `7fffffffffffffff`;
};

group gMC1_CHIPLET_HA_FIR filter singlebit
{
    /** MC1_CHIPLET_HA_FIR[1]
     *  Attention from MCAECCFIR 4
     */
    (rMC1_CHIPLET_HA_FIR, bit(1)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_HA_FIR[2]
     *  Attention from MCACALFIR 4
     */
    (rMC1_CHIPLET_HA_FIR, bit(2)) ? analyzeConnectedMCA4;

    /** MC1_CHIPLET_HA_FIR[3]
     *  Attention from MCAECCFIR 5
     */
    (rMC1_CHIPLET_HA_FIR, bit(3)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_HA_FIR[4]
     *  Attention from MCACALFIR 5
     */
    (rMC1_CHIPLET_HA_FIR, bit(4)) ? analyzeConnectedMCA5;

    /** MC1_CHIPLET_HA_FIR[5]
     *  Attention from MCAECCFIR 6
     */
    (rMC1_CHIPLET_HA_FIR, bit(5)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_HA_FIR[6]
     *  Attention from MCACALFIR 6
     */
    (rMC1_CHIPLET_HA_FIR, bit(6)) ? analyzeConnectedMCA6;

    /** MC1_CHIPLET_HA_FIR[7]
     *  Attention from MCAECCFIR 7
     */
    (rMC1_CHIPLET_HA_FIR, bit(7)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_HA_FIR[8]
     *  Attention from MCACALFIR 7
     */
    (rMC1_CHIPLET_HA_FIR, bit(8)) ? analyzeConnectedMCA7;

    /** MC1_CHIPLET_HA_FIR[9]
     *  Attention from MCBISTFIR 1
     */
    (rMC1_CHIPLET_HA_FIR, bit(9)) ? analyzeConnectedMCBIST1;

};

################################################################################
# P9 chip MC_LFIR 1
################################################################################

rule rMC_LFIR_1
{
  CHECK_STOP:
    MC_LFIR_1 & ~MC_LFIR_1_MASK & ~MC_LFIR_1_ACT0 & ~MC_LFIR_1_ACT1;
  RECOVERABLE:
    MC_LFIR_1 & ~MC_LFIR_1_MASK & ~MC_LFIR_1_ACT0 &  MC_LFIR_1_ACT1;
};

group gMC_LFIR_1 filter singlebit
{
    /** MC_LFIR_1[0]
     *  
     */
    (rMC_LFIR_1, bit(0)) ? TBDDefaultCallout;

    /** MC_LFIR_1[1]
     *  
     */
    (rMC_LFIR_1, bit(1)) ? TBDDefaultCallout;

    /** MC_LFIR_1[2]
     *  
     */
    (rMC_LFIR_1, bit(2)) ? TBDDefaultCallout;

    /** MC_LFIR_1[3]
     *  
     */
    (rMC_LFIR_1, bit(3)) ? TBDDefaultCallout;

    /** MC_LFIR_1[4]
     *  
     */
    (rMC_LFIR_1, bit(4)) ? TBDDefaultCallout;

    /** MC_LFIR_1[5]
     *  
     */
    (rMC_LFIR_1, bit(5)) ? TBDDefaultCallout;

    /** MC_LFIR_1[6]
     *  
     */
    (rMC_LFIR_1, bit(6)) ? TBDDefaultCallout;

    /** MC_LFIR_1[7]
     *  
     */
    (rMC_LFIR_1, bit(7)) ? TBDDefaultCallout;

    /** MC_LFIR_1[8]
     *  
     */
    (rMC_LFIR_1, bit(8)) ? TBDDefaultCallout;

    /** MC_LFIR_1[9]
     *  
     */
    (rMC_LFIR_1, bit(9)) ? TBDDefaultCallout;

    /** MC_LFIR_1[10]
     *  
     */
    (rMC_LFIR_1, bit(10)) ? TBDDefaultCallout;

    /** MC_LFIR_1[11]
     *  
     */
    (rMC_LFIR_1, bit(11)) ? TBDDefaultCallout;

    /** MC_LFIR_1[12]
     *  
     */
    (rMC_LFIR_1, bit(12)) ? TBDDefaultCallout;

    /** MC_LFIR_1[13]
     *  
     */
    (rMC_LFIR_1, bit(13)) ? TBDDefaultCallout;

    /** MC_LFIR_1[14]
     *  
     */
    (rMC_LFIR_1, bit(14)) ? TBDDefaultCallout;

    /** MC_LFIR_1[15]
     *  
     */
    (rMC_LFIR_1, bit(15)) ? TBDDefaultCallout;

    /** MC_LFIR_1[16]
     *  
     */
    (rMC_LFIR_1, bit(16)) ? TBDDefaultCallout;

    /** MC_LFIR_1[17]
     *  
     */
    (rMC_LFIR_1, bit(17)) ? TBDDefaultCallout;

    /** MC_LFIR_1[18]
     *  
     */
    (rMC_LFIR_1, bit(18)) ? TBDDefaultCallout;

    /** MC_LFIR_1[19]
     *  
     */
    (rMC_LFIR_1, bit(19)) ? TBDDefaultCallout;

    /** MC_LFIR_1[20]
     *  
     */
    (rMC_LFIR_1, bit(20)) ? TBDDefaultCallout;

    /** MC_LFIR_1[21]
     *  
     */
    (rMC_LFIR_1, bit(21)) ? TBDDefaultCallout;

    /** MC_LFIR_1[22]
     *  
     */
    (rMC_LFIR_1, bit(22)) ? TBDDefaultCallout;

    /** MC_LFIR_1[23]
     *  
     */
    (rMC_LFIR_1, bit(23)) ? TBDDefaultCallout;

    /** MC_LFIR_1[24]
     *  
     */
    (rMC_LFIR_1, bit(24)) ? TBDDefaultCallout;

    /** MC_LFIR_1[25]
     *  
     */
    (rMC_LFIR_1, bit(25)) ? TBDDefaultCallout;

    /** MC_LFIR_1[26]
     *  
     */
    (rMC_LFIR_1, bit(26)) ? TBDDefaultCallout;

    /** MC_LFIR_1[27]
     *  
     */
    (rMC_LFIR_1, bit(27)) ? TBDDefaultCallout;

    /** MC_LFIR_1[28]
     *  
     */
    (rMC_LFIR_1, bit(28)) ? TBDDefaultCallout;

    /** MC_LFIR_1[29]
     *  
     */
    (rMC_LFIR_1, bit(29)) ? TBDDefaultCallout;

    /** MC_LFIR_1[30]
     *  
     */
    (rMC_LFIR_1, bit(30)) ? TBDDefaultCallout;

    /** MC_LFIR_1[31]
     *  
     */
    (rMC_LFIR_1, bit(31)) ? TBDDefaultCallout;

    /** MC_LFIR_1[32]
     *  
     */
    (rMC_LFIR_1, bit(32)) ? TBDDefaultCallout;

    /** MC_LFIR_1[33]
     *  
     */
    (rMC_LFIR_1, bit(33)) ? TBDDefaultCallout;

    /** MC_LFIR_1[34]
     *  
     */
    (rMC_LFIR_1, bit(34)) ? TBDDefaultCallout;

    /** MC_LFIR_1[35]
     *  
     */
    (rMC_LFIR_1, bit(35)) ? TBDDefaultCallout;

    /** MC_LFIR_1[36]
     *  
     */
    (rMC_LFIR_1, bit(36)) ? TBDDefaultCallout;

    /** MC_LFIR_1[37]
     *  
     */
    (rMC_LFIR_1, bit(37)) ? TBDDefaultCallout;

    /** MC_LFIR_1[38]
     *  
     */
    (rMC_LFIR_1, bit(38)) ? TBDDefaultCallout;

    /** MC_LFIR_1[39]
     *  
     */
    (rMC_LFIR_1, bit(39)) ? TBDDefaultCallout;

    /** MC_LFIR_1[40]
     *  
     */
    (rMC_LFIR_1, bit(40)) ? TBDDefaultCallout;

    /** MC_LFIR_1[41]
     *  
     */
    (rMC_LFIR_1, bit(41)) ? TBDDefaultCallout;

    /** MC_LFIR_1[42]
     *  
     */
    (rMC_LFIR_1, bit(42)) ? TBDDefaultCallout;

    /** MC_LFIR_1[43]
     *  
     */
    (rMC_LFIR_1, bit(43)) ? TBDDefaultCallout;

    /** MC_LFIR_1[44]
     *  
     */
    (rMC_LFIR_1, bit(44)) ? TBDDefaultCallout;

    /** MC_LFIR_1[45]
     *  
     */
    (rMC_LFIR_1, bit(45)) ? TBDDefaultCallout;

    /** MC_LFIR_1[46]
     *  
     */
    (rMC_LFIR_1, bit(46)) ? TBDDefaultCallout;

    /** MC_LFIR_1[47]
     *  
     */
    (rMC_LFIR_1, bit(47)) ? TBDDefaultCallout;

    /** MC_LFIR_1[48]
     *  
     */
    (rMC_LFIR_1, bit(48)) ? TBDDefaultCallout;

    /** MC_LFIR_1[49]
     *  
     */
    (rMC_LFIR_1, bit(49)) ? TBDDefaultCallout;

    /** MC_LFIR_1[50]
     *  
     */
    (rMC_LFIR_1, bit(50)) ? TBDDefaultCallout;

    /** MC_LFIR_1[51]
     *  
     */
    (rMC_LFIR_1, bit(51)) ? TBDDefaultCallout;

    /** MC_LFIR_1[52]
     *  
     */
    (rMC_LFIR_1, bit(52)) ? TBDDefaultCallout;

    /** MC_LFIR_1[53]
     *  
     */
    (rMC_LFIR_1, bit(53)) ? TBDDefaultCallout;

    /** MC_LFIR_1[54]
     *  
     */
    (rMC_LFIR_1, bit(54)) ? TBDDefaultCallout;

    /** MC_LFIR_1[55]
     *  
     */
    (rMC_LFIR_1, bit(55)) ? TBDDefaultCallout;

    /** MC_LFIR_1[56]
     *  
     */
    (rMC_LFIR_1, bit(56)) ? TBDDefaultCallout;

    /** MC_LFIR_1[57]
     *  
     */
    (rMC_LFIR_1, bit(57)) ? TBDDefaultCallout;

    /** MC_LFIR_1[58]
     *  
     */
    (rMC_LFIR_1, bit(58)) ? TBDDefaultCallout;

    /** MC_LFIR_1[59]
     *  
     */
    (rMC_LFIR_1, bit(59)) ? TBDDefaultCallout;

    /** MC_LFIR_1[60]
     *  
     */
    (rMC_LFIR_1, bit(60)) ? TBDDefaultCallout;

    /** MC_LFIR_1[61]
     *  
     */
    (rMC_LFIR_1, bit(61)) ? TBDDefaultCallout;

    /** MC_LFIR_1[62]
     *  
     */
    (rMC_LFIR_1, bit(62)) ? TBDDefaultCallout;

    /** MC_LFIR_1[63]
     *  
     */
    (rMC_LFIR_1, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# PCI0 Chiplet FIR
################################################################################

rule rPCI0_CHIPLET_FIR
{
  CHECK_STOP:
     PCI0_CHIPLET_CS_FIR       & ~PCI0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (PCI0_CHIPLET_RE_FIR >> 2) & ~PCI0_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gPCI0_CHIPLET_FIR filter singlebit
{
    /** PCI0_CHIPLET_FIR[3]
     *  Attention from PCI_LFIR 0
     */
    (rPCI0_CHIPLET_FIR, bit(3)) ? analyzeConnectedPEC0;

    /** PCI0_CHIPLET_FIR[4]
     *  Attention from ETUFIR 0
     */
    (rPCI0_CHIPLET_FIR, bit(4)) ? analyzeConnectedPHB0;

    /** PCI0_CHIPLET_FIR[5]
     *  Attention from IOPCIFIR 0
     */
    (rPCI0_CHIPLET_FIR, bit(5)) ? analyzeConnectedPEC0;

    /** PCI0_CHIPLET_FIR[6]
     *  Attention from PCIFIR 0
     */
    (rPCI0_CHIPLET_FIR, bit(6)) ? analyzeConnectedPHB0;

};

################################################################################
# PCI1 Chiplet FIR
################################################################################

rule rPCI1_CHIPLET_FIR
{
  CHECK_STOP:
     PCI1_CHIPLET_CS_FIR       & ~PCI1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (PCI1_CHIPLET_RE_FIR >> 2) & ~PCI1_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gPCI1_CHIPLET_FIR filter singlebit
{
    /** PCI1_CHIPLET_FIR[3]
     *  Attention from PCI_LFIR 1
     */
    (rPCI1_CHIPLET_FIR, bit(3)) ? analyzeConnectedPEC1;

    /** PCI1_CHIPLET_FIR[4]
     *  Attention from ETUFIR 1
     */
    (rPCI1_CHIPLET_FIR, bit(4)) ? analyzeConnectedPHB1;

    /** PCI1_CHIPLET_FIR[5]
     *  Attention from ETUFIR 2
     */
    (rPCI1_CHIPLET_FIR, bit(5)) ? analyzeConnectedPHB2;

    /** PCI1_CHIPLET_FIR[6]
     *  Attention from IOPCIFIR 1
     */
    (rPCI1_CHIPLET_FIR, bit(6)) ? analyzeConnectedPEC1;

    /** PCI1_CHIPLET_FIR[7]
     *  Attention from PCIFIR 1
     */
    (rPCI1_CHIPLET_FIR, bit(7)) ? analyzeConnectedPHB1;

    /** PCI1_CHIPLET_FIR[8]
     *  Attention from PCIFIR 2
     */
    (rPCI1_CHIPLET_FIR, bit(8)) ? analyzeConnectedPHB2;

};

################################################################################
# PCI2 Chiplet FIR
################################################################################

rule rPCI2_CHIPLET_FIR
{
  CHECK_STOP:
     PCI2_CHIPLET_CS_FIR       & ~PCI2_CHIPLET_FIR_MASK & `1fffffffffffffff`;
  RECOVERABLE:
    (PCI2_CHIPLET_RE_FIR >> 2) & ~PCI2_CHIPLET_FIR_MASK & `1fffffffffffffff`;
};

group gPCI2_CHIPLET_FIR filter singlebit
{
    /** PCI2_CHIPLET_FIR[3]
     *  Attention from PCI_LFIR 2
     */
    (rPCI2_CHIPLET_FIR, bit(3)) ? analyzeConnectedPEC2;

    /** PCI2_CHIPLET_FIR[4]
     *  Attention from ETUFIR 3
     */
    (rPCI2_CHIPLET_FIR, bit(4)) ? analyzeConnectedPHB3;

    /** PCI2_CHIPLET_FIR[5]
     *  Attention from ETUFIR 4
     */
    (rPCI2_CHIPLET_FIR, bit(5)) ? analyzeConnectedPHB4;

    /** PCI2_CHIPLET_FIR[6]
     *  Attention from ETUFIR 5
     */
    (rPCI2_CHIPLET_FIR, bit(6)) ? analyzeConnectedPHB5;

    /** PCI2_CHIPLET_FIR[7]
     *  Attention from IOPCIFIR 2
     */
    (rPCI2_CHIPLET_FIR, bit(7)) ? analyzeConnectedPEC2;

    /** PCI2_CHIPLET_FIR[8]
     *  Attention from PCIFIR 3
     */
    (rPCI2_CHIPLET_FIR, bit(8)) ? analyzeConnectedPHB3;

    /** PCI2_CHIPLET_FIR[9]
     *  Attention from PCIFIR 4
     */
    (rPCI2_CHIPLET_FIR, bit(9)) ? analyzeConnectedPHB4;

    /** PCI2_CHIPLET_FIR[10]
     *  Attention from PCIFIR 5
     */
    (rPCI2_CHIPLET_FIR, bit(10)) ? analyzeConnectedPHB5;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the common action set.
.include "p9_common_actions.rule";

actionclass analyzeConnectedEQ0     { analyze(connected(TYPE_EQ,      0)); };
actionclass analyzeConnectedEQ1     { analyze(connected(TYPE_EQ,      1)); };
actionclass analyzeConnectedEQ2     { analyze(connected(TYPE_EQ,      2)); };
actionclass analyzeConnectedEQ3     { analyze(connected(TYPE_EQ,      3)); };
actionclass analyzeConnectedEQ4     { analyze(connected(TYPE_EQ,      4)); };
actionclass analyzeConnectedEQ5     { analyze(connected(TYPE_EQ,      5)); };
actionclass analyzeConnectedEC0     { analyze(connected(TYPE_CORE,    0)); };
actionclass analyzeConnectedEC1     { analyze(connected(TYPE_CORE,    1)); };
actionclass analyzeConnectedEC2     { analyze(connected(TYPE_CORE,    2)); };
actionclass analyzeConnectedEC3     { analyze(connected(TYPE_CORE,    3)); };
actionclass analyzeConnectedEC4     { analyze(connected(TYPE_CORE,    4)); };
actionclass analyzeConnectedEC5     { analyze(connected(TYPE_CORE,    5)); };
actionclass analyzeConnectedEC6     { analyze(connected(TYPE_CORE,    6)); };
actionclass analyzeConnectedEC7     { analyze(connected(TYPE_CORE,    7)); };
actionclass analyzeConnectedEC8     { analyze(connected(TYPE_CORE,    8)); };
actionclass analyzeConnectedEC9     { analyze(connected(TYPE_CORE,    9)); };
actionclass analyzeConnectedEC10    { analyze(connected(TYPE_CORE,   10)); };
actionclass analyzeConnectedEC11    { analyze(connected(TYPE_CORE,   11)); };
actionclass analyzeConnectedEC12    { analyze(connected(TYPE_CORE,   12)); };
actionclass analyzeConnectedEC13    { analyze(connected(TYPE_CORE,   13)); };
actionclass analyzeConnectedEC14    { analyze(connected(TYPE_CORE,   14)); };
actionclass analyzeConnectedEC15    { analyze(connected(TYPE_CORE,   15)); };
actionclass analyzeConnectedEC16    { analyze(connected(TYPE_CORE,   16)); };
actionclass analyzeConnectedEC17    { analyze(connected(TYPE_CORE,   17)); };
actionclass analyzeConnectedEC18    { analyze(connected(TYPE_CORE,   18)); };
actionclass analyzeConnectedEC19    { analyze(connected(TYPE_CORE,   19)); };
actionclass analyzeConnectedEC20    { analyze(connected(TYPE_CORE,   20)); };
actionclass analyzeConnectedEC21    { analyze(connected(TYPE_CORE,   21)); };
actionclass analyzeConnectedEC22    { analyze(connected(TYPE_CORE,   22)); };
actionclass analyzeConnectedEC23    { analyze(connected(TYPE_CORE,   23)); };
actionclass analyzeConnectedCAPP0   { analyze(connected(TYPE_CAPP,    0)); };
actionclass analyzeConnectedCAPP1   { analyze(connected(TYPE_CAPP,    1)); };
actionclass analyzeConnectedOBUS0   { analyze(connected(TYPE_OBUS,    0)); };
actionclass analyzeConnectedOBUS3   { analyze(connected(TYPE_OBUS,    3)); };
actionclass analyzeConnectedXBUS1   { analyze(connected(TYPE_XBUS,    1)); };
actionclass analyzeConnectedXBUS2   { analyze(connected(TYPE_XBUS,    2)); };
actionclass analyzeConnectedPEC0    { analyze(connected(TYPE_PEC,     0)); };
actionclass analyzeConnectedPEC1    { analyze(connected(TYPE_PEC,     1)); };
actionclass analyzeConnectedPEC2    { analyze(connected(TYPE_PEC,     2)); };
actionclass analyzeConnectedPHB0    { analyze(connected(TYPE_PHB,     0)); };
actionclass analyzeConnectedPHB1    { analyze(connected(TYPE_PHB,     1)); };
actionclass analyzeConnectedPHB2    { analyze(connected(TYPE_PHB,     2)); };
actionclass analyzeConnectedPHB3    { analyze(connected(TYPE_PHB,     3)); };
actionclass analyzeConnectedPHB4    { analyze(connected(TYPE_PHB,     4)); };
actionclass analyzeConnectedPHB5    { analyze(connected(TYPE_PHB,     5)); };
actionclass analyzeConnectedMCBIST0 { analyze(connected(TYPE_MCBIST,  0)); };
actionclass analyzeConnectedMCBIST1 { analyze(connected(TYPE_MCBIST,  1)); };
actionclass analyzeConnectedMCS0    { analyze(connected(TYPE_MCS,     0)); };
actionclass analyzeConnectedMCS1    { analyze(connected(TYPE_MCS,     1)); };
actionclass analyzeConnectedMCS2    { analyze(connected(TYPE_MCS,     2)); };
actionclass analyzeConnectedMCS3    { analyze(connected(TYPE_MCS,     3)); };
actionclass analyzeConnectedMCA0    { analyze(connected(TYPE_MCA,     0)); };
actionclass analyzeConnectedMCA1    { analyze(connected(TYPE_MCA,     1)); };
actionclass analyzeConnectedMCA2    { analyze(connected(TYPE_MCA,     2)); };
actionclass analyzeConnectedMCA3    { analyze(connected(TYPE_MCA,     3)); };
actionclass analyzeConnectedMCA4    { analyze(connected(TYPE_MCA,     4)); };
actionclass analyzeConnectedMCA5    { analyze(connected(TYPE_MCA,     5)); };
actionclass analyzeConnectedMCA6    { analyze(connected(TYPE_MCA,     6)); };
actionclass analyzeConnectedMCA7    { analyze(connected(TYPE_MCA,     7)); };
