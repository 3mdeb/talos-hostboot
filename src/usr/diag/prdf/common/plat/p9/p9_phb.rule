# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_phb.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p9_phb
{
    name        "P9 PHB chiplet";
    targettype  TYPE_PHB;
    sigoff      0x9000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P9 PHB target PHBNFIR
    ############################################################################

    register PHBNFIR
    {
        name        "P9 PHB target PHBNFIR";
        scomaddr    0x04010c40;
        reset       (&, 0x04010c41);
        mask        (|, 0x04010c45);
        capture     group default;
    };

    register PHBNFIR_MASK
    {
        name        "P9 PHB target PHBNFIR MASK";
        scomaddr    0x04010c43;
        capture     group default;
    };

    register PHBNFIR_ACT0
    {
        name        "P9 PHB target PHBNFIR ACT0";
        scomaddr    0x04010c46;
        capture     group default;
        capture     req nonzero("PHBNFIR");
    };

    register PHBNFIR_ACT1
    {
        name        "P9 PHB target PHBNFIR ACT1";
        scomaddr    0x04010c47;
        capture     group default;
        capture     req nonzero("PHBNFIR");
    };

    ############################################################################
    # P9 PHB target PCIFIR
    ############################################################################

    register PCIFIR
    {
        name        "P9 PHB target PCIFIR";
        scomaddr    0x0d010840;
        reset       (&, 0x0d010841);
        mask        (|, 0x0d010845);
        capture     group default;
    };

    register PCIFIR_MASK
    {
        name        "P9 PHB target PCIFIR MASK";
        scomaddr    0x0d010843;
        capture     group default;
    };

    register PCIFIR_ACT0
    {
        name        "P9 PHB target PCIFIR ACT0";
        scomaddr    0x0d010846;
        capture     group default;
        capture     req nonzero("PCIFIR");
    };

    register PCIFIR_ACT1
    {
        name        "P9 PHB target PCIFIR ACT1";
        scomaddr    0x0d010847;
        capture     group default;
        capture     req nonzero("PCIFIR");
    };

    ############################################################################
    # P9 PHB target ETUFIR
    ############################################################################

    register ETUFIR
    {
        name        "P9 PHB target ETUFIR";
        scomaddr    0x0d010908;
        reset       (&, 0x0d010909);
        mask        (|, 0x0d01090d);
        capture     group default;
    };

    register ETUFIR_MASK
    {
        name        "P9 PHB target ETUFIR MASK";
        scomaddr    0x0d01090b;
        capture     group default;
    };

    register ETUFIR_ACT0
    {
        name        "P9 PHB target ETUFIR ACT0";
        scomaddr    0x0d01090e;
        capture     group default;
        capture     req nonzero("ETUFIR");
    };

    register ETUFIR_ACT1
    {
        name        "P9 PHB target ETUFIR ACT1";
        scomaddr    0x0d01090f;
        capture     group default;
        capture     req nonzero("ETUFIR");
    };


# Include registers not defined by the xml
.include "p9_phb_regs.rule";

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for PHB
################################################################################

rule rPHB
{
  CHECK_STOP:
    summary( 0, rPHBNFIR ) |
    summary( 1, rPCIFIR ) |
    summary( 2, rETUFIR );

  RECOVERABLE:
    summary( 0, rPHBNFIR ) |
    summary( 1, rPCIFIR ) |
    summary( 2, rETUFIR );

};

group gPHB attntype CHECK_STOP, RECOVERABLE
{
    (rPHB, bit(0)) ? analyze(gPHBNFIR);
    (rPHB, bit(1)) ? analyze(gPCIFIR);
    (rPHB, bit(2)) ? analyze(gETUFIR);
};

################################################################################
# P9 PHB target PHBNFIR
################################################################################

rule rPHBNFIR
{
  CHECK_STOP:
    PHBNFIR & ~PHBNFIR_MASK & ~PHBNFIR_ACT0 & ~PHBNFIR_ACT1;
  RECOVERABLE:
    PHBNFIR & ~PHBNFIR_MASK & ~PHBNFIR_ACT0 &  PHBNFIR_ACT1;
};

group gPHBNFIR filter singlebit
{
    /** PHBNFIR[0]
     *  BAR Parity Error
     */
    (rPHBNFIR, bit(0)) ? self_th_1;

    /** PHBNFIR[1]
     *  
     */
    (rPHBNFIR, bit(1)) ? defaultMaskedError;

    /** PHBNFIR[2]
     *  Power Bus to PEC CE
     */
    (rPHBNFIR, bit(2)) ? self_th_32perDay;

    /** PHBNFIR[3]
     *  
     */
    (rPHBNFIR, bit(3)) ? defaultMaskedError;

    /** PHBNFIR[4]
     *  
     */
    (rPHBNFIR, bit(4)) ? defaultMaskedError;

    /** PHBNFIR[5]
     *  Array CE
     */
    (rPHBNFIR, bit(5)) ? self_th_32perDay;

    /** PHBNFIR[6]
     *  
     */
    (rPHBNFIR, bit(6)) ? defaultMaskedError;

    /** PHBNFIR[7]
     *  
     */
    (rPHBNFIR, bit(7)) ? defaultMaskedError;

    /** PHBNFIR[8]
     *  Register Array Parity Error
     */
    (rPHBNFIR, bit(8)) ? self_th_1;

    /** PHBNFIR[9]
     *  Power Bus Interface Parity Error
     */
    (rPHBNFIR, bit(9)) ? self_th_1;

    /** PHBNFIR[10]
     *  Power Bus Data Hang
     */
    (rPHBNFIR, bit(10)) ? defaultMaskedError;

    /** PHBNFIR[11]
     *  Power Bus Hang
     */
    (rPHBNFIR, bit(11)) ? defaultMaskedError;

    /** PHBNFIR[12]
     *  
     */
    (rPHBNFIR, bit(12)) ? defaultMaskedError;

    /** PHBNFIR[13]
     *  
     */
    (rPHBNFIR, bit(13)) ? defaultMaskedError;

    /** PHBNFIR[14]
     *  
     */
    (rPHBNFIR, bit(14)) ? defaultMaskedError;

    /** PHBNFIR[15]
     *  
     */
    (rPHBNFIR, bit(15)) ? defaultMaskedError;

    /** PHBNFIR[16]
     *  
     */
    (rPHBNFIR, bit(16)) ? defaultMaskedError;

    /** PHBNFIR[17]
     *  Hardware Error
     */
    (rPHBNFIR, bit(17)) ? self_th_1;

    /** PHBNFIR[18]
     *  Unsolicited Power Bus Data
     */
    (rPHBNFIR, bit(18)) ? level2_th_1;

    /** PHBNFIR[19]
     *  UnExpected Combined Response
     */
    (rPHBNFIR, bit(19)) ? level2_th_1;

    /** PHBNFIR[20]
     *  
     */
    (rPHBNFIR, bit(20)) ? defaultMaskedError;

    /** PHBNFIR[21]
     *  
     */
    (rPHBNFIR, bit(21)) ? defaultMaskedError;

    /** PHBNFIR[22]
     *  
     */
    (rPHBNFIR, bit(22)) ? defaultMaskedError;

    /** PHBNFIR[23]
     *  
     */
    (rPHBNFIR, bit(23)) ? defaultMaskedError;

    /** PHBNFIR[24]
     *  
     */
    (rPHBNFIR, bit(24)) ? defaultMaskedError;

    /** PHBNFIR[25]
     *  
     */
    (rPHBNFIR, bit(25)) ? defaultMaskedError;

    /** PHBNFIR[26]
     *  Software Defined
     */
    (rPHBNFIR, bit(26)) ? defaultMaskedError;

    /** PHBNFIR[27]
     *  PEC SCOM Engine Error
     */
    (rPHBNFIR, bit(27)) ? defaultMaskedError;

    /** PHBNFIR[28]
     *  scom error
     */
    (rPHBNFIR, bit(28)) ? defaultMaskedError;

    /** PHBNFIR[29]
     *  scom error
     */
    (rPHBNFIR, bit(29)) ? defaultMaskedError;

};

################################################################################
# P9 PHB target PCIFIR
################################################################################

rule rPCIFIR
{
  CHECK_STOP:
    PCIFIR & ~PCIFIR_MASK & ~PCIFIR_ACT0 & ~PCIFIR_ACT1;
  RECOVERABLE:
    PCIFIR & ~PCIFIR_MASK & ~PCIFIR_ACT0 &  PCIFIR_ACT1;
};

group gPCIFIR filter singlebit
{
    /** PCIFIR[0]
     *  A0LINK_FMR_ERROR
     */
    (rPCIFIR, bit(0)) ? self_th_1;

    /** PCIFIR[1]
     *  A1LINK_FMR_ERROR
     */
    (rPCIFIR, bit(1)) ? self_th_1;

    /** PCIFIR[2]
     *  A2LINK_FMR_ERROR
     */
    (rPCIFIR, bit(2)) ? self_th_1;

    /** PCIFIR[3]
     *  A0LINK_PSR_ERR
     */
    (rPCIFIR, bit(3)) ? self_th_1;

    /** PCIFIR[4]
     *  A1LINK_PSR_ERR
     */
    (rPCIFIR, bit(4)) ? self_th_1;

    /** PCIFIR[5]
     *  A2LINK_PSR_ERR
     */
    (rPCIFIR, bit(5)) ? self_th_1;

    /** PCIFIR[6]
     *  
     */
    (rPCIFIR, bit(6)) ? defaultMaskedError;

    /** PCIFIR[7]
     *  A0LINK_PSR_SUE_ERR
     */
    (rPCIFIR, bit(7)) ? defaultMaskedError;

    /** PCIFIR[8]
     *  A0LINK_PSR_UNC_ERR
     */
    (rPCIFIR, bit(8)) ? self_th_1;

    /** PCIFIR[9]
     *  
     */
    (rPCIFIR, bit(9)) ? defaultMaskedError;

    /** PCIFIR[10]
     *  A1LINK_PSR_SUE_ERR
     */
    (rPCIFIR, bit(10)) ? defaultMaskedError;

    /** PCIFIR[11]
     *  A1LINK_PSR_UNC_ERR
     */
    (rPCIFIR, bit(11)) ? self_th_1;

    /** PCIFIR[12]
     *  
     */
    (rPCIFIR, bit(12)) ? defaultMaskedError;

    /** PCIFIR[13]
     *  A2LINK_PSR_SUE_ERR
     */
    (rPCIFIR, bit(13)) ? defaultMaskedError;

    /** PCIFIR[14]
     *  A2LINK_PSR_UNC_ERR
     */
    (rPCIFIR, bit(14)) ? self_th_1;

    /** PCIFIR[15]
     *  A0LINK_FMR_COR_ERR_HI
     */
    (rPCIFIR, bit(15)) ? self_th_32perDay;

    /** PCIFIR[16]
     *  A0LINK_FMR_COR_ERR_LO
     */
    (rPCIFIR, bit(16)) ? self_th_32perDay;

    /** PCIFIR[17]
     *  A0LINK_FMR_SUE_ERR_HI
     */
    (rPCIFIR, bit(17)) ? defaultMaskedError;

    /** PCIFIR[18]
     *  A0LINK_FMR_SUE_ERR_LO
     */
    (rPCIFIR, bit(18)) ? defaultMaskedError;

    /** PCIFIR[19]
     *  A0LINK_FMR_UNC_ERR_HI
     */
    (rPCIFIR, bit(19)) ? self_th_1;

    /** PCIFIR[20]
     *  A0LINK_FMR_UNC_ERR_LO
     */
    (rPCIFIR, bit(20)) ? self_th_1;

    /** PCIFIR[21]
     *  A1LINK_FMR_COR_ERR_HI
     */
    (rPCIFIR, bit(21)) ? self_th_32perDay;

    /** PCIFIR[22]
     *  A1LINK_FMR_COR_ERR_LO
     */
    (rPCIFIR, bit(22)) ? self_th_32perDay;

    /** PCIFIR[23]
     *  A1LINK_FMR_SUE_ERR_HI
     */
    (rPCIFIR, bit(23)) ? defaultMaskedError;

    /** PCIFIR[24]
     *  A1LINK_FMR_SUE_ERR_LO
     */
    (rPCIFIR, bit(24)) ? defaultMaskedError;

    /** PCIFIR[25]
     *  A1LINK_FMR_UNC_ERR_HI
     */
    (rPCIFIR, bit(25)) ? self_th_1;

    /** PCIFIR[26]
     *  A1LINK_FMR_UNC_ERR_LO
     */
    (rPCIFIR, bit(26)) ? self_th_1;

    /** PCIFIR[27]
     *  A2LINK_FMR_COR_ERR_HI
     */
    (rPCIFIR, bit(27)) ? self_th_32perDay;

    /** PCIFIR[28]
     *  A2LINK_FMR_COR_ERR_LO
     */
    (rPCIFIR, bit(28)) ? self_th_32perDay;

    /** PCIFIR[29]
     *  A2LINK_FMR_SUE_ERR_HI
     */
    (rPCIFIR, bit(29)) ? defaultMaskedError;

    /** PCIFIR[30]
     *  A2LINK_FMR_SUE_ERR_LO
     */
    (rPCIFIR, bit(30)) ? defaultMaskedError;

    /** PCIFIR[31]
     *  A2LINK_FMR_UNC_ERR_HI
     */
    (rPCIFIR, bit(31)) ? self_th_1;

    /** PCIFIR[32]
     *  A2LINK_FMR_UNC_ERR_LO
     */
    (rPCIFIR, bit(32)) ? self_th_1;

    /** PCIFIR[33]
     *  A0_OBS_CR_OVERFLOW_FIR_ERR
     */
    (rPCIFIR, bit(33)) ? self_th_1;

    /** PCIFIR[34]
     *  A1_OBS_CR_OVERFLOW_FIR_ERR
     */
    (rPCIFIR, bit(34)) ? self_th_1;

    /** PCIFIR[35]
     *  A2_OBS_CR_OVERFLOW_FIR_ERR
     */
    (rPCIFIR, bit(35)) ? self_th_1;

    /** PCIFIR[36]
     *  FIR_SCOM_ERR_DUP
     */
    (rPCIFIR, bit(36)) ? defaultMaskedError;

    /** PCIFIR[37]
     *  FIR_SCOM_ERR
     */
    (rPCIFIR, bit(37)) ? defaultMaskedError;

    /** PCIFIR[38]
     *  SPARE
     */
    (rPCIFIR, bit(38)) ? defaultMaskedError;

    /** PCIFIR[39]
     *  MB11_SPATTN
     */
    (rPCIFIR, bit(39)) ? defaultMaskedError;

    /** PCIFIR[40]
     *  MB20_SPATTN
     */
    (rPCIFIR, bit(40)) ? defaultMaskedError;

    /** PCIFIR[41]
     *  MB21_SPATTN
     */
    (rPCIFIR, bit(41)) ? defaultMaskedError;

    /** PCIFIR[42]
     *  MB30_SPATTN
     */
    (rPCIFIR, bit(42)) ? defaultMaskedError;

    /** PCIFIR[43]
     *  MB31_SPATTN
     */
    (rPCIFIR, bit(43)) ? defaultMaskedError;

    /** PCIFIR[44]
     *  MB40_SPATTN
     */
    (rPCIFIR, bit(44)) ? defaultMaskedError;

    /** PCIFIR[45]
     *  MB41_SPATTN
     */
    (rPCIFIR, bit(45)) ? defaultMaskedError;

    /** PCIFIR[46]
     *  MB50_SPATTN
     */
    (rPCIFIR, bit(46)) ? defaultMaskedError;

    /** PCIFIR[47]
     *  MB51_SPATTN
     */
    (rPCIFIR, bit(47)) ? defaultMaskedError;

    /** PCIFIR[48:51]
     *  spare
     */
    (rPCIFIR, bit(48|49|50|51)) ? defaultMaskedError;

    /** PCIFIR[52]
     *  DOB01_ERR
     */
    (rPCIFIR, bit(52)) ? self_th_1;

    /** PCIFIR[53]
     *  DOB23_ERR
     */
    (rPCIFIR, bit(53)) ? self_th_1;

    /** PCIFIR[54]
     *  DOB45_ERR
     */
    (rPCIFIR, bit(54)) ? self_th_1;

    /** PCIFIR[55]
     *  DIB01_ERR
     */
    (rPCIFIR, bit(55)) ? self_th_1;

    /** PCIFIR[56]
     *  DIB23_ERR
     */
    (rPCIFIR, bit(56)) ? self_th_1;

    /** PCIFIR[57]
     *  DIB45_ERR
     */
    (rPCIFIR, bit(57)) ? self_th_1;

    /** PCIFIR[58]
     *  FIR_SCOM_ERR_DUP
     */
    (rPCIFIR, bit(58)) ? defaultMaskedError;

    /** PCIFIR[59]
     *  FIR_SCOM_ERR
     */
    (rPCIFIR, bit(59)) ? defaultMaskedError;

};

################################################################################
# P9 PHB target ETUFIR
################################################################################

rule rETUFIR
{
  CHECK_STOP:
    ETUFIR & ~ETUFIR_MASK & ~ETUFIR_ACT0 & ~ETUFIR_ACT1;
  RECOVERABLE:
    ETUFIR & ~ETUFIR_MASK & ~ETUFIR_ACT0 &  ETUFIR_ACT1;
};

group gETUFIR filter singlebit
{
    /** ETUFIR[0]
     *  AIB_COMMAND_INVALID
     */
    (rETUFIR, bit(0)) ? defaultMaskedError;

    /** ETUFIR[1]
     *  AIB_ADDRESS_INVALID
     */
    (rETUFIR, bit(1)) ? defaultMaskedError;

    /** ETUFIR[2]
     *  AIB_ACCESS_ERROR
     */
    (rETUFIR, bit(2)) ? defaultMaskedError;

    /** ETUFIR[3]
     *  PAPR_OUTBOUND_INJECT_ERROR
     */
    (rETUFIR, bit(3)) ? defaultMaskedError;

    /** ETUFIR[4]
     *  AIB_FATAL_CLASS_ERROR
     */
    (rETUFIR, bit(4)) ? defaultMaskedError;

    /** ETUFIR[5]
     *  spare
     */
    (rETUFIR, bit(5)) ? defaultMaskedError;

    /** ETUFIR[6]
     *  AIB_INF_CLASS_ERROR
     */
    (rETUFIR, bit(6)) ? defaultMaskedError;

    /** ETUFIR[7]
     *  PE_STOP_STATE_SIGNALED
     */
    (rETUFIR, bit(7)) ? defaultMaskedError;

    /** ETUFIR[8]
     *  OUT_COMMON_ARRAY_FATAL_ERROR
     */
    (rETUFIR, bit(8)) ? defaultMaskedError;

    /** ETUFIR[9]
     *  OUT_COMMON_LATCH_FATAL_ERROR
     */
    (rETUFIR, bit(9)) ? defaultMaskedError;

    /** ETUFIR[10]
     *  OUT_COMMON_LOGIC_FATAL_ERROR
     */
    (rETUFIR, bit(10)) ? defaultMaskedError;

    /** ETUFIR[11]
     *  BLIF_OUT_INTERFACE_PARITY_ERROR
     */
    (rETUFIR, bit(11)) ? defaultMaskedError;

    /** ETUFIR[12]
     *  CFG_WRITE_CA_OR_UR_RESPONSE
     */
    (rETUFIR, bit(12)) ? defaultMaskedError;

    /** ETUFIR[13]
     *  MMIO_REQUEST_TIMEOUT
     */
    (rETUFIR, bit(13)) ? defaultMaskedError;

    /** ETUFIR[14]
     *  OUT_RRB_SOURCED_ERROR
     */
    (rETUFIR, bit(14)) ? defaultMaskedError;

    /** ETUFIR[15]
     *  CFG_LOGIC_SIGNALED_ERROR
     */
    (rETUFIR, bit(15)) ? defaultMaskedError;

    /** ETUFIR[16]
     *  RSB_REG_REQUEST_ADDRESS_ERROR
     */
    (rETUFIR, bit(16)) ? defaultMaskedError;

    /** ETUFIR[17]
     *  RSB_FDA_FATAL_ERROR
     */
    (rETUFIR, bit(17)) ? defaultMaskedError;

    /** ETUFIR[18]
     *  RSB_FDA_INF_ERROR
     */
    (rETUFIR, bit(18)) ? defaultMaskedError;

    /** ETUFIR[19]
     *  RSB_FDB_FATAL_ERROR
     */
    (rETUFIR, bit(19)) ? defaultMaskedError;

    /** ETUFIR[20]
     *  RSB_FDB_INF_ERROR
     */
    (rETUFIR, bit(20)) ? defaultMaskedError;

    /** ETUFIR[21]
     *  RSB_ERR_FATAL_ERROR
     */
    (rETUFIR, bit(21)) ? defaultMaskedError;

    /** ETUFIR[22]
     *  RSB_ERR_INF_ERROR
     */
    (rETUFIR, bit(22)) ? defaultMaskedError;

    /** ETUFIR[23]
     *  RSB_DBG_FATAL_ERROR
     */
    (rETUFIR, bit(23)) ? defaultMaskedError;

    /** ETUFIR[24]
     *  RSB_DBG_INF_ERROR
     */
    (rETUFIR, bit(24)) ? defaultMaskedError;

    /** ETUFIR[25]
     *  PCIE_REQUEST_ACCESS_ERROR
     */
    (rETUFIR, bit(25)) ? defaultMaskedError;

    /** ETUFIR[26]
     *  RSB_BUS_LOGIC_ERROR
     */
    (rETUFIR, bit(26)) ? defaultMaskedError;

    /** ETUFIR[27]
     *  RSB_UVI_FATAL_ERROR
     */
    (rETUFIR, bit(27)) ? defaultMaskedError;

    /** ETUFIR[28]
     *  RSB_UVI_INF_ERROR
     */
    (rETUFIR, bit(28)) ? defaultMaskedError;

    /** ETUFIR[29]
     *  SCOM_FATAL_ERROR
     */
    (rETUFIR, bit(29)) ? defaultMaskedError;

    /** ETUFIR[30]
     *  SCOM_INF_ERROR
     */
    (rETUFIR, bit(30)) ? defaultMaskedError;

    /** ETUFIR[31]
     *  PCIE_MACRO_ERROR_ACTIVE_STATUS
     */
    (rETUFIR, bit(31)) ? defaultMaskedError;

    /** ETUFIR[32]
     *  ARB_IODA_FATAL_ERROR
     */
    (rETUFIR, bit(32)) ? defaultMaskedError;

    /** ETUFIR[33]
     *  ARB_MSI_PE_MATCH_ERROR
     */
    (rETUFIR, bit(33)) ? defaultMaskedError;

    /** ETUFIR[34]
     *  ARB_MSI_ADDRESS_ERROR
     */
    (rETUFIR, bit(34)) ? defaultMaskedError;

    /** ETUFIR[35]
     *  ARB_TVT_ERROR
     */
    (rETUFIR, bit(35)) ? defaultMaskedError;

    /** ETUFIR[36]
     *  ARB_RCVD_FATAL_ERROR_MSG
     */
    (rETUFIR, bit(36)) ? defaultMaskedError;

    /** ETUFIR[37]
     *  ARB_RCVD_NONFATAL_ERROR_MSG
     */
    (rETUFIR, bit(37)) ? defaultMaskedError;

    /** ETUFIR[38]
     *  ARB_RCVD_CORRECTIBLE_ERROR_MSG
     */
    (rETUFIR, bit(38)) ? defaultMaskedError;

    /** ETUFIR[39]
     *  PAPR_INBOUND_INJECT_ERROR
     */
    (rETUFIR, bit(39)) ? defaultMaskedError;

    /** ETUFIR[40]
     *  ARB_COMMON_FATAL_ERROR
     */
    (rETUFIR, bit(40)) ? defaultMaskedError;

    /** ETUFIR[41]
     *  ARB_TABLE_BAR_DISABLED_ERROR
     */
    (rETUFIR, bit(41)) ? defaultMaskedError;

    /** ETUFIR[42]
     *  ARB_BLIF_COMPLETION_ERROR
     */
    (rETUFIR, bit(42)) ? defaultMaskedError;

    /** ETUFIR[43]
     *  ARB_PCT_TIMEOUT_ERROR
     */
    (rETUFIR, bit(43)) ? defaultMaskedError;

    /** ETUFIR[44]
     *  ARB_ECC_CORRECTABLE_ERROR
     */
    (rETUFIR, bit(44)) ? defaultMaskedError;

    /** ETUFIR[45]
     *  ARB_ECC_UNCORRECTABLE_ERROR
     */
    (rETUFIR, bit(45)) ? defaultMaskedError;

    /** ETUFIR[46]
     *  ARB_TLP_POISON_SIGNALED
     */
    (rETUFIR, bit(46)) ? defaultMaskedError;

    /** ETUFIR[47]
     *  ARB_RTT_PENUM_INVALID_ERROR
     */
    (rETUFIR, bit(47)) ? defaultMaskedError;

    /** ETUFIR[48]
     *  MRG_COMMON_FATAL_ERROR
     */
    (rETUFIR, bit(48)) ? defaultMaskedError;

    /** ETUFIR[49]
     *  MRG_TABLE_BAR_DISABLED_ERROR
     */
    (rETUFIR, bit(49)) ? defaultMaskedError;

    /** ETUFIR[50]
     *  MRG_ECC_CORRECTABLE_ERROR
     */
    (rETUFIR, bit(50)) ? defaultMaskedError;

    /** ETUFIR[51]
     *  MRG_ECC_UNCORRECTABLE_ERROR
     */
    (rETUFIR, bit(51)) ? defaultMaskedError;

    /** ETUFIR[52]
     *  MRG_AIB2_TX_TIMEOUT_ERROR
     */
    (rETUFIR, bit(52)) ? defaultMaskedError;

    /** ETUFIR[53]
     *  MRG_MRT_ERROR
     */
    (rETUFIR, bit(53)) ? defaultMaskedError;

    /** ETUFIR[54:55]
     *  spare
     */
    (rETUFIR, bit(54|55)) ? defaultMaskedError;

    /** ETUFIR[56]
     *  TCE_IODA_PAGE_ACCESS_ERROR
     */
    (rETUFIR, bit(56)) ? defaultMaskedError;

    /** ETUFIR[57]
     *  TCE_REQUEST_TIMEOUT_ERROR
     */
    (rETUFIR, bit(57)) ? defaultMaskedError;

    /** ETUFIR[58]
     *  TCE_UNEXPECTED_RESPONSE_ERROR
     */
    (rETUFIR, bit(58)) ? defaultMaskedError;

    /** ETUFIR[59]
     *  TCE_COMMON_FATAL_ERROR
     */
    (rETUFIR, bit(59)) ? defaultMaskedError;

    /** ETUFIR[60]
     *  TCE_ECC_CORRECTABLE_ERROR
     */
    (rETUFIR, bit(60)) ? defaultMaskedError;

    /** ETUFIR[61]
     *  TCE_ECC_UNCORRECTABLE_ERROR
     */
    (rETUFIR, bit(61)) ? defaultMaskedError;

    /** ETUFIR[62]
     *  spare
     */
    (rETUFIR, bit(62)) ? defaultMaskedError;

    /** ETUFIR[63]
     *  FIR_INTERNAL_PARITY_ERROR
     */
    (rETUFIR, bit(63)) ? defaultMaskedError;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the common action set.
.include "p9_common_actions.rule";
# Include the chip-specific action set.
.include "p9_phb_actions.rule";

