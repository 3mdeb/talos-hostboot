# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_capp.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p9_capp
{
    name        "P9 CAPP chiplet";
    targettype  TYPE_CAPP;
    sigoff      0x9000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P9 CAPP target CXAFIR
    ############################################################################

    register CXAFIR
    {
        name        "P9 CAPP target CXAFIR";
        scomaddr    0x02010800;
        reset       (&, 0x02010801);
        mask        (|, 0x02010805);
        capture     group default;
    };

    register CXAFIR_MASK
    {
        name        "P9 CAPP target CXAFIR MASK";
        scomaddr    0x02010803;
        capture     group default;
    };

    register CXAFIR_ACT0
    {
        name        "P9 CAPP target CXAFIR ACT0";
        scomaddr    0x02010806;
        capture     group default;
        capture     req nonzero("CXAFIR");
    };

    register CXAFIR_ACT1
    {
        name        "P9 CAPP target CXAFIR ACT1";
        scomaddr    0x02010807;
        capture     group default;
        capture     req nonzero("CXAFIR");
    };

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for CAPP
################################################################################

rule rCAPP
{
  CHECK_STOP:
    summary( 0, rCXAFIR );

  RECOVERABLE:
    summary( 0, rCXAFIR );

  UNIT_CS:
    summary( 0, rCXAFIR );

};

group gCAPP attntype CHECK_STOP, RECOVERABLE, UNIT_CS
{
    (rCAPP, bit(0)) ? analyze(gCXAFIR);
};

################################################################################
# P9 CAPP target CXAFIR
################################################################################

rule rCXAFIR
{
  CHECK_STOP:
    CXAFIR & ~CXAFIR_MASK & ~CXAFIR_ACT0 & ~CXAFIR_ACT1;
  RECOVERABLE:
    CXAFIR & ~CXAFIR_MASK & ~CXAFIR_ACT0 &  CXAFIR_ACT1;
  UNIT_CS:
    CXAFIR & ~CXAFIR_MASK &  CXAFIR_ACT0 &  CXAFIR_ACT1;
};

group gCXAFIR filter singlebit
{
    /** CXAFIR[0]
     *  
     */
    (rCXAFIR, bit(0)) ? TBDDefaultCallout;

    /** CXAFIR[1]
     *  
     */
    (rCXAFIR, bit(1)) ? TBDDefaultCallout;

    /** CXAFIR[2]
     *  
     */
    (rCXAFIR, bit(2)) ? TBDDefaultCallout;

    /** CXAFIR[3]
     *  
     */
    (rCXAFIR, bit(3)) ? TBDDefaultCallout;

    /** CXAFIR[4]
     *  
     */
    (rCXAFIR, bit(4)) ? TBDDefaultCallout;

    /** CXAFIR[5]
     *  
     */
    (rCXAFIR, bit(5)) ? TBDDefaultCallout;

    /** CXAFIR[6]
     *  
     */
    (rCXAFIR, bit(6)) ? TBDDefaultCallout;

    /** CXAFIR[7]
     *  
     */
    (rCXAFIR, bit(7)) ? TBDDefaultCallout;

    /** CXAFIR[8]
     *  
     */
    (rCXAFIR, bit(8)) ? TBDDefaultCallout;

    /** CXAFIR[9]
     *  
     */
    (rCXAFIR, bit(9)) ? TBDDefaultCallout;

    /** CXAFIR[10]
     *  
     */
    (rCXAFIR, bit(10)) ? TBDDefaultCallout;

    /** CXAFIR[11]
     *  
     */
    (rCXAFIR, bit(11)) ? TBDDefaultCallout;

    /** CXAFIR[12]
     *  
     */
    (rCXAFIR, bit(12)) ? TBDDefaultCallout;

    /** CXAFIR[13]
     *  
     */
    (rCXAFIR, bit(13)) ? TBDDefaultCallout;

    /** CXAFIR[14]
     *  
     */
    (rCXAFIR, bit(14)) ? TBDDefaultCallout;

    /** CXAFIR[15]
     *  
     */
    (rCXAFIR, bit(15)) ? TBDDefaultCallout;

    /** CXAFIR[16]
     *  
     */
    (rCXAFIR, bit(16)) ? TBDDefaultCallout;

    /** CXAFIR[17]
     *  
     */
    (rCXAFIR, bit(17)) ? TBDDefaultCallout;

    /** CXAFIR[18]
     *  
     */
    (rCXAFIR, bit(18)) ? TBDDefaultCallout;

    /** CXAFIR[19]
     *  
     */
    (rCXAFIR, bit(19)) ? TBDDefaultCallout;

    /** CXAFIR[20]
     *  
     */
    (rCXAFIR, bit(20)) ? TBDDefaultCallout;

    /** CXAFIR[21]
     *  
     */
    (rCXAFIR, bit(21)) ? TBDDefaultCallout;

    /** CXAFIR[22]
     *  
     */
    (rCXAFIR, bit(22)) ? TBDDefaultCallout;

    /** CXAFIR[23]
     *  
     */
    (rCXAFIR, bit(23)) ? TBDDefaultCallout;

    /** CXAFIR[24]
     *  
     */
    (rCXAFIR, bit(24)) ? TBDDefaultCallout;

    /** CXAFIR[25]
     *  
     */
    (rCXAFIR, bit(25)) ? TBDDefaultCallout;

    /** CXAFIR[26]
     *  
     */
    (rCXAFIR, bit(26)) ? TBDDefaultCallout;

    /** CXAFIR[27]
     *  
     */
    (rCXAFIR, bit(27)) ? TBDDefaultCallout;

    /** CXAFIR[28]
     *  
     */
    (rCXAFIR, bit(28)) ? TBDDefaultCallout;

    /** CXAFIR[29]
     *  
     */
    (rCXAFIR, bit(29)) ? TBDDefaultCallout;

    /** CXAFIR[30]
     *  
     */
    (rCXAFIR, bit(30)) ? TBDDefaultCallout;

    /** CXAFIR[31]
     *  
     */
    (rCXAFIR, bit(31)) ? TBDDefaultCallout;

    /** CXAFIR[32]
     *  
     */
    (rCXAFIR, bit(32)) ? TBDDefaultCallout;

    /** CXAFIR[33]
     *  
     */
    (rCXAFIR, bit(33)) ? TBDDefaultCallout;

    /** CXAFIR[34]
     *  
     */
    (rCXAFIR, bit(34)) ? TBDDefaultCallout;

    /** CXAFIR[35]
     *  
     */
    (rCXAFIR, bit(35)) ? TBDDefaultCallout;

    /** CXAFIR[36]
     *  
     */
    (rCXAFIR, bit(36)) ? TBDDefaultCallout;

    /** CXAFIR[37]
     *  
     */
    (rCXAFIR, bit(37)) ? TBDDefaultCallout;

    /** CXAFIR[38]
     *  
     */
    (rCXAFIR, bit(38)) ? TBDDefaultCallout;

    /** CXAFIR[39]
     *  
     */
    (rCXAFIR, bit(39)) ? TBDDefaultCallout;

    /** CXAFIR[40]
     *  
     */
    (rCXAFIR, bit(40)) ? TBDDefaultCallout;

    /** CXAFIR[41]
     *  
     */
    (rCXAFIR, bit(41)) ? TBDDefaultCallout;

    /** CXAFIR[42]
     *  
     */
    (rCXAFIR, bit(42)) ? TBDDefaultCallout;

    /** CXAFIR[43]
     *  
     */
    (rCXAFIR, bit(43)) ? TBDDefaultCallout;

    /** CXAFIR[44]
     *  
     */
    (rCXAFIR, bit(44)) ? TBDDefaultCallout;

    /** CXAFIR[45]
     *  
     */
    (rCXAFIR, bit(45)) ? TBDDefaultCallout;

    /** CXAFIR[46]
     *  
     */
    (rCXAFIR, bit(46)) ? TBDDefaultCallout;

    /** CXAFIR[47]
     *  
     */
    (rCXAFIR, bit(47)) ? TBDDefaultCallout;

    /** CXAFIR[48]
     *  
     */
    (rCXAFIR, bit(48)) ? TBDDefaultCallout;

    /** CXAFIR[49]
     *  
     */
    (rCXAFIR, bit(49)) ? TBDDefaultCallout;

    /** CXAFIR[50]
     *  
     */
    (rCXAFIR, bit(50)) ? TBDDefaultCallout;

    /** CXAFIR[51]
     *  
     */
    (rCXAFIR, bit(51)) ? TBDDefaultCallout;

    /** CXAFIR[52]
     *  
     */
    (rCXAFIR, bit(52)) ? TBDDefaultCallout;

    /** CXAFIR[53]
     *  
     */
    (rCXAFIR, bit(53)) ? TBDDefaultCallout;

    /** CXAFIR[54]
     *  
     */
    (rCXAFIR, bit(54)) ? TBDDefaultCallout;

    /** CXAFIR[55]
     *  
     */
    (rCXAFIR, bit(55)) ? TBDDefaultCallout;

    /** CXAFIR[56]
     *  
     */
    (rCXAFIR, bit(56)) ? TBDDefaultCallout;

    /** CXAFIR[57]
     *  
     */
    (rCXAFIR, bit(57)) ? TBDDefaultCallout;

    /** CXAFIR[58]
     *  
     */
    (rCXAFIR, bit(58)) ? TBDDefaultCallout;

    /** CXAFIR[59]
     *  
     */
    (rCXAFIR, bit(59)) ? TBDDefaultCallout;

    /** CXAFIR[60]
     *  
     */
    (rCXAFIR, bit(60)) ? TBDDefaultCallout;

    /** CXAFIR[61]
     *  
     */
    (rCXAFIR, bit(61)) ? TBDDefaultCallout;

    /** CXAFIR[62]
     *  
     */
    (rCXAFIR, bit(62)) ? TBDDefaultCallout;

    /** CXAFIR[63]
     *  
     */
    (rCXAFIR, bit(63)) ? TBDDefaultCallout;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the common action set.
.include "p9_common_actions.rule";

