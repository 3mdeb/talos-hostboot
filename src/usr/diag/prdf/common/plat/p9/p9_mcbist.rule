# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_mcbist.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p9_mcbist
{
    name        "P9 MCBIST chiplet";
    targettype  TYPE_MCBIST;
    sigoff      0x9000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

.include "prdfMemExtraSig.H";

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P9 MCBIST target MCBISTFIR
    ############################################################################

    register MCBISTFIR
    {
        name        "P9 MCBIST target MCBISTFIR";
        scomaddr    0x07012300;
        reset       (&, 0x07012301);
        mask        (|, 0x07012305);
        capture     group default;
    };

    register MCBISTFIR_MASK
    {
        name        "P9 MCBIST target MCBISTFIR MASK";
        scomaddr    0x07012303;
        capture     group default;
    };

    register MCBISTFIR_ACT0
    {
        name        "P9 MCBIST target MCBISTFIR ACT0";
        scomaddr    0x07012306;
        capture     group default;
        capture     req nonzero("MCBISTFIR");
    };

    register MCBISTFIR_ACT1
    {
        name        "P9 MCBIST target MCBISTFIR ACT1";
        scomaddr    0x07012307;
        capture     group default;
        capture     req nonzero("MCBISTFIR");
    };


# Include registers not defined by the xml
.include "p9_mcbist_regs.rule";

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for MCBIST
################################################################################

rule rMCBIST
{
  CHECK_STOP:
    summary( 0, rMCBISTFIR );

  RECOVERABLE:
    summary( 0, rMCBISTFIR );

  UNIT_CS:
    summary( 0, rMCBISTFIR );

  HOST_ATTN:
    summary( 0, rMCBISTFIR );

};

group gMCBIST attntype CHECK_STOP, RECOVERABLE, UNIT_CS, HOST_ATTN
{
    (rMCBIST, bit(0)) ? analyze(gMCBISTFIR);
};

################################################################################
# P9 MCBIST target MCBISTFIR
################################################################################

rule rMCBISTFIR
{
  CHECK_STOP:
    MCBISTFIR & ~MCBISTFIR_MASK & ~MCBISTFIR_ACT0 & ~MCBISTFIR_ACT1;
  RECOVERABLE:
    MCBISTFIR & ~MCBISTFIR_MASK & ~MCBISTFIR_ACT0 &  MCBISTFIR_ACT1;
  HOST_ATTN:
    MCBISTFIR & ~MCBISTFIR_MASK &  MCBISTFIR_ACT0 & ~MCBISTFIR_ACT1;
  UNIT_CS:
    MCBISTFIR & ~MCBISTFIR_MASK &  MCBISTFIR_ACT0 &  MCBISTFIR_ACT1;
};

group gMCBISTFIR filter singlebit
{
    /** MCBISTFIR[0]
     *  INVALID_MAINT_ADDRESS
     */
    (rMCBISTFIR, bit(0)) ? defaultMaskedError;

    /** MCBISTFIR[1]
     *  
     */
    (rMCBISTFIR, bit(1)) ? defaultMaskedError;

    /** MCBISTFIR[2]
     *  INTERNAL_FSM_ERROR
     */
    (rMCBISTFIR, bit(2)) ? self_th_1;

    /** MCBISTFIR[3]
     *  MCBIST_BRODCAST_OUT_OF_SYNC
     */
    (rMCBISTFIR, bit(3)) ? self_th_1;

    /** MCBISTFIR[4]
     *  MCBIST_DATA_ERROR
     */
    (rMCBISTFIR, bit(4)) ? defaultMaskedError;

    /** MCBISTFIR[5]
     *  Maintenance hard NCE ETE
     */
    (rMCBISTFIR, bit(5)) ? defaultMaskedError;

    /** MCBISTFIR[6]
     *  Maintenance soft NCE ETE
     */
    (rMCBISTFIR, bit(6)) ? defaultMaskedError;

    /** MCBISTFIR[7]
     *  Maintenance intermittent NCE ETE
     */
    (rMCBISTFIR, bit(7)) ? defaultMaskedError;

    /** MCBISTFIR[8]
     *  Maintenance RCE ETE
     */
    (rMCBISTFIR, bit(8)) ? defaultMaskedError;

    /** MCBISTFIR[9]
     *  Maintenance IMPE ETE
     */
    (rMCBISTFIR, bit(9)) ? defaultMaskedError;

    /** MCBISTFIR[10]
     *  MCBIST program complete
     */
    (rMCBISTFIR, bit(10)) ? mcbist_program_complete;

    /** MCBISTFIR[11]
     *  MCBIST_CCS_SUBTEST_DONE
     */
    (rMCBISTFIR, bit(11)) ? defaultMaskedError;

    /** MCBISTFIR[12]
     *  MCBIST program complete - WAT workaround
     */
    (rMCBISTFIR, bit(12)) ? mcbist_program_complete_workaround;

    /** MCBISTFIR[10,12]
     *  MCBIST Command Complete
     */
    (rMCBISTFIR, bit(10,12)) ? mcbist_program_complete;

    /** MCBISTFIR[13]
     *  SCOM_RECOVERABLE_REG_PE
     */
    (rMCBISTFIR, bit(13)) ? self_th_1;

    /** MCBISTFIR[14]
     *  SCOM_FATAL_REG_PE
     */
    (rMCBISTFIR, bit(14)) ? self_th_1;

    /** MCBISTFIR[15]
     *  WAT_DEBUG_REG_PE
     */
    (rMCBISTFIR, bit(15)) ? defaultMaskedError;

    /** MCBISTFIR[16:17]
     *  spare
     */
    (rMCBISTFIR, bit(16|17)) ? defaultMaskedError;

    /** MCBISTFIR[18]
     *  INTERNAL_SCOM_ERROR
     */
    (rMCBISTFIR, bit(18)) ? threshold_and_mask;

    /** MCBISTFIR[19]
     *  INTERNAL_SCOM_ERROR_CLONE
     */
    (rMCBISTFIR, bit(19)) ? threshold_and_mask;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the common action set.
.include "p9_common_actions.rule";
# Include the chip-specific action set.
.include "p9_mcbist_actions.rule";

