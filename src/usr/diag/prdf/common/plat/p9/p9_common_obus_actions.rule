# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_common_obus_actions.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2018
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

actionclass smpCallout0
{
    funccall("obus_callout_L0");
};

actionclass smpCallout1
{
    funccall("obus_callout_L1");
};

actionclass smpCableFail0
{
    funccall("obus_fail_L0");
};

actionclass smpCableFail1
{
    funccall("obus_fail_L1");
};

/** OBUS targets for IOOLFIR handling **/
actionclass obusSmpCallout_th32_L0
{
    capture(smpCableFFDC);
    smpCallout0;
    threshold32pday;
};

actionclass obusSmpCallout_th32_L1
{
    capture(smpCableFFDC);
    smpCallout1;
    threshold32pday;
};

actionclass obusSmpCallout_L0
{
    capture(smpCableFFDC);
    smpCallout0;
    threshold1;
};

actionclass obusSmpCallout_L1
{
    capture(smpCableFFDC);
    smpCallout1;
    threshold1;
};

actionclass obusSmpFailure_L0
{
    capture(smpCableFFDC);
    smpCallout0;
    smpCableFail0;
    threshold1;
};

actionclass obusSmpFailure_L1
{
    capture(smpCableFFDC);
    smpCallout1;
    smpCableFail1;
    threshold1;
};

###############################################################################
# Analyze groups
###############################################################################

actionclass analyzeOB_LFIR  { analyze(gOB_LFIR);  };
actionclass analyzeIOOLFIR  { analyze(gIOOLFIR);  };
actionclass analyzeIOOBFIR  { analyze(gIOOBFIR);  };
actionclass analyzeOBPPEFIR { analyze(gOBPPEFIR); };

