# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/usr/diag/prdf/common/plat/p9/p9_xbus.rule $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

chip p9_xbus
{
    name        "P9 XBUS chiplet";
    targettype  TYPE_XBUS;
    sigoff      0x9000;
    dump        DUMP_CONTENT_HW;
    scomlen     64;

 #############################################################################
 #                                                                           #
 #  ######                                                                   #
 #  #     #  ######   ####     ###    ####    #####  ######  #####    ####   #
 #  #     #  #       #    #     #    #          #    #       #    #  #       #
 #  ######   #####   #          #     ####      #    #####   #    #   ####   #
 #  #   #    #       #  ###     #         #     #    #       #####        #  #
 #  #    #   #       #    #     #    #    #     #    #       #   #   #    #  #
 #  #     #  ######   ####     ###    ####      #    ######  #    #   ####   #
 #                                                                           #
 #############################################################################

    ############################################################################
    # P9 XBUS target IOXBFIR
    ############################################################################

    register IOXBFIR
    {
        name        "P9 XBUS target IOXBFIR";
        scomaddr    0x06010c00;
        reset       (&, 0x06010c01);
        mask        (|, 0x06010c05);
        capture     group default;
    };

    register IOXBFIR_MASK
    {
        name        "P9 XBUS target IOXBFIR MASK";
        scomaddr    0x06010c03;
        capture     group default;
    };

    register IOXBFIR_ACT0
    {
        name        "P9 XBUS target IOXBFIR ACT0";
        scomaddr    0x06010c06;
        capture     group default;
        capture     req nonzero("IOXBFIR");
    };

    register IOXBFIR_ACT1
    {
        name        "P9 XBUS target IOXBFIR ACT1";
        scomaddr    0x06010c07;
        capture     group default;
        capture     req nonzero("IOXBFIR");
    };

    ############################################################################
    # P9 XBUS target IOELFIR
    ############################################################################

    register IOELFIR
    {
        name        "P9 XBUS target IOELFIR";
        scomaddr    0x06011800;
        reset       (&, 0x06011801);
        mask        (|, 0x06011805);
        capture     group default;
    };

    register IOELFIR_MASK
    {
        name        "P9 XBUS target IOELFIR MASK";
        scomaddr    0x06011803;
        capture     group default;
    };

    register IOELFIR_ACT0
    {
        name        "P9 XBUS target IOELFIR ACT0";
        scomaddr    0x06011806;
        capture     group default;
        capture     req nonzero("IOELFIR");
    };

    register IOELFIR_ACT1
    {
        name        "P9 XBUS target IOELFIR ACT1";
        scomaddr    0x06011807;
        capture     group default;
        capture     req nonzero("IOELFIR");
    };

};

 ##############################################################################
 #                                                                            #
 # ####                                 #                                     #
 # #   # #   # #    #####  ###      #  # #    ##  ##### ###  ###  #   #  ###  #
 # #   # #   # #    #     #        #  #   #  #  #   #    #  #   # ##  # #     #
 # ####  #   # #    ####   ###    #  ####### #      #    #  #   # # # #  ###  #
 # #  #  #   # #    #         #  #   #     # #  #   #    #  #   # #  ##     # #
 # #   #  ###  #### #####  ###  #    #     #  ##    #   ###  ###  #   #  ###  #
 #                                                                            #
 ##############################################################################

################################################################################
# Summary for XBUS
################################################################################

rule rXBUS
{
  CHECK_STOP:
    summary( 0, rIOXBFIR ) |
    summary( 1, rIOELFIR );

  RECOVERABLE:
    summary( 0, rIOXBFIR ) |
    summary( 1, rIOELFIR );

  UNIT_CS:
    summary( 0, rIOXBFIR ) |
    summary( 1, rIOELFIR );

};

group gXBUS attntype CHECK_STOP, RECOVERABLE, UNIT_CS
{
    (rXBUS, bit(0)) ? analyze(gIOXBFIR);
    (rXBUS, bit(1)) ? analyze(gIOELFIR);
};

################################################################################
# P9 XBUS target IOXBFIR
################################################################################

rule rIOXBFIR
{
  CHECK_STOP:
    IOXBFIR & ~IOXBFIR_MASK & ~IOXBFIR_ACT0 & ~IOXBFIR_ACT1;
  RECOVERABLE:
    IOXBFIR & ~IOXBFIR_MASK & ~IOXBFIR_ACT0 &  IOXBFIR_ACT1;
  UNIT_CS:
    IOXBFIR & ~IOXBFIR_MASK &  IOXBFIR_ACT0 &  IOXBFIR_ACT1;
};

group gIOXBFIR filter singlebit
{
    /** IOXBFIR[0]
     *  
     */
    (rIOXBFIR, bit(0)) ? TBDDefaultCallout;

    /** IOXBFIR[1]
     *  
     */
    (rIOXBFIR, bit(1)) ? TBDDefaultCallout;

    /** IOXBFIR[2]
     *  
     */
    (rIOXBFIR, bit(2)) ? TBDDefaultCallout;

    /** IOXBFIR[3]
     *  
     */
    (rIOXBFIR, bit(3)) ? TBDDefaultCallout;

    /** IOXBFIR[4]
     *  
     */
    (rIOXBFIR, bit(4)) ? TBDDefaultCallout;

    /** IOXBFIR[5]
     *  
     */
    (rIOXBFIR, bit(5)) ? TBDDefaultCallout;

    /** IOXBFIR[6]
     *  
     */
    (rIOXBFIR, bit(6)) ? TBDDefaultCallout;

    /** IOXBFIR[7]
     *  
     */
    (rIOXBFIR, bit(7)) ? TBDDefaultCallout;

    /** IOXBFIR[8]
     *  
     */
    (rIOXBFIR, bit(8)) ? TBDDefaultCallout;

    /** IOXBFIR[9]
     *  
     */
    (rIOXBFIR, bit(9)) ? TBDDefaultCallout;

    /** IOXBFIR[10]
     *  
     */
    (rIOXBFIR, bit(10)) ? TBDDefaultCallout;

    /** IOXBFIR[11]
     *  
     */
    (rIOXBFIR, bit(11)) ? TBDDefaultCallout;

    /** IOXBFIR[12]
     *  
     */
    (rIOXBFIR, bit(12)) ? TBDDefaultCallout;

    /** IOXBFIR[13]
     *  
     */
    (rIOXBFIR, bit(13)) ? TBDDefaultCallout;

    /** IOXBFIR[14]
     *  
     */
    (rIOXBFIR, bit(14)) ? TBDDefaultCallout;

    /** IOXBFIR[15]
     *  
     */
    (rIOXBFIR, bit(15)) ? TBDDefaultCallout;

    /** IOXBFIR[16]
     *  
     */
    (rIOXBFIR, bit(16)) ? TBDDefaultCallout;

    /** IOXBFIR[17]
     *  
     */
    (rIOXBFIR, bit(17)) ? TBDDefaultCallout;

    /** IOXBFIR[18]
     *  
     */
    (rIOXBFIR, bit(18)) ? TBDDefaultCallout;

    /** IOXBFIR[19]
     *  
     */
    (rIOXBFIR, bit(19)) ? TBDDefaultCallout;

    /** IOXBFIR[20]
     *  
     */
    (rIOXBFIR, bit(20)) ? TBDDefaultCallout;

    /** IOXBFIR[21]
     *  
     */
    (rIOXBFIR, bit(21)) ? TBDDefaultCallout;

    /** IOXBFIR[22]
     *  
     */
    (rIOXBFIR, bit(22)) ? TBDDefaultCallout;

    /** IOXBFIR[23]
     *  
     */
    (rIOXBFIR, bit(23)) ? TBDDefaultCallout;

    /** IOXBFIR[24]
     *  
     */
    (rIOXBFIR, bit(24)) ? TBDDefaultCallout;

    /** IOXBFIR[25]
     *  
     */
    (rIOXBFIR, bit(25)) ? TBDDefaultCallout;

    /** IOXBFIR[26]
     *  
     */
    (rIOXBFIR, bit(26)) ? TBDDefaultCallout;

    /** IOXBFIR[27]
     *  
     */
    (rIOXBFIR, bit(27)) ? TBDDefaultCallout;

    /** IOXBFIR[28]
     *  
     */
    (rIOXBFIR, bit(28)) ? TBDDefaultCallout;

    /** IOXBFIR[29]
     *  
     */
    (rIOXBFIR, bit(29)) ? TBDDefaultCallout;

    /** IOXBFIR[30]
     *  
     */
    (rIOXBFIR, bit(30)) ? TBDDefaultCallout;

    /** IOXBFIR[31]
     *  
     */
    (rIOXBFIR, bit(31)) ? TBDDefaultCallout;

    /** IOXBFIR[32]
     *  
     */
    (rIOXBFIR, bit(32)) ? TBDDefaultCallout;

    /** IOXBFIR[33]
     *  
     */
    (rIOXBFIR, bit(33)) ? TBDDefaultCallout;

    /** IOXBFIR[34]
     *  
     */
    (rIOXBFIR, bit(34)) ? TBDDefaultCallout;

    /** IOXBFIR[35]
     *  
     */
    (rIOXBFIR, bit(35)) ? TBDDefaultCallout;

    /** IOXBFIR[36]
     *  
     */
    (rIOXBFIR, bit(36)) ? TBDDefaultCallout;

    /** IOXBFIR[37]
     *  
     */
    (rIOXBFIR, bit(37)) ? TBDDefaultCallout;

    /** IOXBFIR[38]
     *  
     */
    (rIOXBFIR, bit(38)) ? TBDDefaultCallout;

    /** IOXBFIR[39]
     *  
     */
    (rIOXBFIR, bit(39)) ? TBDDefaultCallout;

    /** IOXBFIR[40]
     *  
     */
    (rIOXBFIR, bit(40)) ? TBDDefaultCallout;

    /** IOXBFIR[41]
     *  
     */
    (rIOXBFIR, bit(41)) ? TBDDefaultCallout;

    /** IOXBFIR[42]
     *  
     */
    (rIOXBFIR, bit(42)) ? TBDDefaultCallout;

    /** IOXBFIR[43]
     *  
     */
    (rIOXBFIR, bit(43)) ? TBDDefaultCallout;

    /** IOXBFIR[44]
     *  
     */
    (rIOXBFIR, bit(44)) ? TBDDefaultCallout;

    /** IOXBFIR[45]
     *  
     */
    (rIOXBFIR, bit(45)) ? TBDDefaultCallout;

    /** IOXBFIR[46]
     *  
     */
    (rIOXBFIR, bit(46)) ? TBDDefaultCallout;

    /** IOXBFIR[47]
     *  
     */
    (rIOXBFIR, bit(47)) ? TBDDefaultCallout;

    /** IOXBFIR[48]
     *  
     */
    (rIOXBFIR, bit(48)) ? TBDDefaultCallout;

    /** IOXBFIR[49]
     *  
     */
    (rIOXBFIR, bit(49)) ? TBDDefaultCallout;

    /** IOXBFIR[50]
     *  
     */
    (rIOXBFIR, bit(50)) ? TBDDefaultCallout;

    /** IOXBFIR[51]
     *  
     */
    (rIOXBFIR, bit(51)) ? TBDDefaultCallout;

    /** IOXBFIR[52]
     *  
     */
    (rIOXBFIR, bit(52)) ? TBDDefaultCallout;

    /** IOXBFIR[53]
     *  
     */
    (rIOXBFIR, bit(53)) ? TBDDefaultCallout;

    /** IOXBFIR[54]
     *  
     */
    (rIOXBFIR, bit(54)) ? TBDDefaultCallout;

    /** IOXBFIR[55]
     *  
     */
    (rIOXBFIR, bit(55)) ? TBDDefaultCallout;

    /** IOXBFIR[56]
     *  
     */
    (rIOXBFIR, bit(56)) ? TBDDefaultCallout;

    /** IOXBFIR[57]
     *  
     */
    (rIOXBFIR, bit(57)) ? TBDDefaultCallout;

    /** IOXBFIR[58]
     *  
     */
    (rIOXBFIR, bit(58)) ? TBDDefaultCallout;

    /** IOXBFIR[59]
     *  
     */
    (rIOXBFIR, bit(59)) ? TBDDefaultCallout;

    /** IOXBFIR[60]
     *  
     */
    (rIOXBFIR, bit(60)) ? TBDDefaultCallout;

    /** IOXBFIR[61]
     *  
     */
    (rIOXBFIR, bit(61)) ? TBDDefaultCallout;

    /** IOXBFIR[62]
     *  
     */
    (rIOXBFIR, bit(62)) ? TBDDefaultCallout;

    /** IOXBFIR[63]
     *  
     */
    (rIOXBFIR, bit(63)) ? TBDDefaultCallout;

};

################################################################################
# P9 XBUS target IOELFIR
################################################################################

rule rIOELFIR
{
  CHECK_STOP:
    IOELFIR & ~IOELFIR_MASK & ~IOELFIR_ACT0 & ~IOELFIR_ACT1;
  RECOVERABLE:
    IOELFIR & ~IOELFIR_MASK & ~IOELFIR_ACT0 &  IOELFIR_ACT1;
  UNIT_CS:
    IOELFIR & ~IOELFIR_MASK &  IOELFIR_ACT0 &  IOELFIR_ACT1;
};

group gIOELFIR filter singlebit
{
    /** IOELFIR[0]
     *  
     */
    (rIOELFIR, bit(0)) ? TBDDefaultCallout;

    /** IOELFIR[1]
     *  
     */
    (rIOELFIR, bit(1)) ? TBDDefaultCallout;

    /** IOELFIR[2]
     *  
     */
    (rIOELFIR, bit(2)) ? TBDDefaultCallout;

    /** IOELFIR[3]
     *  
     */
    (rIOELFIR, bit(3)) ? TBDDefaultCallout;

    /** IOELFIR[4]
     *  
     */
    (rIOELFIR, bit(4)) ? TBDDefaultCallout;

    /** IOELFIR[5]
     *  
     */
    (rIOELFIR, bit(5)) ? TBDDefaultCallout;

    /** IOELFIR[6]
     *  
     */
    (rIOELFIR, bit(6)) ? TBDDefaultCallout;

    /** IOELFIR[7]
     *  
     */
    (rIOELFIR, bit(7)) ? TBDDefaultCallout;

    /** IOELFIR[8]
     *  
     */
    (rIOELFIR, bit(8)) ? TBDDefaultCallout;

    /** IOELFIR[9]
     *  
     */
    (rIOELFIR, bit(9)) ? TBDDefaultCallout;

    /** IOELFIR[10]
     *  
     */
    (rIOELFIR, bit(10)) ? TBDDefaultCallout;

    /** IOELFIR[11]
     *  
     */
    (rIOELFIR, bit(11)) ? TBDDefaultCallout;

    /** IOELFIR[12]
     *  
     */
    (rIOELFIR, bit(12)) ? TBDDefaultCallout;

    /** IOELFIR[13]
     *  
     */
    (rIOELFIR, bit(13)) ? TBDDefaultCallout;

    /** IOELFIR[14]
     *  
     */
    (rIOELFIR, bit(14)) ? TBDDefaultCallout;

    /** IOELFIR[15]
     *  
     */
    (rIOELFIR, bit(15)) ? TBDDefaultCallout;

    /** IOELFIR[16]
     *  
     */
    (rIOELFIR, bit(16)) ? TBDDefaultCallout;

    /** IOELFIR[17]
     *  
     */
    (rIOELFIR, bit(17)) ? TBDDefaultCallout;

    /** IOELFIR[18]
     *  
     */
    (rIOELFIR, bit(18)) ? TBDDefaultCallout;

    /** IOELFIR[19]
     *  
     */
    (rIOELFIR, bit(19)) ? TBDDefaultCallout;

    /** IOELFIR[20]
     *  
     */
    (rIOELFIR, bit(20)) ? TBDDefaultCallout;

    /** IOELFIR[21]
     *  
     */
    (rIOELFIR, bit(21)) ? TBDDefaultCallout;

    /** IOELFIR[22]
     *  
     */
    (rIOELFIR, bit(22)) ? TBDDefaultCallout;

    /** IOELFIR[23]
     *  
     */
    (rIOELFIR, bit(23)) ? TBDDefaultCallout;

    /** IOELFIR[24]
     *  
     */
    (rIOELFIR, bit(24)) ? TBDDefaultCallout;

    /** IOELFIR[25]
     *  
     */
    (rIOELFIR, bit(25)) ? TBDDefaultCallout;

    /** IOELFIR[26]
     *  
     */
    (rIOELFIR, bit(26)) ? TBDDefaultCallout;

    /** IOELFIR[27]
     *  
     */
    (rIOELFIR, bit(27)) ? TBDDefaultCallout;

    /** IOELFIR[28]
     *  
     */
    (rIOELFIR, bit(28)) ? TBDDefaultCallout;

    /** IOELFIR[29]
     *  
     */
    (rIOELFIR, bit(29)) ? TBDDefaultCallout;

    /** IOELFIR[30]
     *  
     */
    (rIOELFIR, bit(30)) ? TBDDefaultCallout;

    /** IOELFIR[31]
     *  
     */
    (rIOELFIR, bit(31)) ? TBDDefaultCallout;

    /** IOELFIR[32]
     *  
     */
    (rIOELFIR, bit(32)) ? TBDDefaultCallout;

    /** IOELFIR[33]
     *  
     */
    (rIOELFIR, bit(33)) ? TBDDefaultCallout;

    /** IOELFIR[34]
     *  
     */
    (rIOELFIR, bit(34)) ? TBDDefaultCallout;

    /** IOELFIR[35]
     *  
     */
    (rIOELFIR, bit(35)) ? TBDDefaultCallout;

    /** IOELFIR[36]
     *  
     */
    (rIOELFIR, bit(36)) ? TBDDefaultCallout;

    /** IOELFIR[37]
     *  
     */
    (rIOELFIR, bit(37)) ? TBDDefaultCallout;

    /** IOELFIR[38]
     *  
     */
    (rIOELFIR, bit(38)) ? TBDDefaultCallout;

    /** IOELFIR[39]
     *  
     */
    (rIOELFIR, bit(39)) ? TBDDefaultCallout;

    /** IOELFIR[40]
     *  
     */
    (rIOELFIR, bit(40)) ? TBDDefaultCallout;

    /** IOELFIR[41]
     *  
     */
    (rIOELFIR, bit(41)) ? TBDDefaultCallout;

    /** IOELFIR[42]
     *  
     */
    (rIOELFIR, bit(42)) ? TBDDefaultCallout;

    /** IOELFIR[43]
     *  
     */
    (rIOELFIR, bit(43)) ? TBDDefaultCallout;

    /** IOELFIR[44]
     *  
     */
    (rIOELFIR, bit(44)) ? TBDDefaultCallout;

    /** IOELFIR[45]
     *  
     */
    (rIOELFIR, bit(45)) ? TBDDefaultCallout;

    /** IOELFIR[46]
     *  
     */
    (rIOELFIR, bit(46)) ? TBDDefaultCallout;

    /** IOELFIR[47]
     *  
     */
    (rIOELFIR, bit(47)) ? TBDDefaultCallout;

    /** IOELFIR[48]
     *  
     */
    (rIOELFIR, bit(48)) ? TBDDefaultCallout;

    /** IOELFIR[49]
     *  
     */
    (rIOELFIR, bit(49)) ? TBDDefaultCallout;

    /** IOELFIR[50]
     *  
     */
    (rIOELFIR, bit(50)) ? TBDDefaultCallout;

    /** IOELFIR[51]
     *  
     */
    (rIOELFIR, bit(51)) ? TBDDefaultCallout;

    /** IOELFIR[52]
     *  
     */
    (rIOELFIR, bit(52)) ? TBDDefaultCallout;

    /** IOELFIR[53]
     *  
     */
    (rIOELFIR, bit(53)) ? TBDDefaultCallout;

    /** IOELFIR[54]
     *  
     */
    (rIOELFIR, bit(54)) ? TBDDefaultCallout;

    /** IOELFIR[55]
     *  
     */
    (rIOELFIR, bit(55)) ? TBDDefaultCallout;

    /** IOELFIR[56]
     *  
     */
    (rIOELFIR, bit(56)) ? TBDDefaultCallout;

    /** IOELFIR[57]
     *  
     */
    (rIOELFIR, bit(57)) ? TBDDefaultCallout;

    /** IOELFIR[58]
     *  
     */
    (rIOELFIR, bit(58)) ? TBDDefaultCallout;

    /** IOELFIR[59]
     *  
     */
    (rIOELFIR, bit(59)) ? TBDDefaultCallout;

    /** IOELFIR[60]
     *  
     */
    (rIOELFIR, bit(60)) ? TBDDefaultCallout;

    /** IOELFIR[61]
     *  
     */
    (rIOELFIR, bit(61)) ? TBDDefaultCallout;

    /** IOELFIR[62]
     *  
     */
    (rIOELFIR, bit(62)) ? TBDDefaultCallout;

    /** IOELFIR[63]
     *  
     */
    (rIOELFIR, bit(63)) ? TBDDefaultCallout;

};

 ##############################################################################
 #                                                                            #
 #    #                                  ###                                  #
 #   # #    ##  ##### ###  ###  #   #   #   # #     #    ###   ###  ###  ###  #
 #  #   #  #  #   #    #  #   # ##  #   #     #    # #  #     #     #   #     #
 # ####### #      #    #  #   # # # #   #     #   #####  ###   ###  ##   ###  #
 # #     # #  #   #    #  #   # #  ##   #   # #   #   #     #     # #       # #
 # #     #  ##    #   ###  ###  #   #    ###  ### #   #  ###   ###  ###  ###  #
 #                                                                            #
 ##############################################################################

# Include the common action set.
.include "p9_common_actions.rule";

