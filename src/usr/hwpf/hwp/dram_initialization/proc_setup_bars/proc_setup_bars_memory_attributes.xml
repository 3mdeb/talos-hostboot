<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/usr/hwpf/hwp/dram_initialization/proc_setup_bars/proc_setup_bars_memory_attributes.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER HostBoot Project                                             -->
<!--                                                                        -->
<!-- COPYRIGHT International Business Machines Corp. 2012,2014              -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->
<!-- $Id: proc_setup_bars_memory_attributes.xml,v 1.10 2013/09/23 22:20:29 jmcgill Exp $ -->
<!-- proc_setup_bars_memory_attributes.xml -->
<attributes>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_MEM_MIRROR_PLACEMENT_POLICY</id>
    <targetType>TARGET_TYPE_SYSTEM</targetType>
    <description>Define placement policy/scheme for non-mirrored/mirrored memory
                 layout
      creator: platform
      consumer: opt_memmap
      firmware notes:
        NORMAL  = non-mirrored start: 0, mirrored start: 512TB
        FLIPPED = mirrored start: 0, non-mirrored start: 512TB
        SELECTIVE = non-mirrored/mirrored start (interleaved): 0
        DRAWER = non-mirrored start: 1TB*drawer, mirrored start: 512TB+(1TB*drawer/2)
    </description>
    <valueType>uint8</valueType>
    <enum>
      NORMAL    = 0x0,
      FLIPPED   = 0x1,
      SELECTIVE = 0x2,
      DRAWER    = 0x3
    </enum>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MEM_BASE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Base address for non-mirrored memory regions
      creator: platform (proc_config_base_addr)
      consumer: mss_setup_bars
      firmware notes:
        64-bit RA
    </description>
    <valueType>uint64</valueType>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MEM_BASES</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Non-mirrored memory base addresses
      creator: mss_setup_bars
      consumer: proc_setup_bars, platform
      firmware notes:
        64-bit RA
        eight independent non-mirrored segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MEM_BASES_ACK</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Non-mirrored memory base addresses
      creator: mss_setup_bars
      consumer: opt_mem_map
      Mem opt map uses this for the bases of the non-mirror ranges.
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MEM_SIZES</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of non-mirrored memory regions
      creator: mss_setup_bars
      consumer: proc_setup_bars, platform
      firmware notes:
        for given index value, address space assumed to be contiguous
        from ATTR_PROC_MEM_BASES value at matching index
        eight independent non-mirrored segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MEM_SIZES_ACK</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of non-mirrored memory regions up to a power of 2
      creator: mss_setup_bars
      consumer: opt_mem_map
      Mem opt map uses this to stack mirror ranges.  The real amount of memory behind the mirror group maybe less than the number reported here if there are memory holes
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MIRROR_BASE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Base address for mirrored memory regions
      creator: platform (proc_config_base_addr)
      consumer: mss_setup_bars
      firmware notes:
        64-bit RA
    </description>
    <valueType>uint64</valueType>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MIRROR_BASES</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Mirrored memory base addresses
      creator: mss_setup_bars
      consumer: proc_setup_bars, platform
      firmware notes:
        64-bit RA
        four independent mirrored segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>4</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MIRROR_BASES_ACK</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Mirrored memory base addresses
      creator: mss_setup_bars
      consumer: consumer: opt_mem_map
      Mem opt map uses this for the bases of the mirror ranges.  
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>4</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MIRROR_SIZES</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of mirrored memory region
      creator: mss_setup_bars
      consumer: proc_setup_bars, platform
      firmware notes:
        for given index value, address space assumed to be contiguous
        from ATTR_PROC_MIRROR_BASES value at matching index
        four independent mirrored segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>4</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_MIRROR_SIZES_ACK</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of mirrored memory region up to a power of 2
      creator: mss_setup_bars
      consumer: opt_mem_map
      Mem opt map uses this to stack mirror ranges.  The real amount of memory behind the mirror group maybe less than the number reported here if there are memory holes
    </description>
    <valueType>uint64</valueType>
    <array>4</array>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_FOREIGN_NEAR_BASE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Foreign (near) address region base address
      creator: platform
      consumer: proc_setup_bars
      firmware notes:
        64-bit RA
        two independent regions are supported
        (one per foreign link)
    </description>
    <valueType>uint64</valueType>
    <array>2</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_FOREIGN_NEAR_SIZE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of foreign (near) region
      creator: platform
      consumer: proc_setup_bars
      firmware notes:
        address space assumed to be contiguous from associated
        ATTR_PROC_FOREIGN_NEAR_BASE for given index value
        two independent regions are supported
        (one per foreign link)
    </description>
    <valueType>uint64</valueType>
    <array>2</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_FOREIGN_FAR_BASE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Foreign (far) address region base address
      creator: platform
      consumer: proc_setup_bars
      firmware notes:
        64-bit RA
        two independent regions are supported
        (one per foreign link)
    </description>
    <valueType>uint64</valueType>
    <array>2</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_FOREIGN_FAR_SIZE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of foreign (far) region
      creator: platform
      consumer: proc_setup_bars
      firmware notes:
        address space assumed to be contiguous from associated
        ATTR_PROC_FOREIGN_FAR_BASE for given index value
        two independent regions are supported
        (one per foreign link)
    </description>
    <valueType>uint64</valueType>
    <array>2</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_HA_BASE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>HA logging base address
      firmware notes:
        64-bit RA
        eight independent segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_HA_SIZE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Size of HA memory region
      firmware notes:
        address space assumed to be contiguous from associated
        ATTR_PROC_HA_BASE for given index value
        eight independent segments are supported
        (max number based on Venice design)
    </description>
    <valueType>uint64</valueType>
    <array>8</array>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_HTM_BAR_SIZE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Desired HTM trace memory size value
      creator: platform
      firmware notes:
        set by platform to request size of per-chip area reserved
        for HTM trace memory
    </description>
    <valueType>uint64</valueType>
    <enum>
      256_GB = 0x0000004000000000,
      128_GB = 0x0000002000000000,
       64_GB = 0x0000001000000000,
       32_GB = 0x0000000800000000,
       16_GB = 0x0000000400000000,
        8_GB = 0x0000000200000000,
        4_GB = 0x0000000100000000,
        2_GB = 0x0000000080000000,
        1_GB = 0x0000000040000000,
      512_MB = 0x0000000020000000,
      256_MB = 0x0000000010000000,
      128_MB = 0x0000000008000000,
       64_MB = 0x0000000004000000,
       32_MB = 0x0000000002000000,
       16_MB = 0x0000000001000000,
        ZERO = 0x0000000000000000
    </enum>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_HTM_BAR_BASE_ADDR</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>HTM trace memory base address allocated
    </description>
    <valueType>uint64</valueType>
    <writeable/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_OCC_SANDBOX_SIZE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>Desired size of OCC sandbox memory region
      creator: platform
      firmware notes:
        set by platform to request size of per-chip area reserved
        for OCC sandbox function
    </description>
    <valueType>uint64</valueType>
    <enum>
      256_GB = 0x0000004000000000,
      128_GB = 0x0000002000000000,
       64_GB = 0x0000001000000000,
       32_GB = 0x0000000800000000,
       16_GB = 0x0000000400000000,
        8_GB = 0x0000000200000000,
        4_GB = 0x0000000100000000,
        2_GB = 0x0000000080000000,
        1_GB = 0x0000000040000000,
      512_MB = 0x0000000020000000,
      256_MB = 0x0000000010000000,
      128_MB = 0x0000000008000000,
       64_MB = 0x0000000004000000,
       32_MB = 0x0000000002000000,
       16_MB = 0x0000000001000000,
        ZERO = 0x0000000000000000
    </enum>
    <platInit/>
    <persistRuntime/>
  </attribute>
  <!-- ********************************************************************* -->
  <attribute>
    <id>ATTR_PROC_OCC_SANDBOX_BASE_ADDR</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>OCC sandbox base address allocated
    </description>
    <valueType>uint64</valueType>
    <writeable/>
    <persistRuntime/>
  </attribute>
</attributes>
