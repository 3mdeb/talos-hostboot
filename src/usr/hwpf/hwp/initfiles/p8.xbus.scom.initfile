#-- $Id: p8.xbus.scom.initfile,v 1.3 2012/08/01 05:31:13 thomsen Exp $
#-- CHANGE HISTORY:
#--------------------------------------------------------------------------------
#-- Version:|Author: | Date:  | Comment:
#-- --------|--------|--------|--------------------------------------------------
#--     1.3 |thomsen |07/31/12|Removed mirrored PRBS tap entries since Xbus doesn't support end-for-end swapping
#--         |        |        |Changed per-group writes with the same data being written into all groups into group broadcast writes to save scom's
#--     1.2 |jmcgill |07/27/12|Cleanup to run on VBU, edit to match scan initfile
#--         |        |        |Simplify master/slave logic (chip ID always unique)
#--     1.1 |pmegan  |07/10/12|Created initial version
#-- --------|--------|--------|--------------------------------------------------
#--------------------------------------------------------------------------------
# End of revision history
#--------------------------------------------------------------------------------
#--Master list of variables that can be used in this file is at:
#--<Attribute Definition Location>
#-- ATTR_EI_BUS_RX_MSB_LSB_SWAP is 0 for setting RX PRBS TapID's to Non-Mirrored Mode and 1 for setting to Mirrored Mode. It comes from the MRW.
#-- ATTR_EI_BUS_TX_MSB_LSB_SWAP is 0 for setting TX PRBS TapID's to Non-Mirrored Mode and 1 for setting to Mirrored Mode. It comes from the MRW.

SyntaxVersion = 1

#-- -----------------------------------------------------------------------------
#--******************************************************************************
#-- -----------------------------------------------------------------------------
#--
#-- Includes
#-- Note:  Must include the path to the .define file.
#-- -----------------------------------------------------------------------------
#--******************************************************************************
#-- -----------------------------------------------------------------------------
include ei4.io.define
#-- -----------------------------------------------------------------------------
#--******************************************************************************
#-- -----------------------------------------------------------------------------
#--
#-- Defines
#--
#-- -----------------------------------------------------------------------------
#--******************************************************************************
#-- -----------------------------------------------------------------------------

define def_bus_id0 = (ATTR_CHIP_UNIT_POS == 0);
define def_bus_id1 = (ATTR_CHIP_UNIT_POS == 1);
define def_bus_id2 = (ATTR_CHIP_UNIT_POS == 2);
define def_bus_id3 = (ATTR_CHIP_UNIT_POS == 3);

define def_is_master = (TGT1.ATTR_FABRIC_CHIP_ID < TGT2.ATTR_FABRIC_CHIP_ID);
define def_is_slave  = (TGT1.ATTR_FABRIC_CHIP_ID > TGT2.ATTR_FABRIC_CHIP_ID);
define def_xbus_4byte_mode      = (SYS.ATTR_PROC_X_BUS_WIDTH == ENUM_ATTR_PROC_X_BUS_WIDTH_W4BYTE);      # xbus_4byte mode
define def_xbus_8byte_mode      = (SYS.ATTR_PROC_X_BUS_WIDTH == ENUM_ATTR_PROC_X_BUS_WIDTH_W8BYTE);      # xbus_8byte mode
# See p8.chipunit.scominfo file for details of how SCOM addresses are translated by Cronus and FW based on the target unit number
define rx_grp = rx_grp0;   #
define tx_grp = tx_grp0;   #
define rx_grp_broadcast = 001111;
define tx_grp_broadcast = 101111;

#--******************************************************************************
#-------------------------------------------------------------------------------------
#    _____      __                 ________
#   / ___/___  / /___  ______     /  _/ __ \
#   \__ \/ _ \/ __/ / / / __ \    / // / / /
#  ___/ /  __/ /_/ /_/ / /_/ /  _/ // /_/ /
# /____/\___/\__/\__,_/ .___/  /___/_____/
#                    /_/                    banner2 -fslant
#-------------------------------------------------------------------------------------
#--******************************************************************************
#### X bus -> 4 CG's, 20 lanes, A bus -> 3 CG's, 23 lanes , DMI bus -> 4 CG's, 24 lanes
#
#--********************************************************************************************
#-- rx_bus_id, tx_bus_id
#--********************************************************************************************
scom 0x800.0b(rx_id1_pg)(rx_grp0)(lane_na).0x(xbus0_gcr_addr){
	    bits,                    scom_data,            expr;
        rx_bus_id ,              0b000000,             (def_xbus_8byte_mode);          # BusID is 0x00 on RX0 when in 8-byte mode
        rx_bus_id ,              0b110000,             (def_xbus_4byte_mode);          # BusID is 0x30 on RX0 when in 4-byte mode since it isn't used and we don't want it decoding any GCR commands
        rx_group_id,             0b000000,             (def_xbus_8byte_mode);          # GroupID is 0x00 on RX0 when in 8-byte mode
        rx_group_id,             0b110000,             (def_xbus_4byte_mode);          # GroupID is 0x30 on RX0 when 4-byte mode since it isn't used
}
scom 0x800.0b(rx_id1_pg)(rx_grp1)(lane_na).0x(xbus0_gcr_addr){
	    bits,                    scom_data,            expr;
        rx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
        rx_group_id,             0b000001,             (def_xbus_8byte_mode);          # GroupID is 0x01 on RX1 when in 8-byte mode
        rx_group_id,             0b000000,             (def_xbus_4byte_mode);          # GroupID is 0x00 on RX1 when in 4-byte mode
}
scom 0x800.0b(rx_id1_pg)(rx_grp2)(lane_na).0x(xbus0_gcr_addr){
	    bits,                    scom_data,            expr;
        rx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
        rx_group_id,             0b000010,             (def_xbus_8byte_mode);          # GroupID is 0x02 on RX2 when in 8-byte mode
        rx_group_id,             0b000001,             (def_xbus_4byte_mode);          # GroupID is 0x01 on RX2 when in 4-byte mode
}
scom 0x800.0b(rx_id1_pg)(rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                    scom_data,            expr;
	    rx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
        rx_group_id,             0b000011,             (def_xbus_8byte_mode);          # GroupID is 0x03 on RX2 when in 8-byte mode
        rx_group_id,             0b000001,             (def_xbus_4byte_mode);          # GroupID is 0x01 on RX2 when in 4-byte mode
}

scom 0x800.0b(tx_id1_pg)(tx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                    scom_data,            expr;
        tx_bus_id ,              0b000000,             (def_xbus_8byte_mode);          # BusID is 0x00 on TX0 when in 8-byte mode
        tx_bus_id ,              0b110000,             (def_xbus_4byte_mode);          # BusID is 0x30 on TX0 when in 4-byte mode since it isn't used and we don't want it decoding any GCR commands
	    tx_group_id,             0b100000,             (def_xbus_8byte_mode);          # GroupID is 0x20 on TX0 when in 8-byte mode
    	tx_group_id,             0b110001,             (def_xbus_4byte_mode);          # GroupID is 0x31 on TX0 when in 4-byte mode since it isn't used
}
scom 0x800.0b(tx_id1_pg)(tx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                    scom_data,            expr;
        tx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
        tx_group_id,             0b100001,             (def_xbus_8byte_mode);          # GroupID is 0x21 on TX1 when in 8-byte mode
        tx_group_id,             0b100000,             (def_xbus_4byte_mode);          # GroupID is 0x20 on TX1 when in 4-byte mode
}
scom 0x800.0b(tx_id1_pg)(tx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                    scom_data,            expr;
        tx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
	    tx_group_id,             0b100010,             (def_xbus_8byte_mode);          # GroupID is 0x22 on TX2 when in 8-byte mode
        tx_group_id,             0b100001,             (def_xbus_4byte_mode);          # GroupID is 0x21 on TX2 when in 4-byte mode
}
scom 0x800.0b(tx_id1_pg)(tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                    scom_data,            expr;
        tx_bus_id ,              0b000000,             any;                            # BusID is 0x00 for all clock groups in all X buses
        tx_group_id,             0b100011,             (def_xbus_8byte_mode);          # GroupID is 0x23 on TX3 when in 8-byte mode
        tx_group_id,             0b100010,             (def_xbus_4byte_mode);          # GroupID is 0x22 on TX3 when in 4-byte mode
}

#--********************************************************************************************
#-- rx_last_group_id, tx_last_group_id
#--********************************************************************************************
scom 0x800.0b(rx_id2_pg)(rx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        rx_last_group_id ,      0b000011,               (def_xbus_8byte_mode);                    #Last group ID is 0x03 on RX0 when in 8-byte mode
        rx_last_group_id ,      0b110000,               (def_xbus_4byte_mode);                    #Last group ID is 0x30 on RX0 when in 4-byte mode since it isn't used
}
scom 0x800.0b(rx_id2_pg)(rx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        rx_last_group_id ,      0b000011,               (def_xbus_8byte_mode);                    #Last group ID is 0x03 on RX1 when in 8-byte mode
        rx_last_group_id ,      0b100000,               (def_xbus_4byte_mode);                    #Last group ID is 0x20 on RX1 when in 4-byte mode
}
scom 0x800.0b(rx_id2_pg)(rx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        rx_last_group_id ,      0b000011,               (def_xbus_8byte_mode);                    #Last group ID is 0x03 on RX2 when in 8-byte mode
        rx_last_group_id ,      0b100000,               (def_xbus_4byte_mode);                    #Last group ID is 0x20 on RX2 when in 4-byte mode
}
scom 0x800.0b(rx_id2_pg)(rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        rx_last_group_id ,      0b000011,               (def_xbus_8byte_mode);                    #Last group ID is 0x03 on RX3 when in 8-byte mode
        rx_last_group_id ,      0b100000,               (def_xbus_4byte_mode);                    #Last group ID is 0x20 on RX2 when in 4-byte mode
}
scom 0x800.0b(tx_id2_pg)(tx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        tx_last_group_id ,      0b100011,               (def_xbus_8byte_mode);                    #Last group ID is 0x23 on TX0 when in 8-byte mode
        tx_last_group_id ,      0b110001,               (def_xbus_4byte_mode);                    #Last group ID is 0x31 on TX0 when in 4-byte mode since it isn't used
}
scom 0x800.0b(tx_id2_pg)(tx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        tx_last_group_id ,      0b100011,               (def_xbus_8byte_mode);                    #Last group ID is 0x23 on TX1 when in 8-byte mode
        tx_last_group_id ,      0b100010,               (def_xbus_4byte_mode);                    #Last group ID is 0x22 on TX1 when in 4-byte mode
}
scom 0x800.0b(tx_id2_pg)(tx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        tx_last_group_id ,      0b100011,               (def_xbus_8byte_mode);                    #Last group ID is 0x23 on TX2 when in 8-byte mode
        tx_last_group_id ,      0b100010,               (def_xbus_4byte_mode);                    #Last group ID is 0x22 on TX2 when in 4-byte mode
}
scom 0x800.0b(tx_id2_pg)(tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        tx_last_group_id ,      0b100011,               (def_xbus_8byte_mode);                    #Last group ID is 0x23 on TX3 when in 8-byte mode
        tx_last_group_id ,      0b100010,               (def_xbus_4byte_mode);                    #Last group ID is 0x22 on TX3 when in 4-byte mode
}

#--*********************************************************************************************
#-- rx_start_lane_id, rx_end_lane_id
#--*********************************************************************************************
#RX =  80-bits (8byte mode), 46-bits (4byte mode)
scom 0x800.0b(rx_id3_pg)(rx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
        rx_start_lane_id ,      0b0000000,              any;                                     #Start lane ID starts with lane 0 on RX0 when in 8/4 byte mode
        rx_end_lane_id,         0b0010011,              (def_xbus_8byte_mode);                   #End lane ID ends with lane 19 on RX0 when in 8-byte mode
        rx_end_lane_id,         0b0000000,              (def_xbus_4byte_mode);                   #End lane ID ends with lane 0 on RX0 when in 4-byte mode
}
scom 0x800.0b(rx_id3_pg)(rx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		rx_start_lane_id ,      0b0010100,              (def_xbus_8byte_mode);                   #Start lane ID starts with lane 20 on RX1 when in 8-byte mode
		rx_start_lane_id ,      0b0000000,              (def_xbus_4byte_mode);                   #Start lane ID starts with lane 0 on RX1 when in 4-byte mode
		rx_end_lane_id,         0b0100111,              (def_xbus_8byte_mode);                   #End lane ID ends with lane 39 on RX1 when in 8-byte mode
		rx_end_lane_id,         0b0000101,              (def_xbus_4byte_mode);                   #End lane ID ends with lane 5 on RX1 when in 4-byte mode	
}
scom 0x800.0b(rx_id3_pg)(rx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		rx_start_lane_id ,      0b0101000,              (def_xbus_8byte_mode);                   #Start lane ID starts with lane 40 on RX2 when in 8-byte mode
		rx_start_lane_id ,      0b0000110,              (def_xbus_4byte_mode);                   #Start lane ID starts with lane 6 on RX2 when in 4-byte mode
		rx_end_lane_id,         0b0111011,              (def_xbus_8byte_mode);                   #End lane ID ends with lane 59 on RX2 when in 8-byte mode
		rx_end_lane_id,         0b0011001,              (def_xbus_4byte_mode);                   #End lane ID ends with lane 25 on RX2 when in 4-byte mode
}
scom 0x800.0b(rx_id3_pg)(rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;	
		rx_start_lane_id ,      0b0111100,              (def_xbus_8byte_mode);                    #Start lane ID starts with lane 60 on RX3 when in 8-byte mode
		rx_start_lane_id ,      0b0011010,              (def_xbus_4byte_mode);                    #Start lane ID starts with lane 26 on RX3 when in 4-byte mode
		rx_end_lane_id,         0b1001111,              (def_xbus_8byte_mode);                    #End lane ID ends with lane 79 on RX3 when in 8-byte mode
		rx_end_lane_id,         0b0101101,              (def_xbus_4byte_mode);                    #End lane ID ends with lane 45 on RX3 when in 4-byte mode
}
# TX =  80-bits (8byte mode), 46-bits (4byte mode)
scom 0x800.0b(tx_id3_pg)(tx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		tx_start_lane_id ,      0b0000000,              any;                                      #Start lane ID starts with lane 0 on TX0 when in 8/4-byte mode
		tx_end_lane_id,         0b0010011,              (def_xbus_8byte_mode);                    #End lane ID ends with lane 19 on TX0 when in 8-byte mode
		tx_end_lane_id,         0b0000000,              (def_xbus_4byte_mode);                    #End lane ID ends with lane 0 on TX0 when in 4-byte mode
	}
scom 0x800.0b(tx_id3_pg)(tx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		tx_start_lane_id ,      0b0010100,              (def_xbus_8byte_mode);                    #Start lane ID starts with lane 20 on TX1 when in 8-byte mode
		tx_start_lane_id ,      0b0000000,              (def_xbus_4byte_mode);                    #Start lane ID starts with lane 0 on TX1 when in 4-byte mode
		tx_end_lane_id,         0b0100111,              (def_xbus_8byte_mode);                    #End lane ID ends with lane 39 on TX1 when in 8-byte mode
		tx_end_lane_id,         0b0000101,              (def_xbus_4byte_mode);                    #End lane ID ends with lane 5 on TX1 when in 4-byte mode
}
scom 0x800.0b(tx_id3_pg)(tx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		tx_start_lane_id ,      0b0101000,              (def_xbus_8byte_mode);                    #Start lane ID starts with lane 40 on TX2 when in 8-byte mode
		tx_start_lane_id ,      0b0000110,              (def_xbus_4byte_mode);                    #Start lane ID start with lane 6 on TX2 when in 4-byte mode
		tx_end_lane_id,         0b0111011,              (def_xbus_8byte_mode);                    #End lane ID ends with lane 59 on TX2 when in 8-byte mode
		tx_end_lane_id,         0b0011001,              (def_xbus_4byte_mode);                    #End lane ID ends with lane 25 on TX2 when in 4-byte mode
}
scom 0x800.0b(tx_id3_pg)(tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                   scom_data,              expr;
		tx_start_lane_id ,      0b0111100,              (def_xbus_8byte_mode);                    #Start lane ID starts with lane 60 on TX3 when in 8-byte mode
		tx_start_lane_id ,      0b0011010,              (def_xbus_4byte_mode);                    #Start lane ID start with lane 26 on TX3 when in 4-byte mode
		tx_end_lane_id,         0b1001111,              (def_xbus_8byte_mode);                    #End lane ID ends with lane 79 on TX3 when in 8-byte mode
		tx_end_lane_id,         0b0101101,              (def_xbus_4byte_mode);                    #End lane ID ends with lane 45 on TX3 when in 4-byte mode
}
#--*********************************************************************************************
# rx_tx_bus_width                        ediei4  0        99     rx_tx_bus_info_pg           0         7        RWX  n      0000000
# rx_rx_bus_width                        ediei4  0        99     rx_tx_bus_info_pg           7         7        RWX  n      0000000
#--*********************************************************************************************
#
# TX =  80-bits (8byte mode), 46-bits (4byte mode)
scom 0x800.0b(rx_tx_bus_info_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
        scom_data,               expr;
#       0d80     0d80		
        0b1010000101000000,      (def_xbus_8byte_mode);                    #Bus width is 80 bits for all clock groups in all X buses when in 8-byte mode
#       0d46     0d46		
        0b0101110001011100,      (def_xbus_4byte_mode);                    #Bus width is 46 bits for all clock groups in all X buses when in 4-byte mode
#scom 0x800.0b(rx_tx_bus_info_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
#        bits,                   scom_data,              expr;
#        rx_tx_bus_width,        0b1010000,              (def_xbus_8byte_mode);                    #Bus width is 80 bits for all clock groups in all X buses when in 8-byte mode
#        rx_tx_bus_width,        0b0101110,              (def_xbus_4byte_mode);                    #Bus width is 46 bits for all clock groups in all X buses when in 4-byte mode
#        rx_rx_bus_width,        0b1010000,              (def_xbus_8byte_mode);                    #Bus width is 80 bits for all clock groups in all X buses when in 8-byte mode
#        rx_rx_bus_width,        0b0101110,              (def_xbus_4byte_mode);                    #Bus width is 46 bits for all clock groups in all X buses when in 4-byte mode
}
#-----------------------------------------------------------------------------------------------
#     ______
#    / ____/__  ____  ________                  #### TODO: This needs to be set in the scaninit file and io_hard_reset factored into all reinit scenarios
#   / /_  / _ \/ __ \/ ___/ _ \
#  / __/ /  __/ / / / /__/  __/
# /_/    \___/_/ /_/\___/\___/  banner2 -fslant
#----------------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_fence                               ediei4  0        99     rx_fence_pg                 0         1        RWX  n      0
#--*********************************************************************************************
scom 0x800.0b(rx_fence_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
        scom_data;
        0x8000;
#scom 0x800.0b(rx_fence_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
#        bits ,         scom_data;
#        rx_fence,       0b1;
}
#----------------------------------------------------------------------------------------------
#     __                        ____  _            __    __
#    / /   ____ _____  ___     / __ \(_)________ _/ /_  / /__  _____
#   / /   / __ `/ __ \/ _ \   / / / / / ___/ __ `/ __ \/ / _ \/ ___/
#  / /___/ /_/ / / / /  __/  / /_/ / (__  ) /_/ / /_/ / /  __(__  )
# /_____/\__,_/_/ /_/\___/  /_____/_/____/\__,_/_.___/_/\___/____/   banner2 -fslant
#----------------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_lane_disabled_vec_0_15              ediei4  0        99     rx_lane_disabled_vec_0_15_pg  0       16       RWX  n      0000000000000000
#--*********************************************************************************************
# RX =  80-bits (8byte mode), 46-bits (4byte mode)
scom 0x800.0b(rx_lane_disabled_vec_0_15_pg)(rx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,               expr;
    	rx_lane_disabled_vec_0_15,   0b0000000000000000,     (def_xbus_8byte_mode);                 # RX0 on X bus has all lanes (0x0000) enabled (ie. disabled=0)when in 8-byte mode
    	rx_lane_disabled_vec_0_15,   0b1111111111111111,     (def_xbus_4byte_mode);                 # RX0 on X bus has lane 0:15 (0xFFFF) diabled when in 4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_0_15_pg)(rx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,               expr;
        rx_lane_disabled_vec_0_15,   0b0000000000000000,     (def_xbus_8byte_mode);                 # RX1 on X bus has all laness (0x0000) enabled (ie. disabled=0)when in 8-byte mode
        rx_lane_disabled_vec_0_15,   0b1111111111111100,     (def_xbus_4byte_mode);                 # RX1 on X bus has lane 0:13(0xFFFC) diabled when in 4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_0_15_pg)(rx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        rx_lane_disabled_vec_0_15,   0b0000000000000000,     any;                                   # RX2 on X bus has all lanes (0x0000)enabled (ie. disabled=0) in 8/4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_0_15_pg)(rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,               expr;
        rx_lane_disabled_vec_0_15,   0b0000000000000000,     any;                                   # RX3 on X bus has all lanes (0x0000) enabled (ie. disabled=0) in 8/4-byte mode
}
#--*********************************************************************************************
# rx_lane_disabled_vec_16_31             ediei4  0        99     rx_lane_disabled_vec_16_31_pg 0       16       RWX  n      0000000000000000
#--*********************************************************************************************
scom 0x800.0b(rx_lane_disabled_vec_16_31_pg)(rx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        rx_lane_disabled_vec_16_31,  0b0000111111111111,     (def_xbus_8byte_mode);                 # RX0 on X bus has lane 16:19 (0X0FFF) enabled (ie. disabled=0) when in 8-byte mode
        rx_lane_disabled_vec_16_31,  0b1111111111111111,     (def_xbus_4byte_mode);                 # RX0 on X bus has all lane 16:31(0xFFFF) diabled when in 4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_16_31_pg)(rx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        rx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                   # RX1 on X bus has lane 16:19 (0X0FFF) enabled (ie. disabled=0) in 8/4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_16_31_pg)(rx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        rx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                   # RX2 on X bus has lane 16:19 (0X0FFF) enabled (ie. disabled=0)when in 8/4-byte mode
}
scom 0x800.0b(rx_lane_disabled_vec_16_31_pg)(rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        rx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                   # RX3 on X bus has lane 16:19 (0X0FFF) enabled (ie. disabled=0)when in 8/4-byte mode
}

#--*********************************************************************************************
# tx_lane_disabled_vec_0_15              ediei4  0        99     tx_lane_disabled_vec_0_15_pg  0       16       RWX  n      0000000000000000
#--*********************************************************************************************
# TX =  80-bits (8byte mode), 46-bits (4byte mode)
scom 0x800.0b(tx_lane_disabled_vec_0_15_pg)(tx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_0_15,   0b0000000000000000,     (def_xbus_8byte_mode);                    # TX0 on X bus has all lanes (0x0000)enabled(ie. disabled=0) when in 8-byte mode
        tx_lane_disabled_vec_0_15,   0b1111111111111111,     (def_xbus_4byte_mode);                    # TX0 on X bus has all lane 0:15 (0xFFFF)diabled when in 4-byte mode
}
scom 0x800.0b(tx_lane_disabled_vec_0_15_pg)(tx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_0_15,   0b0000000000000000,     (def_xbus_8byte_mode);                     # TX1 on X bus has all lanes (0x0000) enabled (ie. disabled=0)when in 8-byte mode
        tx_lane_disabled_vec_0_15,   0b1111111111111100,     (def_xbus_4byte_mode);                     # TX1 on X bus has lane 0:13(0xFFFC) diabled when in 4-byte mode
}
scom 0x800.0b(tx_lane_disabled_vec_0_15_pg)(tx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_0_15,   0b0000000000000000,     any;                                       # TX2 on X bus has all lanes (0x0000) enabled (ie. disabled=0) in 8/4-byte mode
}
scom 0x800.0b(tx_lane_disabled_vec_0_15_pg)(tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_0_15,   0b0000000000000000,     any;                                       # TX3 on X bus has all lanes enabled (0x0000) (ie. disabled=0) in 8/4-byte mode
}
#--*********************************************************************************************
# tx_lane_disabled_vec_16_31              ediei4  0        99     tx_lane_disabled_vec_16_31_pg  0       16       RWX  n      0000000000000000
#--*********************************************************************************************
scom 0x800.0b(tx_lane_disabled_vec_16_31_pg)(tx_grp0)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_16_31,  0b0000111111111111,     (def_xbus_8byte_mode);                     # TX0 on X bus has lane 16:19 (0X0FFF) enabled when in 8-byte mode(ie. disabled=0)
        tx_lane_disabled_vec_16_31,  0b1111111111111111,     (def_xbus_4byte_mode);                     # TX0 on X bus has all lane 16:31(0xFFFF) diabled when in 4-byte mode
}
scom 0x800.0b(tx_lane_disabled_vec_16_31_pg)(tx_grp1)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                       # TX1 on X bus has lane 16:19 (0X0FFF) enabled when in 8/4-byte mode(ie. disabled=0)
}
scom 0x800.0b(tx_lane_disabled_vec_16_31_pg)(tx_grp2)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                       # TX2 on X bus has lane 16:19 (0X0FFF)enabled in 8/4-byte mode(ie. disabled=0)
}
scom 0x800.0b(tx_lane_disabled_vec_16_31_pg)(tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data,              expr;
        tx_lane_disabled_vec_16_31,  0b0000111111111111,     any;                                       # TX3 on X bus has lane 16:19 (0X0FFF) enabled in 8/4-byte mode(ie. disabled=0)
}
#-------------------------------------------------------------------------------------
#     __  ___              ____            __   __
#    /  |/  /___ __  __   / __ )____ _____/ /  / /   ____ _____  ___  _____
#   / /|_/ / __ `/ |/_/  / __  / __ `/ __  /  / /   / __ `/ __ \/ _ \/ ___/
#  / /  / / /_/ />  <   / /_/ / /_/ / /_/ /  / /___/ /_/ / / / /  __(__  )
# /_/  /_/\__,_/_/|_|  /_____/\__,_/\__,_/  /_____/\__,_/_/ /_/\___/____/  banner2 -fslant
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_wtr_cur_lane                        ediei4  0        99     rx_wiretest_laneinfo_pg     0         5        ROX  n      00000
# rx_wtr_max_bad_lanes                   ediei4  0        99     rx_wiretest_laneinfo_pg     5         5        RWX  n      00000
# rx_wtr_bad_lane_count                  ediei4  0        99     rx_wiretest_laneinfo_pg     11        5        ROX  n      00000
#--*********************************************************************************************
# Register has more than one possible non-zero field so can't use group broadcast write
# RX =  2 spares
#scom 0x800.0b(rx_wiretest_laneinfo_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
scom 0x800.0b(rx_wiretest_laneinfo_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data;
        rx_wtr_max_bad_lanes,        0b00010;     # Only 2 spare lanes on all clock groups of XBUS RX in both 8/4byte mode
}


#--*********************************************************************************************
# tx_max_bad_lanes                       ediei4  0        99     tx_mode_pg                  0         5        RWX  n      00000
# tx_msbswap                             ediei4  0        99     tx_mode_pg                  5         1        RWX  n      0    
# tx_pdwn_lite_disable                   edi     0        99     tx_mode_pg                  6         1        RWX  n      0    
#--*********************************************************************************************
# Register has more than one possible non-zero field so can't use group broadcast write
# TX = 2 spares
#scom 0x800.0b(tx_mode_pg)(tx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
scom 0x800.0b(tx_mode_pg)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                        scom_data;
        tx_max_bad_lanes,            0b00010;    # Each TX CG on X bus has 2 spare lanes in 8/4byte mode
}
#-------------------------------------------------------------------------------------
#     ____                 ____                   _         ______      ____      _
#    / __ \__  ______     / __ \___  ____  ____ _(_)____   /_  __/___ _/ / /_  __(_)___  ____ _
#   / / / / / / / __ \   / /_/ / _ \/ __ \/ __ `/ / ___/    / / / __ `/ / / / / / / __ \/ __ `/
#  / /_/ / /_/ / / / /  / _, _/  __/ /_/ / /_/ / / /       / / / /_/ / / / /_/ / / / / / /_/ /
# /_____/\__, /_/ /_/  /_/ |_|\___/ .___/\__,_/_/_/       /_/  \__,_/_/_/\__, /_/_/ /_/\__, /
#       /____/                   /_/                                    /____/        /____/   banner2 -fslant
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_dyn_rpr_bad_lane_max                ediei4  0        99     rx_dyn_rpr_err_tallying1_pg 0         7        RWX  n      0001111
# rx_dyn_rpr_err_cntr1_duration          ediei4  0        99     rx_dyn_rpr_err_tallying1_pg 7         4        RWX  n      1010   
# rx_dyn_rpr_clr_err_cntr1               ediei4  0        99     rx_dyn_rpr_err_tallying1_pg 11        1        RWX  n      0      
# rx_dyn_rpr_disable                     ediei4  0        99     rx_dyn_rpr_err_tallying1_pg 12        1        RWX  n      0      
# rx_dyn_rpr_enc_bad_data_lane_width     ediei4  0        99     rx_dyn_rpr_err_tallying1_pg 13        3        RWX  n      111    
#--*********************************************************************************************
# Register has more than one possible non-zero field so can't use group broadcast write
#scom 0x800.0b(rx_dyn_rpr_err_tallying1_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
#        scom_data;
#        0b0001111101000111;
scom 0x800.0b(rx_dyn_rpr_err_tallying1_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                               scom_data;
        rx_dyn_rpr_bad_lane_max,            0b0001111;    #
        rx_dyn_rpr_err_cntr1_duration,      0b1010;       # tap 10
        rx_dyn_rpr_enc_bad_data_lane_width, 0b111;        #
}
#--*********************************************************************************************
# rx_dyn_rpr_bad_bus_max                 ediei4  0        99     rx_dyn_rpr_err_tallying2_pg 0         7        RWX  n      0011111
# rx_dyn_rpr_err_cntr2_duration          ediei4  0        99     rx_dyn_rpr_err_tallying2_pg 7         4        RWX  n      0111   
# rx_dyn_rpr_clr_err_cntr2               ediei4  0        99     rx_dyn_rpr_err_tallying2_pg 11        1        RWX  n      0      
#--*********************************************************************************************
scom 0x800.0b(rx_dyn_rpr_err_tallying2_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
        scom_data;
		0b0011111011100000;
#scom 0x800.0b(rx_dyn_rpr_err_tallying2_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
#        bits,                               scom_data;
#        rx_dyn_rpr_bad_bus_max,             0b0011111;    #
#        rx_dyn_rpr_err_cntr2_duration,      0b0111;       # tap 7
}
#-------------------------------------------------------------------------------------
#     __  ___           __               __  ___          __
#    /  |/  /___ ______/ /____  _____   /  |/  /___  ____/ /__
#   / /|_/ / __ `/ ___/ __/ _ \/ ___/  / /|_/ / __ \/ __  / _ \
#  / /  / / /_/ (__  ) /_/  __/ /     / /  / / /_/ / /_/ /  __/
# /_/  /_/\__,_/____/\__/\___/_/     /_/  /_/\____/\__,_/\___/
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_master_mode                         ediei4  0        99     rx_mode_pg                  0         1        RWX  n      0
# rx_disable_fence_reset                 ediei4  0        99     rx_mode_pg                  1         1        RWX  n      0
# rx_pdwn_lite_disable                   edi     0        99     rx_mode_pg                  2         1        RWX  n      0
# rx_use_sls_as_spr                      edi     0        99     rx_mode_pg                  3         1        RWX  n      0
#--*********************************************************************************************
# Register has more than one possible non-zero field so can't use group broadcast write
#scom 0x800.0b(rx_mode_pg)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
#        scom_data,                           expr;
#        0x8000,                              (def_is_master);
#        0x0000,                              (def_is_slave);
scom 0x800.0b(rx_mode_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                               scom_data,                  expr;
        rx_master_mode,                     0b1,                        (def_is_master);         # Node/chip currently running has
        rx_master_mode,                     0b0,                        (def_is_slave);          #
}
#-------------------------------------------------------------------------------------
#     ____  ____  ____ _____    ______               _____      __          __
#    / __ \/ __ \/ __ ) ___/   /_  __/___ _____     / ___/___  / /__  _____/ /______
#   / /_/ / /_/ / __  \__ \     / / / __ `/ __ \    \__ \/ _ \/ / _ \/ ___/ __/ ___/
#  / ____/ _, _/ /_/ /__/ /    / / / /_/ / /_/ /   ___/ /  __/ /  __/ /__/ /_(__  )
# /_/   /_/ |_/_____/____/    /_/  \__,_/ .___/   /____/\___/_/\___/\___/\__/____/  banner2 -fslant
#                                      /_/
#-------------------------------------------------------------------------------------
# PER-LANE (RX)
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_prbs_tap_id                         ediei4  0        99     rx_prbs_mode_pl             0         3        RWX  n      000
#--*********************************************************************************************
# *_grp_broadcast uses clock group broadcast addresses 0b001111 (RX) and 0b101111 (TX) to cut down the number of scom operations needed during scominit
#    0x8000B0000401103F, 0x8000B0200401103F, 0x8000B0400401103F, 0x8000B0600401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_0).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_0).0x(xbus0_gcr_addr){
#        bits,                  scom_data;
#        rx_prbs_tap_id,        rx_prbs_tap_id_pattern_a;
}
#    0x8000B0010401103F, 0x8000B0210401103F, 0x8000B0410401103F, 0x8000B0610401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_1).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_1).0x(xbus0_gcr_addr){
#        bits,                  scom_data;              
#        rx_prbs_tap_id,        rx_prbs_tap_id_pattern_b;
}
#    0x8000B0020401103F, 0x8000B0220401103F, 0x8000B0420401103F, 0x8000B0620401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_2).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_2).0x(xbus0_gcr_addr){
#       bits,                  scom_data;              
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_c;
}
#    0x8000B0030401103F, 0x8000B0230401103F, 0x8000B0430401103F, 0x8000B0630401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_3).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_3).0x(xbus0_gcr_addr){
#       bits,                  scom_data;              
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_d;
}
#    0x8000B0040401103F, 0x8000B0240401103F, 0x8000B0440401103F, 0x8000B0640401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_4).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_e;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_4).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_e;
}
#    0x8000B0050401103F, 0x8000B0250401103F, 0x8000B0450401103F, 0x8000B0650401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_5).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_f;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_5).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_f;
}
#    0x8000B0060401103F, 0x8000B0260401103F, 0x8000B0460401103F, 0x8000B0660401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_6).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_g;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_6).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_g;
}
#    0x8000B0070401103F, 0x8000B0270401103F, 0x8000B0470401103F, 0x8000B0670401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_7).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_h;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_7).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_h;
}
#    0x8000B0080401103F, 0x8000B0280401103F, 0x8000B0480401103F, 0x8000B0680401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_8).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_8).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_a;
}
#    0x8000B0090401103F, 0x8000B0290401103F, 0x8000B0490401103F, 0x8000B0690401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_9).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_9).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_b;
}
#    0x8000B00A0401103F, 0x8000B02A0401103F, 0x8000B04A0401103F, 0x8000B06A0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_10).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_10).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_c;
}
#    0x8000B00B0401103F, 0x8000B02B0401103F, 0x8000B04B0401103F, 0x8000B06B0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_11).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_11).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_d;
}
#    0x8000B00C0401103F, 0x8000B02C0401103F, 0x8000B04C0401103F, 0x8000B06C0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_12).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_e;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_12).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_e;
}
#    0x8000B00D0401103F, 0x8000B02D0401103F, 0x8000B04D0401103F, 0x8000B06D0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_13).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_f;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_13).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_f;
}
#    0x8000B00E0401103F, 0x8000B02E0401103F, 0x8000B04E0401103F, 0x8000B06E0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_14).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_g;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_14).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_g;
}
#    0x8000B00F0401103F, 0x8000B02F0401103F, 0x8000B04F0401103F, 0x8000B06F0401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_15).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_h;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_15).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_h;
}
#    0x8000B0100401103F, 0x8000B0300401103F, 0x8000B0500401103F, 0x8000B0700401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_16).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_16).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_a;
}
#    0x8000B0110401103F, 0x8000B0310401103F, 0x8000B0510401103F, 0x8000B0710401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_17).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_17).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_b;
}
#    0x8000B0120401103F, 0x8000B0320401103F, 0x8000B0520401103F, 0x8000B0720401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_18).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_18).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_c;
}
#    0x8000B0130401103F, 0x8000B0330401103F, 0x8000B0530401103F, 0x8000B0730401103F
scom 0x800.0b(rx_prbs_mode_pl)(rx_grp_broadcast)(lane_19).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(rx_prbs_mode_pl)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_19).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#       rx_prbs_tap_id,        rx_prbs_tap_id_pattern_d;
}
#-------------------------------------------------------------------------------------
# PER-LANE (TX)
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# tx_prbs_tap_id                         ediei4  0        99     tx_prbs_mode_pl             0         3        RWX  n      000
#--*********************************************************************************************
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_0).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_0).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_a;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_1).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_1).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_b;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_2).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_2).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_c;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_3).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_3).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_d;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_4).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_e;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_4).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_e;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_5).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_f;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_5).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_f;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_6).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_g;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_6).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_g;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_7).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_h;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_7).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_h;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_8).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_8).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_a;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_9).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_9).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_b;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_10).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_10).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_c;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_11).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_11).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_d;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_12).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_e;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_12).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_e;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_13).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_f;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_13).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_f;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_14).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_g;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_14).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_g;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_15).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_h;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_15).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_h;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_16).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_a;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_16).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_a;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_17).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_b;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_17).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_b;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_18).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_c;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_18).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_c;
}
scom 0x800.0b(tx_prbs_mode_pl)(tx_grp_broadcast)(lane_19).0x(xbus0_gcr_addr){
         scom_data;
         rx_prbs_tap_id_pattern_d;
#scom 0x800.0b(tx_prbs_mode_pl)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_19).0x(xbus0_gcr_addr){
#       bits,                  scom_data;
#        tx_prbs_tap_id,        tx_prbs_tap_id_pattern_d;

}
#-------------------------------------------------------------------------------------
#     ____  __    __
#    / __ \/ /   / /
#   / /_/ / /   / /
#  / ____/ /___/ /___
# /_/   /_____/_____/  banner2 -fslant
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# rx_wt_cu_pll_pgood                     ediei4  0        99     rx_wiretest_pll_cntl_pg     0         1        RWX  n      0  
# rx_wt_cu_pll_reset                     ediei4  0        99     rx_wiretest_pll_cntl_pg     1         1        RWX  n      1  
# rx_wt_cu_pll_pgooddly                  ediei4  0        99     rx_wiretest_pll_cntl_pg     2         3        RWX  n      000
# rx_wt_cu_pll_lock                      ediei4  0        99     rx_wiretest_pll_cntl_pg     5         1        ROX  n      0  
# rx_wt_pll_refclksel                    ediei4  0        99     rx_wiretest_pll_cntl_pg     6         1        RWX  n      0  
# rx_pll_refclksel_scom_en               edi     0        99     rx_wiretest_pll_cntl_pg     7         1        RWX  n      0  
#--*********************************************************************************************
# TODO: Double check if this is needed here or not
# Register has more than one possible non-zero field so can't use group broadcast write
scom 0x800.0b(rx_wiretest_pll_cntl_pg)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                  scom_data;
        rx_wt_cu_pll_reset,    0b0;    # Put PLL in disabled state until Wiretest is started.
        rx_wt_cu_pll_pgooddly, 0b000;  # 16UI delay
}
#-------------------------------------------------------------------------------------
#     ____       _               __________      ____        __  __
#    / __ \_____(_)   _____     / ____/ / /__   / __ \____ _/ /_/ /____  _________
#   / / / / ___/ / | / / _ \   / /   / / //_/  / /_/ / __ `/ __/ __/ _ \/ ___/ __ \
#  / /_/ / /  / /| |/ /  __/  / /___/ / ,<    / ____/ /_/ / /_/ /_/  __/ /  / / / /
# /_____/_/  /_/ |___/\___/   \____/_/_/|_|  /_/    \__,_/\__/\__/\___/_/  /_/ /_/
#-------------------------------------------------------------------------------------
#--*********************************************************************************************
# tx_drv_clk_pattern_gcrmsg              ediei4  0        99     tx_clk_cntl_gcrmsg_pg       0         2        RWX  n      10
#--*********************************************************************************************
scom 0x800.0b(tx_clk_cntl_gcrmsg_pg)(tx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
         scom_data;
		 0x0000;
#scom 0x800.0b(tx_clk_cntl_gcrmsg_pg)(tx_grp0,tx_grp1,tx_grp2,tx_grp3)(lane_na).0x(xbus0_gcr_addr){
#        bits,                         scom_data;
#        tx_drv_clk_pattern_gcrmsg,    0b00;    # Drive 0's to start out
}

#--*********************************************************************************************
# rx_block_lock_lane                     ediei4  0        99     rx_cntl_pl                  0         1        RWX  n      0
# rx_check_skew_lane                     ediei4  0        99     rx_cntl_pl                  1         1        RWX  n      0
# rx_pdwn_lite                           edi     0        99     rx_cntl_pl                  2         1        RWX  n      0
# rx_offcal_mode                         ediei4  0        99     rx_cntl_pl                  3         1        RWX  n      0
#--*********************************************************************************************
# Register has more than one possible non-zero field so can't use group broadcast write
#scom 0x800.0b(rx_ei4_cal_cntl_pp)(rx_grp_broadcast)(lane_na).0x(xbus0_gcr_addr){
#         scom_data;
#		 0x8000;
scom 0x800.0b(rx_ei4_cal_cntl_pp)(rx_grp0,rx_grp1,rx_grp2,rx_grp3)(lane_na).0x(xbus0_gcr_addr){
        bits,                         scom_data;
	    rx_block_lock_lane,           0b1;
}


############################################################################################
# END OF FILE
############################################################################################
