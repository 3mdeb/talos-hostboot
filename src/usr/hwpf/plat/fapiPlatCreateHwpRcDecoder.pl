#!/usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
# 
# $Source: src/usr/hwpf/plat/fapiPlatCreateHwpRcDecoder.pl $
# 
# IBM CONFIDENTIAL
# 
# COPYRIGHT International Business Machines Corp. 2012
# 
# p1
# 
# Object Code Only (OCO) source materials
# Licensed Internal Code Source Materials
# IBM HostBoot Licensed Internal Code
# 
# The source code for this program is not published or otherwise
# divested of its trade secrets, irrespective of what has been
# deposited with the U.S. Copyright Office.
# 
# Origin: 30
# 
# IBM_PROLOG_END_TAG 

#
# Purpose:  This perl script will parse HWP Error XML files and create a
#           file containing a function that decodes HWP RC values
#
# Author: Mike Jones
#

use strict;

#------------------------------------------------------------------------------
# Print Command Line Help
#------------------------------------------------------------------------------
my $numArgs = $#ARGV + 1;
if ($numArgs < 2)
{
    print ("Usage: fapiPlatCreateHwpRcDecoder.pl <output dir> <filename1> <filename2> ...\n");
    print ("  This perl script will parse HWP Error XML files and create\n");
    print ("  a file containing a function that decodes HWP RC values\n");
    exit(1);
}

#------------------------------------------------------------------------------
# Specify perl modules to use
#------------------------------------------------------------------------------
use Digest::MD5 qw(md5_hex);
use XML::Simple;
my $xml = new XML::Simple (ForceArray=>[qw(hwpError)]);

# Uncomment to enable debug output
#use Data::Dumper;

#------------------------------------------------------------------------------
# Open output files for writing
#------------------------------------------------------------------------------
my $rcFile = $ARGV[0];
$rcFile .= "/";
$rcFile .= "fapiPlatHwpRcDecode.H";
open(TGFILE, ">", $rcFile);

#------------------------------------------------------------------------------
# Print start of file information
#------------------------------------------------------------------------------
print TGFILE "// fapiPlatHwpRcDecode.H\n";
print TGFILE "// This file is generated by perl script fapiPlatCreateHwpRcDecoder.pl\n\n";
print TGFILE "#ifndef FAPIPLATHWPRCDECODE_H_\n";
print TGFILE "#define FAPIPLATHWPRCDECODE_H_\n\n";
print TGFILE "#ifdef PARSER\n\n";
print TGFILE "namespace fapi\n";
print TGFILE "{\n\n";
print TGFILE "const char * fapiDecodeHwpRc(const uint32_t i_rcValue)\n";
print TGFILE "{\n";
print TGFILE "    switch(i_rcValue)\n";
print TGFILE "    {\n";

#------------------------------------------------------------------------------
# For each XML file
#------------------------------------------------------------------------------
foreach my $argnum (1 .. $#ARGV)
{
    #--------------------------------------------------------------------------
    # Read XML file
    #--------------------------------------------------------------------------
    my $infile = $ARGV[$argnum];
    my $errors = $xml->XMLin($infile);

    # Uncomment to get debug output of all errors
    #print "\nFile: ", $infile, "\n", Dumper($errors), "\n";

    #--------------------------------------------------------------------------
    # For each Error
    #--------------------------------------------------------------------------
    foreach my $err (@{$errors->{hwpError}})
    {
        #----------------------------------------------------------------------
        # Check that expected fields are present
        #----------------------------------------------------------------------
        if (! exists $err->{rc})
        {
            print ("fapiPlatCreateHwpRcDecoder.pl ERROR. rc missing\n");
            exit(1);
        }

        if (! exists $err->{description})
        {
            print ("fapiPlatCreateHwpRcDecoder.pl ERROR. description missing\n");
            exit(1);
        }

        #----------------------------------------------------------------------
        # Get the description, remove newlines, leading and trailing spaces and
        # multiple spaces
        #----------------------------------------------------------------------
        my $desc = $err->{description};
        $desc =~ s/\n/ /g;
        $desc =~ s/^ +//g;
        $desc =~ s/ +$//g;
        $desc =~ s/ +/ /g;

        #----------------------------------------------------------------------
        # Print the RC decode
        # Note that this uses the same code to calculate the attribute
        # enumerator as fapiParseErrorInfo.pl. This code must be kept in sync
        # with fapiParseErrorInfo.pl.
        #----------------------------------------------------------------------
        my $attrHash128Bit = md5_hex($err->{rc});
        my $attrHash24Bit = substr($attrHash128Bit, 0, 6);

        print TGFILE "    case 0x$attrHash24Bit:\n";
        print TGFILE "        return \"$desc\";\n";
        print TGFILE "        break;\n";
    }
}

#------------------------------------------------------------------------------
# Print end of file information
#------------------------------------------------------------------------------
print TGFILE "    default:\n";
print TGFILE "        return NULL;\n";
print TGFILE "    }\n";
print TGFILE "}\n\n";
print TGFILE "}\n\n";
print TGFILE "#endif\n";
print TGFILE "#endif\n";

#------------------------------------------------------------------------------
# Close output file
#------------------------------------------------------------------------------
close(TGFILE);

