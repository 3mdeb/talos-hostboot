<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/usr/targeting/common/xmltohb/attribute_types_openpower.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER HostBoot Project                                             -->
<!--                                                                        -->
<!-- Contributors Listed Below - COPYRIGHT 2016,2017                        -->
<!-- [+] International Business Machines Corp.                              -->
<!--                                                                        -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->
<attributes>

<!-- =====================================================================
     Contains the definition of attributes that are only available on
     openpower systems.  This file is only compiled when
     CONFIG_XML_INCLUDE_OPENPOWER is set to true and is always false on
     FSP based systems.
     =====================================================================
-->

<attribute>
    <id>ADC_CHANNEL_FUNC_IDS</id>
    <description>ADC Channel function id. 16 channels.</description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>ADC_CHANNEL_SENSOR_NUMBERS</id>
    <description>ADC Channel IPMI sensor numbers. 16 channels.</description>
    <simpleType>
        <uint32_t></uint32_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>ADC_CHANNEL_GNDS</id>
    <description>ADC Channel ground. 16 channels.</description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>ADC_CHANNEL_GAINS</id>
    <description>ADC channel gain * 1000. 16 channels.</description>
    <simpleType>
        <uint32_t></uint32_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>ADC_CHANNEL_OFFSETS</id>
    <description>ADC channel offset * 1000. 16 channels</description>
    <simpleType>
        <uint32_t></uint32_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>APSS_GPIO_PORT_MODES</id>
    <description>APSS GPIO PORT MODES</description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>2</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>APSS_GPIO_PORT_PINS</id>
    <description>APSS GPIO PORT PINS
        Port0 pin 0-7
        Port1 pin 8-15
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>16</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>GPIO_INFO</id>
    <description>Information needed to address GPIO device</description>
    <complexType>
        <description>Structure to define the addessing for an I2C
                     slave device.</description>
        <field>
            <name>i2cMasterPath</name>
            <description>Entity path to the chip that contains the I2C
                         master</description>
            <type>EntityPath</type>
            <default>physical:sys-0</default>
        </field>
        <field>
            <name>port</name>
            <description>Port from the I2C Master device. This is a 6-bit
                         value.</description>
            <type>uint8_t</type>
            <default>0</default>
        </field>
        <field>
            <name>devAddr</name>
            <description>Device address on the I2C bus. This is a 7-bit value,
                         but then shifted 1 bit left.</description>
            <type>uint8_t</type>
            <default>0</default>
        </field>
        <field>
            <name>engine</name>
            <description>I2C master engine. This is a 2-bit
                         value.</description>
            <type>uint8_t</type>
            <default>0</default>
        </field>
        <field>
            <name>vddrPin</name>
            <description>
                Logical GPIO pin number used to enabled/disable VDDR
            </description>
            <type>uint8_t</type>
            <default>0</default>
        </field>
    </complexType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>HDAT_I2C_ENGINE</id>
    <description>
        This attribute holds the values of the I2C Engine from the i2c device
        connections as defined in the MRW.  It is parsed into a struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_MASTER_PORT</id>
    <description>
        This attribute holds the values of the I2C Master Port from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_DEVTYPE</id>
    <description>
        This attribute holds the values of the I2C device type from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_ADDR</id>
    <description>
        This attribute holds the values of the I2C address from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_SLAVE_PORT</id>
    <description>
        This attribute holds the values of the I2C slave port from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_BUS_FREQ</id>
    <description>
        This attribute holds the values of the I2C bus frequency in Hz from
        the i2c device connections as defined in the MRW.  It is parsed
        into a struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_DEV_PURPOSE</id>
    <description>
        This attribute holds the values of the I2C device purpose from the i2c
        device connections as defined in the MRW.  It is parsed into a
        struct in i2c.C
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>32</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HDAT_I2C_ELEMENTS</id>
    <description>
        This attribute holds the number of elements that were found under this
        particular target, and how many devices are stored in the arrays.
    </description>
    <simpleType>
        <uint8_t><default>0</default></uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>ISDIMM_MBVPD_INDEX</id>
    <description>
        Multiple centaurs can sometimes have their VPD located in one
        physical SEEPROM. This is the index into the memory buffer VPD
        for this centaur.
    </description>
    <simpleType>
        <uint8_t>
            <default>0</default>
        </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
    <hwpfToHbAttrMap>
        <id>ATTR_ISDIMM_MBVPD_INDEX</id>
        <macro>DIRECT</macro>
    </hwpfToHbAttrMap>
</attribute>

<attribute>
    <id>IPMI_INSTANCE</id>
    <description>Holds the IPMI instance number for this entity.</description>
    <simpleType>
        <uint32_t>
        </uint32_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>IPMI_SENSORS</id>
    <description>Attribute to hold 16 pairs of sensor name, sensor number
        pairs. A sensor name consists of one byte of general sensor type
        and one byte of sub-type</description>
    <simpleType>
        <uint16_t></uint16_t>
        <array>16,2</array>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OP_TRACE_LITE</id>
    <description>
        Enable Trace lite on openpower.
    </description>
    <simpleType>
        <uint8_t>
            <default></default>
        </uint8_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
</attribute>

<attribute>
    <id>OPEN_POWER_DIMM_THROTTLE_TEMP_DEG_C</id>
    <description>
        DIMM temperature threshold where throttling will
        occur in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_DIMM_ERROR_TEMP_DEG_C</id>
    <description>
        DIMM temperature where an error will be generated
        in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MEMCTRL_THROTTLE_TEMP_DEG_C</id>
    <description>
         Memory controller temperature threshold
         where throttling will occur in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_PROC_WEIGHT</id>
    <description>
        Weight factor (in 1/10ths) for each core DTS to calculate a core
        temperature.
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_QUAD_WEIGHT</id>
    <description>
        Weight factor (in 1/10ths) for each quad (cache) DTS to calculate a core
        temperature.
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_PROC_DVFS_TEMP_DEG_C</id>
    <description>
        Processor temperature where DVFS will occur in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MEMCTRL_ERROR_TEMP_DEG_C</id>
    <description>
        Memory controller temperature where an error will occur
        in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_N_BULK_POWER_LIMIT_WATTS</id>
    <description>
        N mode bulk power supply limit in Watts
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_N_MAX_MEM_POWER_WATTS</id>
    <description>
        Maximum power allocated to DIMMs in Watts
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MEMCTRL_READ_TIMEOUT_SEC</id>
    <description>
        Memory controller read timeout in seconds
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_DIMM_READ_TIMEOUT_SEC</id>
    <description>
        DIMM read timeout in seconds
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_PROC_ERROR_TEMP_DEG_C</id>
    <description>
        Processor temperature error threshold in degrees C
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MIN_MEM_UTILIZATION_THROTTLING</id>
    <description>
        Minimum memory utilization percent (from 0-100)
        for memory throttling
    </description>
    <simpleType>
        <uint8_t></uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MIN_MEM_UTILIZATION_POWER_CAP</id>
    <description>
        Minimum memory utilization percent (from 0-100)
        for power capping
    </description>
    <simpleType>
        <uint8_t></uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_VRM_READ_TIMEOUT_SEC</id>
    <description>
        VRM read timeout in seconds (from 0-255)
        Use 0 to disable VRM OT monitoring
    </description>
    <simpleType>
        <uint8_t>
            <default>0</default>
        </uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_PROC_READ_TIMEOUT_SEC</id>
    <description>
        Processor read timeout in seconds
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_REGULATOR_EFFICIENCY_FACTOR</id>
    <description>
        Regulator efficiency factor
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_MIN_POWER_CAP_WATTS</id>
    <description>
        Minimum hard power cap in Watts
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_SOFT_MIN_PCAP_WATTS</id>
    <description>
        Minimum soft power cap in Watts
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_N_PLUS_ONE_BULK_POWER_LIMIT_WATTS</id>
    <description>
        N+1 bulk power limit in Watts for systems running
        with redundant power supplies (default)
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_N_PLUS_ONE_HPC_BULK_POWER_LIMIT_WATTS</id>
    <description>
        N+1 bulk power limit in Watts for High Performance Computing
        systems running with a non-redundant power supply policy
    </description>
    <simpleType>
        <uint64_t>
            <default>0</default>
        </uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_N_PLUS_ONE_MAX_MEM_POWER_WATTS</id>
    <description>
        N+1 max memory power in Watts
    </description>
    <simpleType>
        <uint64_t></uint64_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPEN_POWER_TURBO_MODE_SUPPORTED</id>
    <description>
        If this system supports Turbo frequency mode.
            0x00 = no
            0x01 = yes
    </description>
    <simpleType>
        <uint8_t></uint8_t>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>OPAL_MODEL</id>
    <description>
        Specifies the compatible model name for Opal to key off of.
        This is sourced from the MRW and should be of the format
        'vendor,model', e.g. 'tyan,palmetto'.
    </description>
    <simpleType>
        <string>
            <default>ibm,miscopenpower</default>
            <sizeInclNull>32</sizeInclNull>
        </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<enumerationType>
    <id>ENTITY_ID</id>
    <description>Enumeration indicating the IPMI entity ID, these values are
        defined in the IPMI specification.  These values will be used in place
        of target type when events are sent to the BMC.</description>
    <enumerator>
        <name>NA</name>
        <value>0</value>
    </enumerator>
    <enumerator>
        <name>OTHER</name>
        <value>0x01</value>
    </enumerator>
    <enumerator>
        <name>PROCESSOR</name>
        <value>0x03</value>
    </enumerator>
    <enumerator>
        <name>SYSTEM_BOARD</name>
        <value>0x07</value>
    </enumerator>
    <enumerator>
        <name>POWER_MGMT</name>
        <value>0x15</value>
    </enumerator>
    <enumerator>
        <name>CHASSIS</name>
        <value>0x17</value>
    </enumerator>
    <enumerator>
        <name>MEMORY_DEVICE</name>
        <value>0x20</value>
    </enumerator>
    <enumerator>
        <name>BIOS</name>
        <value>0x22</value>
    </enumerator>
    <enumerator>
        <name>OS</name>
        <value>0x23</value>
    </enumerator>
    <enumerator>
        <name>CORE</name>
        <value>0xD0</value>
    </enumerator>
    <enumerator>
        <name>MEMBUF</name>
        <value>0xD1</value>
    </enumerator>
    <enumerator>
        <name>OCC</name>
        <value>0xD2</value>
    </enumerator>
    <enumerator>
        <name>REF_CLOCK</name>
        <value>0xD4</value>
    </enumerator>
    <enumerator>
        <name>PCI_CLOCK</name>
        <value>0xD5</value>
    </enumerator>
    <enumerator>
        <name>TOD_CLOCK</name>
        <value>0xD6</value>
    </enumerator>
    <enumerator>
        <name>APSS</name>
        <value>0xD7</value>
    </enumerator>
</enumerationType>


<enumerationType>
    <id>SENSOR_TYPE</id>
    <description>Enumeration indicating the IPMI sensor type, these values
        are defined in the IPMI specification. These values will be used when
    sending sensor reading events to the BMC.</description>
    <enumerator>
        <name>NA</name>
        <value>0</value>
    </enumerator>
    <enumerator>
        <name>TEMPERATURE</name>
        <value>0x01</value>
    </enumerator>
    <enumerator>
        <name>PROCESSOR</name>
        <value>0x07</value>
    </enumerator>
    <enumerator>
        <name>MEMORY</name>
        <value>0x0c</value>
    </enumerator>
    <enumerator>
        <name>SYS_FW_PROGRESS</name>
        <value>0x0F</value>
    </enumerator>
    <enumerator>
        <name>SYS_EVENT</name>
        <value>0x12</value>
    </enumerator>
    <enumerator>
        <name>OS_BOOT</name>
       <value>0x1F</value>
    </enumerator>
    <enumerator>
        <name>APCI_POWER_STATE</name>
        <value>0x22</value>
    </enumerator>
    <enumerator>
        <name>FREQ</name>
        <value>0xC1</value>
    </enumerator>
    <enumerator>
        <name>POWER</name>
        <value>0xC2</value>
    </enumerator>
    <enumerator>
        <name>BOOT_COUNT</name>
        <value>0xC3</value>
    </enumerator>
    <enumerator>
        <name>PCI_LINK_PRES</name>
        <value>0xC4</value>
    </enumerator>
    <enumerator>
        <name>PWR_LIMIT_ACTIVE</name>
        <value>0xC4</value>
    </enumerator>
    <enumerator>
        <name>FAULT</name>
        <value>0xC7</value>
    </enumerator>
</enumerationType>

<!-- IPMI Sensor numbers are defined in the IPMI spec as 8 bit values. However
in the hostboot code they will be defined as a uint16_t to allow us to add
additonal information. An example relates to error logs returned by the OCC,
we might want to pass the Entity ID in the upper byte of the sensor ID, this
would allow hostboot to search only the target type identifed by the Entity
ID for the sensor number returned with the elog. -->

<!-- attribute to hold 16 pairs of sensor type, sensor number values -->

<attribute>
    <id>IPMI_MAX_BUFFER_SIZE</id>
    <description>max buffer size to use for ipmi messages</description>
    <simpleType>
        <uint32_t>
        </uint32_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
</attribute>

<attribute>
    <id>BMC_MANUFACTURER</id>
    <description>The manufacturer of the BMC</description>
    <simpleType>
    <string>
        <default>ibm</default>
        <sizeInclNull>32</sizeInclNull>
    </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>BMC_HW_CHIP_TYPE</id>
    <description>The type of hardware of the BMC</description>
    <simpleType>
    <string>
        <default>ast2500</default>
        <sizeInclNull>32</sizeInclNull>
    </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<attribute>
    <id>BMC_SW_TYPE</id>
    <description>The software type of the BMC</description>
    <simpleType>
    <string>
        <default>openbmc</default>
        <sizeInclNull>32</sizeInclNull>
    </string>
    </simpleType>
    <persistency>non-volatile</persistency>
    <readable/>
</attribute>

<!-- Start of HTMGT attributes -->

<attribute>
    <id>HTMGT_SAFEMODE</id>
    <description>1 = in safemode. 0 = in normal mode.</description>
    <simpleType>
        <uint8_t>
        </uint8_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
    <hbOnly/>
</attribute>

<attribute>
    <id>PSTATE_TABLE</id>
    <description>HTMGT PSTATE data</description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>3656</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>PSTATE_TABLE_MFG</id>
    <description>HTMGT PSTATE data for mfg</description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>3656</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OCC_CONTROL_DATA</id>
    <description>OCC operational data
    </description>
    <simpleType>
        <uint8_t></uint8_t>
        <array>256</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>HTMGT_INTERNAL_FLAGS</id>
    <description>HTMGT internal flags
    </description>
    <simpleType>
        <uint32_t>
            <default>0</default>
        </uint32_t>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OT_MIN_N_PER_MBA</id>
    <description>
        Lowest per MBA numerator ever allowed when OCC is
        throttling due to OT.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OT_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts with throttle
        set to minimum.
    </description>
    <simpleType>
        <uint32_t>
            <default>0,0</default>
        </uint32_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>N_PLUS_ONE_N_PER_MBA</id>
    <description>
        Static per MBA numerator setting when not in
        oversubscription.  Calculated based on MRW memory
        power with redundant power. Lowest per MBA numerator
        ever allowed when OCC is throttling due to OT.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>N_PLUS_ONE_N_PER_CHIP</id>
    <description>
        Static per chip numerator setting when not in oversubscription.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>N_PLUS_ONE_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts with throttle
        set to nominal/turbo
    </description>
    <simpleType>
        <uint32_t>
            <default>0,0</default>
        </uint32_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OVERSUB_N_PER_MBA</id>
    <description>
        Static per MBA numerator setting when in oversubscription.
        Calculated based on MRW oversubscription memory power.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OVERSUB_N_PER_CHIP</id>
    <description>
        Static per chip numerator setting when in oversubscription.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>OVERSUB_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts with throttle
        set to oversubscription.
    </description>
    <simpleType>
        <uint32_t>
            <default>0,0</default>
        </uint32_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>


<attribute>
    <id>POWERCAP_N_PER_MBA</id>
    <description>
        Static per slot numerator setting when power is being capped.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>POWERCAP_N_PER_CHIP</id>
    <description>
        Static per chip numerator setting when power is being capped.
    </description>
    <simpleType>
        <uint16_t>
            <default>0,0</default>
        </uint16_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<attribute>
    <id>POWERCAP_MEM_POWER</id>
    <description>
        Maximum memory power in centiWatts with when power is being capped.
    </description>
    <simpleType>
        <uint32_t>
            <default>0,0</default>
        </uint32_t>
        <array>2</array>
    </simpleType>
    <persistency>volatile-zeroed</persistency>
    <readable/>
    <writeable/>
</attribute>

<!-- end HTMGT attributes -->

</attributes>
