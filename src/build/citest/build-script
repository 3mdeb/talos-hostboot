#!/bin/sh
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: src/build/citest/build-script $
#
# OpenPOWER HostBoot Project
#
# Contributors Listed Below - COPYRIGHT 2014,2018
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

if [ -z $PROJECT_ROOT ]; then
    source "$WORKSPACE/env.bash"
fi

source "$PROJECT_ROOT/src/build/citest/setup-env"
echo "#--------------------------------"
echo "SANDBOXROOT=$SANDBOXROOT"
echo "SANDBOXNAME=$SANDBOXNAME"
echo "CHIP=$CHIP"
echo "PNOR=$PNOR"
echo "#--------------------------------"
#export HOSTBOOT_DEBUG=1    #-- Ensure printkd / tracd is compiled in.

# Force simics into Secure Mode
export SECURITY_HW_POLICY="1"

# Check copyright.
check-copyright > copyright.log 2>&1 &
COPYRIGHT_PID=$!

# Create simics sandbox.
create-sandbox > create-sandbox.log 2>&1 &
CREATESANDBOX_PID=$!

my_date=$(date)
# Build Hostboot.
echo "#--------------------------------"
printf "\n\n$(date): Starting \"make -j32\"\n\n"
echo "#--------------------------------"
make -j32 || exit -1
echo "#--------------------------------"
printf "\n\nrc=$?: $(date): FINISHED running (\"make -j32\" was started at $my_date)\n\n"
echo "#--------------------------------"
# Check copyright completion.
wait $COPYRIGHT_PID
if [ $? -eq 0 ]; then
    echo "----Copyright check succeeded."
    cat copyright.log
else
    echo "----Copyright check failed."
    cat copyright.log
    exit -1
fi

# Check sandbox create completion.
wait $CREATESANDBOX_PID
if [ $? -eq 0 ]; then
    echo "----Sandbox creation succeeded, here is the log."
    cat create-sandbox.log
else
    echo "----Sandbox creation failed."
    cat create-sandbox.log
    exit -1
fi

# Add Hostboot files to simics sandbox.
my_date=$(date)
echo "#--------------------------------"
printf "\n\n$(date): Now running populate-sandbox....\n\n"
echo "#--------------------------------"
populate-sandbox || exit -1
echo "#--------------------------------"
printf "\n\nrc=$?: $(date): FINISHED running (\"populate-sandbox\" was started at $my_date)\n\n"
echo "#--------------------------------"

#@fixme - Temp disable, RTC:170635
# Start errl parser building.
#build-errl-parsers > errl-parsers.log 2>&1 &
#ERRLPARSERS_PID=$!

# Start CxxTest Simics execution.
my_date=$(date)
echo "#--------------------------------"
printf "\n\n$(date): Now running cxxtest-start.sh....\n\n"
echo "#--------------------------------"
cxxtest-start.sh || exit -1
echo "#--------------------------------"
printf "\n\nrc=$?: $(date): FINISHED running (\"cxxtest-start.sh\" was started at $my_date)\n\n"
echo "#--------------------------------"

#@fixme - Temp disable, RTC:170635
# Check errl parser completion.
#wait $ERRLPARSERS_PID
#if [ $? -ne 0 ]; then
#    echo "----Error parsers failed."
#    cat errl-parsers.log
#    exit -1
#fi

