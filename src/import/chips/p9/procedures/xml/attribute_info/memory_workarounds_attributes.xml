<!-- IBM_PROLOG_BEGIN_TAG                                                   -->
<!-- This is an automatically generated prolog.                             -->
<!--                                                                        -->
<!-- $Source: src/import/chips/p9/procedures/xml/attribute_info/memory_workarounds_attributes.xml $ -->
<!--                                                                        -->
<!-- OpenPOWER HostBoot Project                                             -->
<!--                                                                        -->
<!-- Contributors Listed Below - COPYRIGHT 2016,2017                        -->
<!-- [+] International Business Machines Corp.                              -->
<!--                                                                        -->
<!--                                                                        -->
<!-- Licensed under the Apache License, Version 2.0 (the "License");        -->
<!-- you may not use this file except in compliance with the License.       -->
<!-- You may obtain a copy of the License at                                -->
<!--                                                                        -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                         -->
<!--                                                                        -->
<!-- Unless required by applicable law or agreed to in writing, software    -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,      -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        -->
<!-- implied. See the License for the specific language governing           -->
<!-- permissions and limitations under the License.                         -->
<!--                                                                        -->
<!-- IBM_PROLOG_END_TAG                                                     -->

<!--
   XML file specifying HWPF attributes for memory workarounds
   These are needed for memory workarounds which are based on
   'sub' versions of the modules (i.e., not 1.0/2.0 but 1.02 ...)
-->

<attributes>

  <attribute>
    <id>ATTR_DO_MSS_WR_VREF</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      In sub DD1.02 Nimbus in the WR VREF algorithm, certain work-arounds are needed
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>NO = 0, YES = 1</enum>
    <writeable/>
  </attribute>

  <attribute>
    <id>ATTR_SKIP_HW_VREF_CAL</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      In sub DD1.02 Nimbus the HW VREF calibrations should not be run
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>RUN = 0, SKIP = 1</enum>
    <writeable/>
  </attribute>

  <attribute>
    <id>ATTR_SKIP_RD_VREF_VREFSENSE_OVERRIDE</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      In sub DD1.03 Nimbus the HW VREF calibrations should not be run
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>RUN = 0, SKIP = 1</enum>
    <writeable/>
  </attribute>

  <attribute>
    <id>ATTR_DO_MSS_VREF_DAC</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      VREF DAC work-around for Nimbus sub DD1.02
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>NO = 0, YES = 1</enum>
    <writeable/>
  </attribute>

  <attribute>
    <id>ATTR_DO_MSS_TRAINING_BAD_BITS</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      For Nimbus pre DD1.02 we want to pass DDR training if we see 'correctable'
      errors. This isn't the case for post-DD1.02 where we want to pass/fail
      training based on the results from the PHY itself
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>NO = 0, YES = 1</enum>
    <writeable/>
  </attribute>

  <attribute>
    <id>ATTR_DO_BLUE_WATERFALL_ADJUST</id>
    <targetType>TARGET_TYPE_PROC_CHIP</targetType>
    <description>
      For Nimbus pre DD1.** we want to adjust the blue waterfall values
      and their associated gate delays if the blue waterfalls are 0.
      Post DD1.** will have a hardware enabled fix for this.
    </description>
    <initToZero></initToZero>
    <valueType>uint8</valueType>
    <enum>NO = 0, YES = 1</enum>
    <writeable/>
  </attribute>

</attributes>
